{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#lightpack-php","title":"Lightpack PHP","text":"<p>A modern PHP web framework with extreme performance and small footprint.</p> <p> </p> <p>The philosophy that drives <code>Lightpack</code> PHP framework:</p> <ul> <li>Avoid facades for unnecessary syntactic sugar.</li> <li>Avoid interfaces just for the sake of interfaces.</li> <li>Avoid wrappers around wrappers around wrappers. \"The wrappers hell.\"</li> <li>Avoid jargons in favor of well known terms. (Example: Model instead of Gateway)</li> <li>Avoid thick abstractions to promote less bloated core. </li> <li>Avoid promoting thousand ways for doing the same thing.</li> <li>Cut down the layers to minimize deep call chains.</li> <li>All design choices come with tradeoffs.</li> <li>It's okay to violate few industry best practices.</li> </ul> <p>Lightpack is released under [MIT] License Terms | \u00a9 Pradeep Tiwari </p>"},{"location":"_coverpage/","title":"coverpage","text":""},{"location":"_coverpage/#lightpack-10","title":"\ud83d\udca1 Lightpack 1.0","text":"<p>Performant PHP web framework with small footprint.</p> <p>GitHub Get Started</p>"},{"location":"_navbar/","title":"navbar","text":"<ul> <li> <p>Getting started</p> </li> <li> <p>Quick start</p> </li> <li>Writing more pages</li> <li>Custom navbar</li> <li>Cover page</li> </ul>"},{"location":"_sidebar/","title":"sidebar","text":"<ul> <li> <p>Getting Started</p> </li> <li> <p>Quick Install</p> </li> <li> <p>Basics</p> </li> <li> <p>Routing</p> </li> <li>Controllers</li> <li>Views</li> <li>Request</li> <li>Response</li> <li>Sessions</li> <li>Cookies</li> <li>Validation</li> <li>Filesystem</li> <li>Configuration</li> <li>Environments</li> <li>Date &amp; Time</li> <li> <p>Utility Functions</p> </li> <li> <p>Databases</p> </li> <li> <p>Connection</p> </li> <li> <p>Query Builder </p> </li> <li> <p>Migrations</p> </li> <li>Seeder</li> <li> <p>Factory</p> </li> <li> <p>Lucid ORM</p> </li> <li> <p>Introduction</p> </li> <li>Models</li> <li>Relationships</li> <li>Eager Loading</li> <li>Collections</li> <li>Transformers</li> </ul> <ul> <li> <p>Authentication</p> <ul> <li>Introduction</li> <li>API Access Tokens</li> <li>Configuration</li> <li>Extending Auth</li> <li>Route Filters</li> </ul> </li> <li> <p>Utilities</p> </li> <li> <p>Password</p> </li> <li>Crypto</li> <li>URL</li> <li>Image</li> <li>Rate Limit</li> <li>Mutex Lock</li> <li>Process</li> <li>Array</li> <li>String</li> <li>OTP</li> <li>Assets</li> <li>CSV</li> <li> <p>PHP to JS</p> </li> <li> <p>Advanced</p> </li> <li> <p>Mails</p> </li> <li>Queue</li> <li>Schedule</li> <li>Filters</li> <li>Events</li> <li>Caching</li> <li>Logging</li> <li>Providers</li> <li>Containers</li> <li>CORS</li> <li>HTTP Client</li> <li>Console</li> <li>Testing</li> <li>Secrets</li> <li>Settings</li> <li>Tags</li> <li>Taxonomies</li> <li>Faker</li> <li>Audit</li> <li>RBAC</li> <li>Captcha</li> <li>Webhook</li> <li>AI</li> <li>Cable</li> <li>Uploads</li> <li>Social Auth</li> <li>SMS</li> <li>MFA</li> <li>Storage</li> </ul>"},{"location":"ai-service/","title":"Lightpack AI System","text":"<p>A unified, explicit, and extensible interface for text generation, summarization, and structured AI tasks in your Lightpack apps. Supports multiple providers, robust schema validation, and a fluent builder for advanced use cases.</p> <ul> <li>Purpose: Seamlessly add AI/ML-powered text, content, and structured data generation to any Lightpack project.</li> <li>Where to Use: Blog/content generation, summarization, Q&amp;A, code generation, structured data extraction, creative writing, and more.</li> </ul> <p>Lightpack AI exposes two super easy to use methods:</p> <pre><code>ai()-&gt;ask(); // Simple question-answer\n\nai()-&gt;task(); // Structured text output\n</code></pre>"},{"location":"ai-service/#supported-providers","title":"Supported Providers","text":"Driver Class Use Case / Notes <code>openai</code> <code>Providers\\OpenAI</code> OpenAI GPT-3.5, GPT-4 <code>anthropic</code> <code>Providers\\Anthropic</code> Claude models <code>mistral</code> <code>Providers\\Mistral</code> Mistral models <code>groq</code> <code>Providers\\Groq</code> Groq API <p>Add your own: Implement <code>ProviderInterface</code> and register in config.</p>"},{"location":"ai-service/#configuration","title":"Configuration","text":"<p>All settings live in <code>config/ai.php</code>:</p> Key Description Example / Default <code>driver</code> Which provider to use <code>'openai'</code> <code>key</code> API key for the provider (secret, per provider) <code>temperature</code> Controls creativity (0.0\u20132.0) <code>0.7</code> <code>max_tokens</code> Max output length <code>256</code> <code>http_timeout</code> Request timeout (seconds) <code>10</code> <code>model</code> Model name (per provider) <code>'gpt-3.5-turbo'</code>, etc. <code>cache_ttl</code> Cache lifetime (seconds) <code>3600</code> <code>providers.&lt;driver&gt;.endpoint</code> API endpoint (per provider) <code>providers.&lt;driver&gt;.model</code> Default model for driver <code>providers.&lt;driver&gt;.key</code> API key for driver"},{"location":"ai-service/#usage","title":"Usage","text":"<p>Use <code>ai()</code> helper as convinience to access the current provider. The document below explains how to use the supported AI features.</p>"},{"location":"ai-service/#ask","title":"ask()","text":"<p>For simple, one-off questions, use the <code>ask()</code> method:</p> <pre><code>$answer = ai()-&gt;ask('What is the capital of France?');\necho $answer; // \"Paris\"\n</code></pre> <ul> <li>Internally uses the TaskBuilder for prompt handling.</li> <li>Returns the raw answer as a plain string.</li> </ul>"},{"location":"ai-service/#task","title":"task()","text":"<p>The <code>TaskBuilder</code> enables advanced, schema-aware structured AI response:</p> <pre><code>// Get a structured JSON object with validation\n$result = ai()-&gt;task()\n    -&gt;prompt('What is your name and age?')\n    -&gt;expect(['name' =&gt; 'string', 'age' =&gt; 'int'])\n    -&gt;required('name', 'age')\n    -&gt;run();\n\nif ($result['success']) {\n    echo $result['data']['name']; // \"Alice\"\n    echo $result['data']['age'];  // 30\n} else {\n    print_r($result['errors']);\n}\n</code></pre> <p>It exposes following capabilities:</p> <ul> <li>expect(array $schema): Specify expected keys/types for JSON output.</li> <li>required(...$fields): Mark fields as required (fail if missing/null).</li> <li>expectArray($key): Expect an array of objects (e.g., list of movies).</li> <li>example(array $example): Provide an example for the model.</li> <li>messages/system: Compose multi-turn, role-based conversations.</li> <li>Robust JSON extraction: Handles messy LLM output.</li> </ul> <p>The returned response contains:</p> <pre><code>[\n    'text' =&gt; 'The generated content.',\n    'finish_reason' =&gt; 'stop', // or other reason, if available\n    'usage' =&gt; [...],          // token stats, if available\n    'raw' =&gt; [...],            // full provider response\n]\n</code></pre> <p>Example Recipes</p>"},{"location":"ai-service/#1-validate-array-of-objects","title":"1. Validate Array of Objects","text":"<pre><code>$result = ai()-&gt;task()\n    -&gt;prompt('List 2 movies with title, rating, and summary.')\n    -&gt;expect(['title' =&gt; 'string', 'rating' =&gt; 'int', 'summary' =&gt; 'string'])\n    -&gt;required('title', 'rating', 'summary')\n    -&gt;expectArray('movie')\n    -&gt;run();\n\nif (!$result['success']) {\n    // $result['errors'] contains missing fields per item\n}\n</code></pre>"},{"location":"ai-service/#2-use-conversation-history","title":"2. Use Conversation History","text":"<pre><code>$result = ai()-&gt;task()\n    -&gt;message('system', 'You are a helpful assistant.')\n    -&gt;message('user', 'How do I reset my password?')\n    -&gt;run();\n</code></pre>"},{"location":"ai-service/#3-custom-modeltemperature","title":"3. Custom Model/Temperature","text":"<pre><code>$result = ai()-&gt;generate([\n    'prompt' =&gt; 'Write a creative poem.',\n    'model' =&gt; 'gpt-4',\n    'temperature' =&gt; 1.2,\n]);\n</code></pre>"},{"location":"ai-service/#4-caching","title":"4. Caching","text":"<ul> <li>All providers cache results by default (configurable via <code>cache</code> and <code>cache_ttl</code> keys or your config).</li> <li>You can bypass cache or set TTL for a task:   <code>php ai()-&gt;task()     -&gt;prompt('...')     -&gt;cache(false)    // disables cache for this run     -&gt;cacheTtl(60)    // sets cache TTL to 60 seconds     -&gt;run();</code></li> </ul>"},{"location":"ai-service/#error-handling","title":"Error Handling","text":"<ul> <li>Transport/API call related errors throw exceptions.</li> <li>Validation errors (missing required fields, schema mismatch) are in <code>$result['errors']</code>.</li> <li>Always check <code>$result['success']</code> when using <code>TaskBuilder</code>.</li> </ul>"},{"location":"ai-service/#security-best-practices","title":"Security &amp; Best Practices","text":"<ul> <li>Never commit API keys to version control.</li> <li>Limit max_tokens and temperature for cost and predictability.</li> <li>Log and monitor AI errors for production apps.</li> <li>Use schema/required fields for structured data extraction.</li> </ul>"},{"location":"api-access-tokens/","title":"API Access Tokens","text":"<p>API access tokens are secure, random strings issued to users or applications that allow them to authenticate and access protected resources over HTTP APIs. They are commonly used for stateless authentication in RESTful APIs, mobile apps, and third-party integrations. Each token can be associated with specific permissions (\"abilities\" or \"scopes\") and may have an expiration time, enabling fine-grained access control and easy revocation without relying on session state.</p>"},{"location":"api-access-tokens/#authenticate-api","title":"Authenticate API","text":"<p>Authenticate API requests using a bearer token provided in the <code>Authorization</code> header. This is the standard approach for stateless authentication in APIs.</p> <p>How it works: - The client sends an HTTP header: <code>Authorization: Bearer &lt;token&gt;</code>. - The server extracts the token and verifies it against the <code>access_tokens</code> table. - If valid and not expired, the associated user is authenticated for the request.</p> <pre><code>// Authenticate the request using a bearer token\n$user = auth()-&gt;viaToken();\n\nif ($user) {\n    // The token is valid\n}\n</code></pre>"},{"location":"api-access-tokens/#issue-access-tokens","title":"Issue Access Tokens","text":"<p>A user can have one or more access tokens allowing them to authenticate future requests. Tokens can have specific abilities (scopes) and expiration dates.</p> <p>How it works: - Call <code>createToken()</code> on the user object, specifying a name, an array of abilities (permissions), and an optional expiration date. - The method creates a hashed token in the database and returns a temporary <code>plainTextToken</code> for the client to store securely. - The wildcard <code>'*'</code> grants all abilities.</p> <pre><code>$user = auth()-&gt;user(); // Get the currently authenticated user\n</code></pre> <p>Following issues a never expiring API access token named site-manager with all the abilities/permissions.</p> <pre><code>$token = $user-&gt;createToken('site-manager');\n</code></pre> <p>Following issues a token that expires in 30 days with limited abilities.</p> <pre><code>$token = $user-&gt;createToken(\n    'site-manager',                \n    ['read:post', 'write:post'], \n    moment()-&gt;travel('+30 days')\n);\n</code></pre> <p>You should return the plain text token to the client:</p> <pre><code>return ['token' =&gt; $token-&gt;plainTextToken];\n</code></pre> <p>Note: The <code>plainTextToken</code> property is only available immediately after creation. The client should store it securely as it cannot be retrieved again.</p>"},{"location":"api-access-tokens/#check-token-abilities","title":"Check Token Abilities","text":"<p>You can authorize specific actions based on the abilities (scopes) assigned to the access token. This enables fine-grained access control for API clients.</p> <p>How it works: - Each token has an array of abilities (e.g., <code>['read:post', 'write:post']</code>). - When handling a request, check if the authenticated user's token grants the required ability.</p> <pre><code>if ($user-&gt;tokenCan('write:post')) {\n    // User can write posts\n}\n</code></pre> <pre><code>if ($user-&gt;tokenCannot('write:post')) {\n    // User cannot write posts\n}\n</code></pre>"},{"location":"api-access-tokens/#delete-tokens","title":"Delete Tokens","text":"<p>Tokens can be deleted/revoked individually or in bulk.</p> <pre><code>// Delete all tokens for the user\n$user-&gt;deleteTokens();        \n\n// Delete a specific token by its plaintext value\n$user-&gt;deleteTokens($plainTextToken); \n\n// Delete current request access token \n$user-&gt;deleteCurrentRequestToken();\n\n// Delete a token by ID\n$user-&gt;deleteTokensById(23);\n\n// Delete multiple tokens by ID\n$user-&gt;deleteTokensById([23, 24, 24]);\n</code></pre> <ul> <li>Deleting tokens immediately invalidates them for future authentication.</li> <li>Use this to implement logout-from-all-devices or token revocation endpoints.</li> </ul>"},{"location":"array-utils/","title":"Array Utility Documentation","text":"<p>Lightpack's Array utility provides a powerful set of methods for working with arrays, featuring dot notation access, wildcard matching, array transformations, and hierarchical tree building.</p>"},{"location":"array-utils/#basic-usage","title":"Basic Usage","text":"<pre><code>use Lightpack\\Utils\\Arr;\n\n$arr = new Arr();\n</code></pre> <p>Or simply call <code>arr()</code> utility function.</p> <p>It exposes following methods to efficiently workk with arrays:</p> <ul> <li>get()</li> <li>set()</li> <li>has()</li> <li>delete()</li> <li>tree()</li> <li>transpose()</li> </ul>"},{"location":"array-utils/#basic-operations","title":"Basic Operations","text":"<pre><code>$data = [\n    'user' =&gt; [\n        'profile' =&gt; [\n            'name' =&gt; 'John Doe',\n            'email' =&gt; 'john@example.com'\n        ]\n    ]\n];\n\n// Check if key exists\n$exists = arr()-&gt;has('user.profile.name', $data);  // true\n\n// Get value\n$name = arr()-&gt;get('user.profile.name', $data);    // 'John Doe'\n$age = arr()-&gt;get('user.age', $data, 25);          // 25 (default value)\n\n// Set value\narr()-&gt;set('user.profile.age', 30, $data);\n\n// Delete value\narr()-&gt;delete('user.profile.email', $data);\n</code></pre>"},{"location":"array-utils/#dot-notation","title":"Dot Notation","text":""},{"location":"array-utils/#basic-dot-notation","title":"Basic Dot Notation","text":"<pre><code>$data = [\n    'users' =&gt; [\n        'active' =&gt; [\n            'john' =&gt; ['age' =&gt; 25],\n            'jane' =&gt; ['age' =&gt; 30]\n        ]\n    ]\n];\n\n// Access nested data\n$johnsAge = arr()-&gt;get('users.active.john.age', $data);    // 25\n\n// Set nested data\narr()-&gt;set('users.active.bob.age', 35, $data);\n\n// Check nested path\nif (arr()-&gt;has('users.active.jane', $data)) {\n    // Path exists\n}\n\n// Delete nested data\narr()-&gt;delete('users.active.john', $data);\n</code></pre>"},{"location":"array-utils/#wildcard-matching","title":"Wildcard Matching","text":"<pre><code>$data = [\n    'users' =&gt; [\n        'active' =&gt; [\n            'john' =&gt; ['age' =&gt; 25],\n            'jane' =&gt; ['age' =&gt; 30]\n        ],\n        'inactive' =&gt; [\n            'bob' =&gt; ['age' =&gt; 35]\n        ]\n    ]\n];\n\n// Get all ages using wildcard\n$ages = arr()-&gt;get('users.*.*.age', $data);\n// [25, 30, 35]\n\n// Get all active user ages\n$activeAges = arr()-&gt;get('users.active.*.age', $data);\n// [25, 30]\n</code></pre>"},{"location":"array-utils/#array-transformations","title":"Array Transformations","text":""},{"location":"array-utils/#building-hierarchical-trees","title":"Building Hierarchical Trees","text":"<pre><code>// Flat array of categories\n$categories = [\n    ['id' =&gt; 1, 'parent_id' =&gt; 0, 'name' =&gt; 'Electronics'],\n    ['id' =&gt; 2, 'parent_id' =&gt; 1, 'name' =&gt; 'Phones'],\n    ['id' =&gt; 3, 'parent_id' =&gt; 1, 'name' =&gt; 'Laptops'],\n    ['id' =&gt; 4, 'parent_id' =&gt; 2, 'name' =&gt; 'iPhone'],\n    ['id' =&gt; 5, 'parent_id' =&gt; 2, 'name' =&gt; 'Android'],\n];\n\n// Convert to hierarchical tree\n$tree = arr()-&gt;tree($categories);\n\n/* Result:\n[\n    [\n        'id' =&gt; 1,\n        'parent_id' =&gt; 0,\n        'name' =&gt; 'Electronics',\n        'children' =&gt; [\n            [\n                'id' =&gt; 2,\n                'parent_id' =&gt; 1,\n                'name' =&gt; 'Phones',\n                'children' =&gt; [\n                    ['id' =&gt; 4, 'parent_id' =&gt; 2, 'name' =&gt; 'iPhone'],\n                    ['id' =&gt; 5, 'parent_id' =&gt; 2, 'name' =&gt; 'Android']\n                ]\n            ],\n            ['id' =&gt; 3, 'parent_id' =&gt; 1, 'name' =&gt; 'Laptops']\n        ]\n    ]\n]\n*/\n</code></pre> <pre><code>// Custom key names\n$tree = arr()-&gt;tree($items, 0, 'category_id', 'parent_category_id');\n</code></pre>"},{"location":"array-utils/#array-transposition","title":"Array Transposition","text":"<pre><code>// Column-based data\n$data = [\n    'name' =&gt; ['John', 'Jane', 'Bob'],\n    'age' =&gt; [25, 30, 35],\n    'city' =&gt; ['New York', 'London', 'Paris']\n];\n\n// Convert to row-based data\n$rows = arr()-&gt;transpose($data);\n\n/* Result:\n[\n    ['name' =&gt; 'John', 'age' =&gt; 25, 'city' =&gt; 'New York'],\n    ['name' =&gt; 'Jane', 'age' =&gt; 30, 'city' =&gt; 'London'],\n    ['name' =&gt; 'Bob', 'age' =&gt; 35, 'city' =&gt; 'Paris']\n]\n*/\n\n// Transpose specific keys only\n$rows = arr()-&gt;transpose($data, ['name', 'age']);\n</code></pre>"},{"location":"asset-loading-utils/","title":"Asset Utilities","text":"<p>Lightpack\u2019s <code>Asset</code> utility provides a feature rich toolkit for managing, versioning, and rendering static assets (CSS, JS, images, fonts) in your PHP applications. It supports cache-busting, CDN integration, HTML tag generation, and Google Font management\u2014all with a clear, expressive API and robust test coverage.</p>"},{"location":"asset-loading-utils/#overview","title":"Overview","text":"<ul> <li>Asset URL generation with optional versioning for cache busting</li> <li>Manifest-based versioning for tracked asset directories</li> <li>CDN/base URL support via environment variables</li> <li>HTML helpers for CSS, JS, images, and ES modules</li> <li>Import map generation for modern JavaScript workflows</li> <li>Google Fonts downloader for local font hosting</li> <li>Strong test coverage for all major features</li> </ul>"},{"location":"asset-loading-utils/#common-challenges","title":"Common Challenges","text":"<p>Lightpack's asset loading facility tries to solve some of the most common challenges for which developers usually prefer frontend build tools usually in Node.js.</p>"},{"location":"asset-loading-utils/#1-basic-asset-loading","title":"1. Basic Asset Loading","text":"<p>Problem: Managing and loading different types of assets - CSS files - JavaScript files - Images - Fonts</p> <p>Pain Points: - Generating correct URLs - Maintaining proper paths - Handling different asset types - Serving with correct headers</p>"},{"location":"asset-loading-utils/#2-cache-busting","title":"2. Cache Busting","text":"<p>Problem: Browser caching of outdated assets - Files change but browsers serve cached versions - Need to force reload when files update - Cache invalidation strategies</p> <p>Pain Points: - When to invalidate cache - How to version assets - Maintaining cache headers - Balancing cache vs fresh content</p>"},{"location":"asset-loading-utils/#3-development-vs-production","title":"3. Development vs Production","text":"<p>Problem: Different needs for different environments - Development needs quick feedback - Production needs optimization - Different serving strategies</p> <p>Pain Points: - Fast development cycle - Production optimization - Environment-specific configs - Switching between environments</p>"},{"location":"asset-loading-utils/#4-asset-organization","title":"4. Asset Organization","text":"<p>Problem: Managing multiple assets efficiently - Multiple CSS files - Multiple JS files - Page-specific assets - Shared assets</p> <p>Pain Points: - Organizing assets logically - Managing dependencies - Loading order - Code splitting</p>"},{"location":"asset-loading-utils/#5-module-dependencies","title":"5. Module Dependencies","text":"<p>Problem: Managing JavaScript module dependencies - Files depending on other files - Loading order matters - Mix of local and CDN files</p> <p>Pain Points: - Dependency management - Module resolution - Avoiding Node.js - Browser compatibility</p>"},{"location":"asset-loading-utils/#6-performance","title":"6. Performance","text":"<p>Problem: Optimizing asset delivery - Multiple HTTP requests - Large file sizes - Slow loading times - Browser limitations</p> <p>Pain Points: - Reducing requests - File size optimization - Loading strategies - HTTP/2 optimization</p> <p>Read further to gain an understanding of how Asset utility solves above challenges and reduces the need to depend on external build tools.</p>"},{"location":"asset-loading-utils/#asset-url-generation-versioning","title":"Asset URL Generation &amp; Versioning","text":"<pre><code>use Lightpack\\Utils\\Asset;\n\n$asset = new Asset(); // Defaults to assets in public directory\n\n// Asset url for public/css/app.css file\n$url = $asset-&gt;url('css/app.css'); \n</code></pre> <ul> <li>By default, URLs include a version query string (<code>?v=...</code>) for cache busting.</li> <li>Version is read from a manifest (<code>assets.json</code>) or falls back to file modification time.</li> </ul> <p>Disable versioning if needed:</p> <pre><code>$url = $asset-&gt;url('css/app.css', false); // /css/app.css\n</code></pre> <p>CDN Support: - Set <code>ASSET_URL</code> or <code>APP_URL</code> in your environment to prefix all asset URLs with a CDN or base URL.</p> <pre><code>$asset-&gt;url('css/app.css'); // https://cdn.example.com/css/app.css?v=...\n</code></pre>"},{"location":"asset-loading-utils/#html-helpers","title":"HTML Helpers","text":""},{"location":"asset-loading-utils/#css-js","title":"CSS &amp; JS","text":"<pre><code>// Render CSS and JS tags\n$html = $asset-&gt;load(['css/app.css', 'js/app.js']);\n// &lt;link rel='stylesheet' ...&gt;&lt;script src='...' defer&gt;&lt;/script&gt;\n</code></pre> <p>JS files use <code>defer</code> attribute by default; pass <code>async</code> or null for other modes. Choose one based on the script's purpose: - async: For independent scripts (analytics, ads) - defer: For scripts that need DOM or depend on other scripts</p> <p>If neither defer nor async is used, the script is treated as \"render-blocking\" which means:</p> <ul> <li>Blocking Behavior</li> <li>HTML parsing stops</li> <li>Script is downloaded</li> <li>Script executes immediately</li> <li>Then HTML parsing continues</li> </ul> <p>This is useful when you have scripts that:</p> <ul> <li>Must execute before anything else</li> <li>Need to be available immediately</li> <li>Are critical for initial page functionality</li> </ul>"},{"location":"asset-loading-utils/#images","title":"Images","text":"<pre><code>// Render an &lt;img&gt; tag with attributes\n$html = $asset-&gt;img('img/logo.png', ['alt' =&gt; 'Logo', 'width' =&gt; 200]);\n// &lt;img src='/img/logo.png?v=...' alt='Logo' width='200'&gt;\n</code></pre>"},{"location":"asset-loading-utils/#es-modules","title":"ES Modules","text":"<pre><code>// Render &lt;script type=\"module\"&gt; for JS modules\n$html = $asset-&gt;module('js/app.js');\n$html = $asset-&gt;module(['js/app.js' =&gt; null, 'js/utils.js' =&gt; 'async']);\n</code></pre>"},{"location":"asset-loading-utils/#import-maps","title":"Import Maps","text":"<pre><code>// Generate an import map for ES modules\n$html = $asset-&gt;importMap([\n    'uikit' =&gt; 'js/uikit.js',\n    'app' =&gt; 'js/app.js',\n]);\n// &lt;script type='importmap'&gt;...&lt;/script&gt;\n</code></pre>"},{"location":"asset-loading-utils/#google-fonts-downloader","title":"Google Fonts Downloader","text":"<pre><code>// Download and locally host a Google Font\n$asset-&gt;googleFont('Roboto', [400, 700]);\n// Downloads font files, generates local CSS, and updates manifest\n</code></pre> <ul> <li>Fonts are saved to <code>/fonts</code>, CSS to <code>/css/fonts.css</code>.</li> <li>Only the latin subset is downloaded for efficiency.</li> <li>Throws on download or file errors.</li> </ul>"},{"location":"asset-loading-utils/#version-manifest-management","title":"Version Manifest Management","text":"<ul> <li>The utility tracks asset versions for files in <code>css/</code>, <code>js/</code>, <code>fonts/</code>, and <code>img/</code> directories by default.</li> <li>Use <code>generateVersions()</code> to scan and update the <code>assets.json</code> manifest:</li> <li>Only files in tracked directories are included in the manifest.</li> </ul> <pre><code>$asset-&gt;generateVersions();\n</code></pre>"},{"location":"asset-loading-utils/#asset-management-best-practices","title":"Asset Management Best Practices","text":"<ul> <li>Use versioned URLs for all assets to ensure users always get the latest files after deploys.</li> <li>Use a CDN for production by setting <code>ASSET_URL</code>.</li> <li>Regenerate the manifest (<code>generateVersions()</code>) after deploying new or updated assets.</li> <li>Organize assets in tracked directories for automatic versioning.</li> <li>Use the HTML helpers to keep your templates clean and DRY.</li> </ul>"},{"location":"audit/","title":"Lightpack Audit Facility","text":"<p>The Lightpack Audit module provides a simple, explicit, and powerful way to track and record changes, actions, and events in your application.</p> <p>Auditing is essential for security, compliance, debugging, and accountability. With Lightpack's audit facility, you can log who did what, when, and where\u2014across your entire app.</p>"},{"location":"audit/#features","title":"Features","text":"<ul> <li>Explicit API: Log audit events anywhere in your code\u2014no hidden hooks.</li> <li>Configurable: Choose what to audit and when to log.</li> <li>Flexible Storage: Audit logs are stored in a dedicated <code>audit_logs</code> table.</li> <li>Rich Context: Store user, action, before/after values, URL, IP, and more.</li> <li>Easy Querying: Use the <code>AuditLog</code> model to fetch and analyze audit data.</li> </ul>"},{"location":"audit/#practical-use-cases-for-audit-logging","title":"Practical Use Cases for Audit Logging","text":"<p>Lightpack's audit facility is ideal for a wide range of real-world scenarios, including:</p> <ol> <li>User Account Changes:</li> <li>Track profile updates, password changes, email changes, and other user modifications.</li> <li>Role &amp; Permission Management:</li> <li>Audit who assigned or removed roles/permissions to users for security and compliance.</li> <li>Sensitive Data Access:</li> <li>Log when users view, export, or download sensitive data (e.g., financial, medical records).</li> <li>CRUD Operations on Core Entities:</li> <li>Record creation, update, and deletion of business-critical records (posts, orders, invoices, etc.).</li> <li>System-Generated Events:</li> <li>Capture background jobs, scheduled tasks, or automated cleanups (e.g., token expiry, cron jobs).</li> <li>Security Events:</li> <li>Log logins, failed logins, password resets, and suspicious activity for audit and investigation.</li> <li>Multi-Entity Actions:</li> <li>Track cascading deletes/updates (e.g., deleting a user and all their posts or permissions).</li> <li>Regulatory Compliance:</li> <li>Provide a full audit trail for GDPR, HIPAA, SOX, or other compliance requirements.</li> <li>Admin Actions:</li> <li>Monitor all admin panel actions for accountability and transparency.</li> <li>API Usage:<ul> <li>Log API calls that mutate data, including which user or system performed them.</li> </ul> </li> </ol>"},{"location":"audit/#migration","title":"Migration","text":"<p>Run this command to generate a migration file:</p> <pre><code>php console create:migration create_table_audit_logs\n</code></pre> <p>Use the following code for the up() and down() methods:</p> <pre><code>public function up(): void\n{\n    $this-&gt;create('audit_logs', function (Table $table) {\n        $table-&gt;id();\n        $table-&gt;column('user_id')-&gt;type('bigint')-&gt;nullable();\n        $table-&gt;varchar('action', 50);\n        $table-&gt;varchar('audit_type', 150);\n        $table-&gt;column('audit_id')-&gt;type('bigint')-&gt;nullable();\n        $table-&gt;column('old_values')-&gt;type('text')-&gt;nullable();\n        $table-&gt;column('new_values')-&gt;type('text')-&gt;nullable();\n        $table-&gt;column('message')-&gt;type('text')-&gt;nullable();\n        $table-&gt;varchar('url', 255)-&gt;nullable();\n        $table-&gt;varchar('ip_address', 45)-&gt;nullable();\n        $table-&gt;varchar('user_agent', 255)-&gt;nullable();\n        $table-&gt;timestamps();\n    });\n}\n\npublic function down(): void\n{\n    $this-&gt;drop('audit_logs');\n}\n</code></pre>"},{"location":"audit/#schema","title":"Schema","text":"<p>The <code>audit_logs</code> table has the following fields:</p> Column Type Description id bigint Primary key user_id bigint Acting user ID (nullable) action varchar Action performed audit_type varchar Class/model/table audit_id bigint Affected record ID (nullable) old_values text JSON-encoded old values (nullable) new_values text JSON-encoded new values (nullable) url varchar URL of the request (nullable) ip_address varchar IP address (nullable) user_agent varchar User agent (nullable) created_at datetime Timestamp updated_at datetime Timestamp"},{"location":"audit/#usage","title":"Usage","text":"<p>The module consists of: - <code>AuditLog.php</code> (the model representing audit_logs table) - <code>Audit.php</code> (the audit service class exposing auditing capabilities) - <code>AuditTrait.php</code> (make any model auditable using this trait)</p>"},{"location":"audit/#logging-an-audit-event","title":"Logging an Audit Event","text":"<p>Call the static <code>log</code> method from anywhere (controller, service, etc.):</p> <pre><code>Audit::log([\n    'user_id'        =&gt; $userId,              // (int|null) ID of the acting user\n    'action'         =&gt; 'update',             // (string) Action performed\n    'audit_type' =&gt; 'User',          // (string) table\n    'audit_id'   =&gt; $user-&gt;id,            // (int|null) ID of affected record\n    'old_values'     =&gt; $old,                 // (array|null) Before values\n    'new_values'     =&gt; $new,                 // (array|null) After values\n    'url'            =&gt; $request-&gt;url(),      // (string|null) Request URL\n    'ip_address'     =&gt; $request-&gt;ip(),       // (string|null) IP address\n    'user_agent'     =&gt; $request-&gt;userAgent(),// (string|null) User agent\n    'message'        =&gt; 'User profile updated', // (string|null) Optional message\n]);\n</code></pre> <p>All fields are optional except <code>action</code> and <code>audit_type</code>.</p>"},{"location":"audit/#logging-system-generated-events-and-messages","title":"Logging System-Generated Events and Messages","text":"<p>You can log system-generated events (with no user) or add custom messages to any audit event using the <code>message</code> field. This is useful for tracking background jobs, cron tasks, or internal system actions.</p>"},{"location":"audit/#example-system-generated-event","title":"Example: System-Generated Event","text":"<pre><code>Audit::log([\n    'action'     =&gt; 'system_cleanup',\n    'audit_type' =&gt; 'Token',\n    'audit_id'   =&gt; $tokenId,\n    'old_values' =&gt; $tokenData,\n    'user_agent' =&gt; 'system/cronjob',\n    'message'    =&gt; 'Expired token removed by scheduled job',\n]);\n</code></pre>"},{"location":"audit/#example-user-event-with-a-message","title":"Example: User Event with a Message","text":"<pre><code>Audit::log([\n    'user_id'    =&gt; $userId,\n    'action'     =&gt; 'login',\n    'audit_type' =&gt; 'User',\n    'audit_id'   =&gt; $userId,\n    'ip_address' =&gt; $request-&gt;ip(),\n    'user_agent' =&gt; $request-&gt;userAgent(),\n    'message'    =&gt; 'User logged in successfully from web portal',\n]);\n</code></pre> <p>The <code>message</code> field is a free-form text column for any extra context, system notes, or explanations you want to attach to an audit entry.</p>"},{"location":"audit/#audting-models","title":"Audting Models","text":"<p>Make any model audit capable using <code>AuditTriat</code> on it. This trait exposes <code>audit()</code> method on the model. You do not need to pass <code>audit_id</code> and <code>audit_type</code> values because <code>audit()</code> method automatically sets:</p> <ul> <li><code>audit_id</code> with model id,</li> <li><code>audit_type</code> with model table name.</li> </ul> <pre><code>class User extends Model\n{\n    use AuditTrait;\n}\n</code></pre> <pre><code>$user = new User(23);\n\n$user-&gt;audit([\n    'action'     =&gt; 'update',\n    'new_values' =&gt; $user-&gt;toArray(),\n    'message'    =&gt; 'User details updated.',\n]);\n</code></pre>"},{"location":"audit/#logging-multi-entity-actions","title":"Logging Multi-Entity Actions","text":"<p>If a single action (such as deleting a role) causes changes in multiple tables or entities (e.g., roles and their attached permissions), log a separate audit entry for each impacted entity. This ensures your audit trail is complete and granular.</p>"},{"location":"audit/#example-cascading-delete-role-and-permissions","title":"Example: Cascading Delete (Role and Permissions)","text":"<p>Suppose you delete a role and it cascades to permissions:</p> <pre><code>// Log the role deletion\nAudit::log([\n    'user_id'    =&gt; $adminId,\n    'action'     =&gt; 'delete',\n    'audit_type' =&gt; 'Role',\n    'audit_id'   =&gt; $role-&gt;id,\n    'old_values' =&gt; $role-&gt;toArray(),\n    'message'    =&gt; 'Role deleted by admin',\n]);\n\n// Log each affected permission\nforeach ($permissions as $permission) {\n    Audit::log([\n        'user_id'    =&gt; $adminId,\n        'action'     =&gt; 'cascade_delete',\n        'audit_type' =&gt; 'Permission',\n        'audit_id'   =&gt; $permission-&gt;id,\n        'old_values' =&gt; $permission-&gt;toArray(),\n        'message'    =&gt; 'Permission unlinked/deleted due to role deletion',\n    ]);\n}\n</code></pre> <p>Each audit entry's <code>audit_type</code> and <code>audit_id</code> point to the precise entity affected, making querying and reporting straightforward.</p>"},{"location":"audit/#auditlog-helpers-for-building-audit-views","title":"AuditLog Helpers for Building Audit Views","text":"<p>The audit facility provides several helpers to make building audit log screens and APIs easier:</p>"},{"location":"audit/#1-resolving-user-information-user","title":"1. Resolving User Information: <code>user()</code>","text":"<p>The <code>AuditLog</code> model provides a <code>user()</code> relation that resolves the <code>user_id</code> field to an <code>AuthUser</code> instance.</p> <pre><code>$log = AuditLog::query()-&gt;where('user_id', 5)-&gt;one();\necho $log-&gt;user-&gt;name; // Outputs the user's name\n</code></pre> <p>If the action was performed by the system (no user), <code>$log-&gt;user</code> will be <code>null</code>.</p>"},{"location":"audit/#2-computing-changes","title":"2. Computing Changes","text":"<p>You can compute the difference between <code>old_values</code> and <code>new_values</code> using the <code>diff()</code> method:</p> <pre><code>$log = AuditLog::query()-&gt;where('id', 123)-&gt;one();\n$diff = $log-&gt;diff();\n// $diff['added'] contains fields added or changed\n// $diff['removed'] contains fields removed or changed\n</code></pre>"},{"location":"audit/#example","title":"Example","text":"<p>Suppose:</p> <pre><code>$log-&gt;old_values = ['name' =&gt; 'Alice', 'email' =&gt; 'alice@old.com', 'status' =&gt; 'active'];\n\n$log-&gt;new_values = ['name' =&gt; 'Alice B.', 'email' =&gt; 'alice@new.com', 'role' =&gt; 'admin'];\n\n$diff = $log-&gt;diff();\n</code></pre> <p>Result:</p> <pre><code>[\n    'added' =&gt; [\n        'name' =&gt; 'Alice B.',         // changed value\n        'email' =&gt; 'alice@new.com',   // changed value\n        'role' =&gt; 'admin',            // new field\n    ],\n    'removed' =&gt; [\n        'name' =&gt; 'Alice',                // old value\n        'email' =&gt; 'alice@old.com',       // old value\n        'status' =&gt; 'active',             // removed field\n    ]\n]\n</code></pre> <ul> <li>Fields present in both but changed appear in both <code>added</code> (new value) and <code>removed</code> (old value).</li> <li>Fields only in <code>old_values</code> are in <code>removed</code>.</li> <li>Fields only in <code>new_values</code> are in <code>added</code>.</li> </ul>"},{"location":"audit/#3-query-scopes-filters","title":"3. Query Scopes &amp; Filters","text":"<p>You can filter audit logs by user, action, or audit type using the <code>filters()</code> method:</p> <pre><code>// By user\n$logs = AuditLog::filters(['user' =&gt; 5])-&gt;all();\n\n// By action\n$logs = AuditLog::filters(['action' =&gt; 'update'])-&gt;all();\n\n// By audit type\n$logs = AuditLog::filters(['auditType' =&gt; 'User'])-&gt;all();\n\n// Combine filters\n$logs = AuditLog::filters([\n    'user' =&gt; 5,\n    'action' =&gt; 'delete',\n    'auditType' =&gt; 'Post',\n])-&gt;all();\n</code></pre> <p>These helpers make it much easier to build rich, user-friendly audit log screens and APIs.</p>"},{"location":"audit/#content-versioning-with-audit","title":"Content Versioning with Audit","text":""},{"location":"audit/#what-is-content-versioning","title":"What is Content Versioning?","text":"<p>Content versioning is the practice of tracking, storing, and (optionally) restoring previous states of your application's data. This is essential for features like undo/redo, rollback, historical inspection, and regulatory compliance. Versioning is especially valuable for business-critical records (posts, orders, invoices, etc.) where you may need to see or revert changes over time.</p>"},{"location":"audit/#why-content-versioning","title":"Why Content Versioning?","text":"<ul> <li>Accountability: Know exactly what changed, when, and by whom.</li> <li>Recovery: Restore previous versions after mistakes or unwanted edits.</li> <li>Auditability: Demonstrate compliance with regulations by showing historical changes.</li> <li>Transparency: Enable users/admins to review or compare past versions.</li> </ul>"},{"location":"audit/#how-to-achieve-content-versioning-in-lightpack","title":"How to Achieve Content Versioning in Lightpack","text":"<p>Lightpack's Audit module already provides the foundation for content versioning, thanks to its ability to log both <code>old_values</code> and <code>new_values</code> for every change. With minimal extra code, you can leverage these audit logs to implement versioning for any model or entity.</p>"},{"location":"audit/#basic-versioning-pattern","title":"Basic Versioning Pattern","text":"<ol> <li>Log Changes: Use <code>Audit::log()</code> to record every create, update, or delete, including full <code>old_values</code> and <code>new_values</code>.</li> <li>Fetch Versions: Use the <code>AuditLog</code> model to retrieve all audit entries for a given record (by <code>audit_type</code> and <code>audit_id</code>).</li> <li>Restore a Version: To \"roll back\" to a previous state, fetch the desired audit log and set your model's attributes to the <code>old_values</code> (for undo) or <code>new_values</code> (for redo), then save.</li> </ol>"},{"location":"audit/#example-restoring-a-previous-version","title":"Example: Restoring a Previous Version","text":"<pre><code>// Fetch the audit log entry you want to restore\n$auditLog = AuditLog::query()\n    -&gt;where('audit_type', 'User')\n    -&gt;where('audit_id', $user-&gt;id)\n    -&gt;where('id', $auditLogId)\n    -&gt;one();\n\n// Restore the old values\n$user-&gt;setAttributes($auditLog-&gt;old_values);\n$user-&gt;save();\n</code></pre>"},{"location":"auth-configuration/","title":"Configuration","text":"<p>Lightpack ships with default configuration for authentication in <code>config/auth.php</code> file.</p> <p>You can check this file and find the <code>default</code> key which is configured for default authentication provided by the framework itself.</p> <pre><code>'default' =&gt; [\n    'identifier' =&gt; DefaultIdentifier::class,\n    'login.url' =&gt; 'dashboard/login',\n    'logout.url' =&gt; 'dashboard/logout',\n    'login.redirect' =&gt; 'dashboard/home',\n    'logout.redirect' =&gt; 'dashboard/login',\n    'fields.id' =&gt; 'id',\n    'fields.username' =&gt; 'email',\n    'fields.password' =&gt; 'password',\n    'fields.remember_token' =&gt; 'remember_token',\n    'fields.last_login_at' =&gt; 'last_login_at',\n    'flash_error' =&gt; 'Invalid account credentials.',\n],\n</code></pre> <p>Here is a brief explanation for those configurations:</p>"},{"location":"auth-configuration/#identifier","title":"identifier","text":"<p>This key is the class name that represents a user identifier. This class implements <code>Lightpack\\Auth\\Identifier</code> interfaceand acts as a user data service provider.  You can also implement your own custom auth identifers.</p>"},{"location":"auth-configuration/#loginurl","title":"login.url","text":"<p>This key represents the login page route for session-cookie based authentication. </p>"},{"location":"auth-configuration/#logouturl","title":"logout.url","text":"<p>This key represents the logout route for session-cookie based authentication. </p>"},{"location":"auth-configuration/#loginredirect","title":"login.redirect","text":"<p>This is the route where the client is redirected post successful login.</p>"},{"location":"auth-configuration/#logoutredirect","title":"logout.redirect","text":"<p>This is the page where the client is redirected post successful logout.</p>"},{"location":"auth-configuration/#fieldsid","title":"fields.id","text":"<p>This key is the name for user id which by default, it is set to <code>id</code>.</p>"},{"location":"auth-configuration/#fieldsusername","title":"fields.username","text":"<p>This key is the form-field name for username input which by default, it is set to <code>email</code>.</p>"},{"location":"auth-configuration/#fieldspassword","title":"fields.password","text":"<p>This key is the form-field name for password input.</p>"},{"location":"auth-configuration/#fieldsremember_token","title":"fields.remember_token","text":"<p>This key is the name of the column in the users table that stores the remember-me token.</p>"},{"location":"auth-configuration/#flash_error","title":"flash_error","text":"<p>This key contains the default error message for failed login attempts.</p>"},{"location":"auth-filters/","title":"Auth Filters","text":"<p>You might want to protect a route or a group of routes defined in your application. These routes should only execute for successfully authenticated users.</p> <p>Lightpack ships with <code>auth</code> filter for web and api routes. You can use this filter to authenticate per route definition or on a group of routes.</p>"},{"location":"auth-filters/#web-filter","title":"Web Filter","text":"<p>Used as <code>auth:web</code> alias, this filter will check if the current session has been authenticated else will redirect to login page.</p> <p>For example:</p> <pre><code>route()-&gt;group(['filters' =&gt; ['auth:web']], function() {\n    // protected routes list here\n});\n</code></pre> <p>Use <code>auth:web</code> filter for session-cookie based routes authentication.</p>"},{"location":"auth-filters/#api-filter","title":"Api Filter","text":"<p>Used as <code>auth:api</code> alias, this filter should be used to protect API routes. This filter will look for Bearer token in authorization header and attempt to authenticate the validity of the token.</p> <p>If authentication fails, it will abort the request and return a <code>401</code> unauthorized JSON response. </p> <p>For example:</p> <pre><code>route()-&gt;group(['filters' =&gt; 'auth:api'], function() {\n    // protected routes list here\n});\n</code></pre>"},{"location":"auth-filters/#guest-filter","title":"Guest Filter","text":"<p>The <code>guest</code> filter ensures that only unauthenticated users (guests) can access certain routes. If an authenticated user tries to access a route protected by this filter, they will be redirected to the login landing page (or wherever your <code>auth()-&gt;redirectLogin()</code> is configured to go).</p> <p>Use this filter for routes like login, registration, or password reset\u2014pages that should not be accessible to already logged-in users.</p> <p>For example:</p> <pre><code>route()-&gt;group(['filters' =&gt; 'guest'], function() {\n    // routes only for guests (not logged-in users)\n});\n</code></pre>"},{"location":"authentication/","title":"Authentication","text":"<p>Session-cookie or token based authentication made easy.</p> <p>Lightpack supports authentication in a very friendly manner. It exposes a couple of authentication methods using <code>auth()</code> function.</p> <pre><code>// Returns logged in user id\nauth()-&gt;id();\n\n// Returns logged in user \nauth()-&gt;user();\n\n// Returns true if user is logged in\nauth()-&gt;isLoggedIn();\n\n// Returns true if a user is not logged in\nauth()-&gt;isGuest();\n\n// Attempt login and start session\nauth()-&gt;login();\n\n// Login as a specific user without credentials\nauth()-&gt;loginAs();\n\n// Attempt login once without starting session\nauth()-&gt;attempt();\n\n// Logout the user \nauth()-&gt;logout();\n\n// Returns auth token when logged in via api\nauth()-&gt;token();\n\n// Attempts to automatically login based on remember me cookie\nauth()-&gt;recall();\n\n// Verify incoming request bearer token\nauth()-&gt;viaToken();\n\n// Redirect URL post successful login\nauth()-&gt;redirectLogin();\n\n// Redirect URL post logout\nauth()-&gt;redirectLogout();\n\n// Redirect to login URL\nauth()-&gt;redirectLoginUrl();\n</code></pre>"},{"location":"authentication/#logging-in","title":"Logging In","text":""},{"location":"authentication/#web-based-login","title":"Web Based Login","text":"<p>To login a user via session-cookie mechanism, call the <code>login()</code> method on auth object.</p> <pre><code>auth()-&gt;login();\n</code></pre> <p>Behind the scenes, this method performs following actions:</p> <ul> <li>Check if <code>email/password</code> credentials match in users table.</li> <li>On success, start a new session and redirect to post-login url.</li> <li>On failure, redirect to the login page again with error message in session.</li> </ul>"},{"location":"authentication/#api-based-login","title":"API Based Login","text":"<p>To authenticate a user without maintaining session-cookie, use <code>attempt()</code> method.</p> <pre><code>auth()-&gt;attempt();\n</code></pre> <p>This is useful when authenticating user via API requests based on username/password credentials. Behind the scenes, this method performs following actions:</p> <ul> <li>Check if <code>email/password</code> credentials match in users table.</li> <li>On success, returns an API token in JSON response.</li> <li>On failure, returns a failure response as JSON.</li> </ul>"},{"location":"authentication/#bearer-token","title":"Bearer Token","text":"<p>To authenticate an API request containing Bearer token in authorization header, use:</p> <pre><code>auth()-&gt;viaToken();\n</code></pre>"},{"location":"authentication/#logging-out","title":"Logging Out","text":"<p>To logout, simply call <code>logout()</code> method.</p> <pre><code>auth()-&gt;logout();\n</code></pre>"},{"location":"authentication/#authenticated-user","title":"Authenticated User","text":"<p>To access currently authenticated user's id, call <code>id()</code> method.</p> <pre><code>auth()-&gt;id();\n</code></pre> <p>To access currently authenticated user, call <code>user()</code> method.</p> <pre><code>auth()-&gt;user();\n</code></pre> <p>To access currently authenticated user's api token , call <code>token()</code> method.</p> <pre><code>auth()-&gt;token();\n</code></pre> <p>This method will return <code>null</code> when logged-in via session-cookie mechanism. So use this method only when logged-in with <code>attempt()</code> method for API based login requests.</p>"},{"location":"authentication/#remember-me","title":"Remember Me","text":"<p>If the user checks the remember functionality while logging in, you can use <code>recall()</code> method.</p> <pre><code>auth()-&gt;recall();\n</code></pre> <p>Behind the scenes, this method performs the following actions:</p> <ul> <li>Checks if the user is already logged in via session.</li> <li>If yes, redirects to the post-login URL.</li> <li>If no, checks if a <code>remember_me</code> cookie is present and valid.</li> <li>If the cookie is valid, the user is automatically logged in (a new session is started) and redirected to the post-login URL.</li> <li>If the cookie is missing or invalid, the user is redirected to the login page.</li> </ul>"},{"location":"cable/","title":"Cable: Real-Time Communication for Lightpack","text":"<p>Cable is Lightpack's elegant solution for real-time communication between your server and clients. With a Socket.io-like API familiarity and a focus on simplicity and efficiency, Cable provides powerful real-time features without external dependencies.</p> <p>You can build live dashboards, notifications, presence channels, chat messages and more with minimal friction. It uses an efficient <code>HTTP Polling</code> mechanism to provide real-time communication capabilities:</p> <ul> <li>Socket.io-like API: Familiar, event-based programming model</li> <li>Channel-based messaging: Target specific users or groups</li> <li>Presence channels: Track which users are online</li> <li>DOM updates: Directly update page elements</li> <li>Driver architecture: Support for database and Redis backends</li> </ul>"},{"location":"cable/#cable-event-flow-lifecycle","title":"Cable Event Flow (Lifecycle)","text":"<pre><code>\u2192 PHP emits event \n\u2192 Driver stores event \n\u2192 Browser polls \n\u2192 New events delivered \n\u2192 JS handler runs\n</code></pre>"},{"location":"cable/#core-concepts","title":"Core Concepts","text":"<ul> <li>Channel: A logical stream (e.g., <code>chat:42</code>, <code>dashboard</code>, <code>presence:room1</code>).</li> <li>Event: A named action (e.g., <code>message:new</code>, <code>dom-update</code>, <code>presence:update</code>).</li> <li>Payload: Arbitrary data sent with each event.</li> <li>Driver: Backend for message storage/delivery (Database, Redis, custom).</li> <li>Presence: Tracks online users in a channel.</li> <li>Batching: Efficiently emits many events at once.</li> </ul>"},{"location":"cable/#quick-start","title":"Quick Start","text":"<p>Lightpack already ships with few route definitions for making it easy to work with message polling or presence channels. You can look for <code>routes/cable.php</code> file for more details. Following sections gives you a quick overview to get started with realtime features.</p>"},{"location":"cable/#1-configure-cable","title":"1. Configure Cable","text":"<p>You can view available configurations in <code>config/cable.php</code> file.</p> <p>Choose a driver:    - Database (default, simple, persistent storage)    - Redis (high-performance, temporary storage)</p>"},{"location":"cable/#2-run-migration","title":"2. Run Migration","text":"<p>Run the following migration command if using MySQL as realtime backend:</p> <pre><code>php console create:migration create_table_cable_system\n</code></pre> <p>Update following in your <code>up()/down()</code> migration methods:</p> <pre><code>public function up(): void\n{\n    // table: cable_messages\n    $this-&gt;create('cable_messages', function(Table $table) {\n        $table-&gt;id();\n        $table-&gt;varchar('channel', 255);\n        $table-&gt;varchar('event', 255);\n        $table-&gt;column('payload')-&gt;type('json')-&gt;nullable();\n        $table-&gt;datetime('created_at')-&gt;nullable();\n\n        $table-&gt;index('channel');\n    }); \n\n    // table: cable_presence\n    $this-&gt;create('cable_presence', function(Table $table) {\n        $table-&gt;id();\n        $table-&gt;varchar('channel', 255);\n        $table-&gt;column('user_id')-&gt;type('bigint')-&gt;attribute('unsigned');\n        $table-&gt;datetime('last_seen');\n\n        $table-&gt;foreignKey('user_id')-&gt;references('id')-&gt;on('users')-&gt;cascadeOnDelete()-&gt;cascadeOnUpdate();\n\n        $table-&gt;unique(['channel', 'user_id']);\n        $table-&gt;index('channel');\n        $table-&gt;index('last_seen');\n    });\n}\n\npublic function down(): void\n{\n    $this-&gt;drop('cable_messages');\n    $this-&gt;drop('cable_presence');\n}\n</code></pre>"},{"location":"cable/#3-define-route","title":"3. Define Route","text":"<pre><code>route()-&gt;post('/realtime/send-message', RealtimeController::class, 'triggerMessage');\n</code></pre> <p>This route will forward the <code>POST /realtime/send-message</code> request to RealtimeController's triggerMessage() method.</p>"},{"location":"cable/#4-emit-events","title":"4. Emit Events","text":"<p>In your controller's method, emit an event <code>message:new</code> to the <code>notifications</code> channel with required payload:</p> <pre><code>class RealtimeController\n{\n    public function triggerMessage(Cable $cable)\n    {\n        $cable-&gt;to('notifications')-&gt;emit('message:new', [\n            'text' =&gt; request()-&gt;input('message'),\n        ]);\n\n        return response()-&gt;json(['success' =&gt; true]);\n    }\n}\n</code></pre>"},{"location":"cable/#5-receive-events","title":"5. Receive Events","text":"<p>In your frontend, include the <code>cable.js</code> script file:</p> <pre><code>&lt;?= asset()-&gt;load('js/cable.js') ?&gt;\n</code></pre> <p>Initialize <code>cable</code> client and subscribe to <code>notifications</code> channel events:</p> <pre><code>// Connect to Cable\nconst socket = cable.connect();\n\n// Subscribe to `message:new` event on notifications channel \nsocket\n    .subscribe('notifications')\n    .on('message:new', function(data) {\n        console.log('New message:', data.text);\n    });\n</code></pre>"},{"location":"cable/#channel-based-communication","title":"Channel-Based Communication","text":"<p>Channels allow you to organize your real-time communication. Your application emits events on a channel, whereas your frontend client subscribes to events on a channel.</p>"},{"location":"cable/#emitting-events","title":"Emitting Events","text":"<pre><code>// Send to a specific user\n$cable-&gt;to(\"user.{$userId}\")-&gt;emit('private-message', [\n    'text' =&gt; 'This is a private message'\n]);\n</code></pre> <pre><code>// Send to a group\n$cable-&gt;to('admin-notifications')-&gt;emit('system-alert', [\n    'level' =&gt; 'warning',\n    'message' =&gt; 'Disk space is low'\n]);\n</code></pre> <pre><code>// Broadcast to everyone\n$cable-&gt;to('broadcasts.all')-&gt;emit('announcement', [\n    'message' =&gt; 'Site maintenance in 10 minutes'\n]);\n</code></pre>"},{"location":"cable/#subscribing-to-events","title":"Subscribing to Events","text":"<p>Your frontend client can subscribe to emitted events without requiring to manually poll for new messages:</p> <pre><code>const subscription = socket.subscribe('another-channel');\n\nsubscription.on('event-one', function(data) {\n    console.log('Event one:', data);\n});\n\nsubscription.on('event-two', function(data) {\n    console.log('Event two:', data);\n});\n</code></pre>"},{"location":"cable/#custom-configurations","title":"Custom Configurations","text":"<p>You can customize following option when initializing a cable connection.</p> <pre><code>const socket = cable.connect(\n    endpoint: '/cable/poll',\n    pollInterval: 3000,\n    reconnectInterval: 5000,\n    maxReconnectAttempts: 5\n)\n</code></pre>"},{"location":"cable/#dom-updates","title":"DOM Updates","text":"<p>Cable can directly update DOM elements without writing custom JavaScript:</p> <pre><code>// Update a specific element by selector\n$cable-&gt;to('dashboard')-&gt;update(\n    '#user-count', \n    \"&lt;strong&gt;{$userCount}&lt;/strong&gt; users online\"\n);\n</code></pre> <pre><code>// Update multiple elements with the same selector\n$cable-&gt;to('dashboard')-&gt;update(\n    '.status-indicator', \n    '&lt;span class=\"online\"&gt;&lt;/span&gt;'\n);\n</code></pre> <p>On the client-side, this is handled automatically - no additional code needed!</p>"},{"location":"cable/#cable-api-reference","title":"Cable API Reference","text":"<p><code>to(string $channel): self</code></p> <p>Targets a specific channel for subsequent events.</p> <pre><code>// Targeting a chat channel\n$chat = $cable-&gt;to('chat:42');\n</code></pre> <p><code>emit(string $event, array $payload = [])</code></p> <p>Sends an event (with payload) to the current channel.</p> <pre><code>// Emitting a new chat message\n$cable-&gt;to('chat:42')-&gt;emit('message:new', [\n    'user' =&gt; 'alice',\n    'text' =&gt; 'Hello, world!'\n]);\n</code></pre> <p><code>update(string $selector, string $html)</code></p> <p>Emits a <code>dom-update</code> event, allowing you to update parts of the UI in real time.</p> <pre><code>// Live update a status element on all dashboards\n$cable-&gt;to('dashboard')-&gt;update('#status', '&lt;span&gt;Online&lt;/span&gt;');\n</code></pre> <p><code>getMessages(?string $channel = null, ?int $lastId = null): array</code></p> <p>Retrieves new messages for a channel since a given message ID. Used by polling clients (normally not called directly).</p> <pre><code>// Fetch new messages for chat:42 since message ID 100\n$messages = $cable-&gt;getMessages('chat:42', 100);\nforeach ($messages as $msg) {\n    echo $msg-&gt;event . ': ' . json_encode($msg-&gt;payload);\n}\n</code></pre> <p><code>cleanup(int $olderThanSeconds = 86400)</code></p> <p>Deletes old messages from the backend (maintenance/housekeeping).</p> <pre><code>// Remove messages older than 1 hour\n$cable-&gt;cleanup(3600);\n</code></pre> <p>You can run a schedule to routinely cleanup old messages.</p>"},{"location":"cable/#presence-channels","title":"Presence Channels","text":"<p>Presence channels allow you to easily track which users are online in real-time.</p> <p>Note: You must define the following meta tag inside  tag. This is automatically used by the <code>cable.js</code> to pass CSRF token in request header for presence endpoints. <pre><code>&lt;meta name=\"csrf-token\" content=\"&lt;?= csrf_token() ?&gt;\"&gt;\n</code></pre> <p>Initialize the channel presence</p> <pre><code>// Define channel name\nconst channel = 'presence-room';\n\n// Initialize Cable\nconst socket = cable.connect();\n\n// Initialize presence channel\nconst presence = socket.presence(channel, userId);\n</code></pre> <p>Now you can utilize the presence channel capabilities as documented below:</p>"},{"location":"cable/#join-the-presence-channel","title":"Join the presence channel","text":"<pre><code>presence.join()\n    .then(() =&gt; {\n        console.log('Joined presence channel');\n\n        // Start heartbeat to maintain presence\n        presence.startHeartbeat();\n    });\n</code></pre>"},{"location":"cable/#leave-presence-channel","title":"Leave presence channel","text":"<pre><code>presence.stopHeartbeat();\npresence.leave()\n    .then(() =&gt; {\n        console.log('Left presence channel');\n    });\n</code></pre>"},{"location":"cable/#get-all-users-in-channel","title":"Get all users in channel","text":"<pre><code>presence.getUsers()\n    .then(data =&gt; {\n        console.log('Users in channel:', data.users);\n    });\n</code></pre>"},{"location":"cable/#subscribe-to-presence-channel-events","title":"Subscribe to presence channel events","text":"<pre><code>socket.subscribe(channel)\n\n    // Handle presence updates\n    .on('presence:update', function(data) {\n        console.log('Presence update:', data);\n        // updateOnlineUsers(data.users);\n    })\n\n    // Handle join events\n    .on('presence:join', function(data) {\n        console.log('Users joined:', data.users);\n        data.users.forEach(id =&gt; {\n            // addNotification(`User ${id} joined the chat`);\n        });\n    })\n\n    // Handle leave events\n    .on('presence:leave', function(data) {\n        console.log('Users left:', data.users);\n        data.users.forEach(id =&gt; {\n            // addNotification(`User ${id} left the chat`);\n        });\n    })\n\n    // Handle message events\n    .on('message', function(data) {\n        console.log('Received message event with data:', data);\n        // addMessage(data.userId, data.text);\n    });\n</code></pre>"},{"location":"cable/#presence-channel-configuration","title":"Presence Channel Configuration","text":"<pre><code>// Join a presence channel with custom endpoint\npresence.join('/custom/join/endpoint');\n\n// Leave a presence channel with custom endpoint\npresence.leave('/custom/leave/endpoint);\n\n// Start heartbeat with custom interval and endpoint\npresence.startHeartbeat(30000, '/custom/heartbeat/endpoint');\n\n// Get users with custom endpoint\npresence.getUsers('/custom/users/endpoint');\n</code></pre>"},{"location":"cable/#message-batching","title":"Message Batching","text":"<p>You can batch multiple messages together to promote better performance:</p> <ol> <li>Fewer database writes</li> <li>Better transaction handling</li> <li>Reduced server load</li> <li>More efficient client updates</li> </ol>"},{"location":"cable/#server-side-batching","title":"Server-Side Batching","text":"<p>Without Batching (BAD)</p> <pre><code>public function notifyUsers(Cable $cable)\n{\n    // Sending 100 notifications = 100 database writes\n    foreach($users as $user) {\n\n        $cable-&gt;to('notifications')-&gt;emit('message:new', [\n            'user' =&gt; $user-&gt;id,\n            'message' =&gt; 'Hello'\n        ]);\n\n    }\n}\n</code></pre> <p>With Batching (GOOD)</p> <pre><code>public function notifyUsers(MessageBatcher $batcher)\n{\n    $batcher-&gt;channel('notifications')-&gt;batchSize(100);\n\n    // Sending 100 notifications = 1 database writes\n    foreach($users as $user) {\n\n        $batcher-&gt;add('message:new', [\n            'user' =&gt; $user-&gt;id,\n            'message' =&gt; 'Hello'\n        ]);\n\n    }\n}\n</code></pre> <p>The default batch size is 100 which you can override. You never need to manually flush the batch of messages. it is automatically done by the MessageBatcher instance.</p>"},{"location":"cable/#client-side-batching","title":"Client-Side Batching","text":"<pre><code>const socket = cable.connect();\nconst channel = 'user-tracking';\n\n// Configure client-side batching\nsocket.setBatchOptions({\n    batchSize: 5,           // Max events per batch\n    batchInterval: 2000,     // Flush interval in ms\n    batchEndpoint: '&lt;?= url()-&gt;route('api.batch-events') ?&gt;',\n    csrfToken: '&lt;?= csrfToken() ?&gt;',\n});\n\n// Track events (added to batch)\nsocket.emitBatched(channel, 'event:button-clicked', { data: 'Subscribe Button' });\nsocket.emitBatched(channel, 'event:mouse-moved', { data: 'FAQ Section' });\nsocket.emitBatched(channel, 'event:button-hovered', { data: 'Buy Now Button' });\n...\n...\n...\nsocket.emitBatched(channel, 'event:button-clicked', { data: 'Buy Now Button' });\n</code></pre> <p>Once the batch size exceeds or batch interval passes, the batch endpoint is automatically called with all the even data.</p> <p>If required, you can manually flush the batch of events:</p> <pre><code>socket.flushOutgoingBatch();\n</code></pre>"},{"location":"cable/#notification-sounds","title":"Notification Sounds","text":"<p>An interesting feature of Lightpack <code>cable.js</code> client is that it can play sounds for subcribed events:</p> <pre><code>cable.playSound('/sounds/notify.mp3');\n</code></pre> <p>For example:</p> <ul> <li>You can put the notify.mp3 file in <code>public/sounds</code> folder.</li> <li>Optionally, set the volume by passing a value between 0 to 1.</li> </ul> <pre><code>socket\n    .subscribe('notifications')\n    .on('message', function(data) {\n        cable.playSound('/sounds/notify.mp3', 0.7);\n    });\n</code></pre>"},{"location":"caching/","title":"Caching","text":"<p>A cache is a store where you put data to enhance application performance by reducing frequent computations or database queries.</p> <p>For example, if your store displays product categories with counts, querying the database every time is slow. Instead, cache the result and reuse it for future requests.</p> <p>Lightpack provides a simple, flexible cache library with multiple drivers and a clean API.</p>"},{"location":"caching/#quick-start","title":"Quick Start","text":"<p>Lightpack comes pre-configured with a default file-based cache service. Just use:</p> <pre><code>cache()-&gt;set();\ncache()-&gt;get();\ncache()-&gt;has();\ncache()-&gt;delete();\ncache()-&gt;flush();\ncache()-&gt;forever();\ncache()-&gt;remember();\ncache()-&gt;rememberForever();\n</code></pre> <p>NOTE: Set appropriate write permissions on the <code>storage</code> directory for file cache.</p>"},{"location":"caching/#set","title":"set()","text":"<p>Store an item in the cache. Parameters: <code>key</code>, <code>value</code>, <code>seconds</code> (expiry in seconds, not minutes).</p> <pre><code>cache()-&gt;set('name', 'Bob', 300); // 5 minutes\n</code></pre> <ul> <li>Pass <code>0</code> as seconds for a \u201cforever\u201d cache (5 years).</li> </ul>"},{"location":"caching/#get","title":"get()","text":"<p>Retrieve an item from cache by key. Returns <code>null</code> if not found or expired.</p> <pre><code>$name = cache()-&gt;get('name'); // Bob or null\n</code></pre>"},{"location":"caching/#has","title":"has()","text":"<p>Check if a key exists in the cache.</p> <pre><code>if (cache()-&gt;has('name')) { ... }\n</code></pre>"},{"location":"caching/#delete","title":"delete()","text":"<p>Remove an item from the cache.</p> <pre><code>cache()-&gt;delete('name');\n</code></pre>"},{"location":"caching/#flush","title":"flush()","text":"<p>Clear all items from the cache store.</p> <pre><code>cache()-&gt;flush();\n</code></pre>"},{"location":"caching/#forever","title":"forever()","text":"<p>Store an item \u201cforever\u201d (actually 5 years).</p> <pre><code>cache()-&gt;forever('site_theme', 'Marble');\n</code></pre>"},{"location":"caching/#remember","title":"remember()","text":"<p>Retrieve an item if present, otherwise compute, store, and return it.</p> <pre><code>$value = cache()-&gt;remember('expensive', 300, function() {\n    return computeExpensiveThing();\n});\n</code></pre>"},{"location":"caching/#rememberforever","title":"rememberForever()","text":"<p>Like <code>remember()</code>, but stores the value \u201cforever\u201d.</p> <pre><code>$value = cache()-&gt;rememberForever('expensive', function() {\n    return computeExpensiveThing();\n});\n</code></pre>"},{"location":"caching/#manual-configuration","title":"Manual Configuration","text":"<p>You can manually configure the cache provider:</p> <pre><code>use Lightpack\\Cache\\Cache;\nuse Lightpack\\Cache\\Drivers\\FileDriver;\n\n$driver = new File(DIR_STORAGE . '/cache');\n$cache = new Cache($driver);\n</code></pre> <p>Now you can access cache methods as usual.</p> <pre><code>$cache-&gt;set('name', 'Bob', 5);\n$cache-&gt;get('name'); // Bob\n</code></pre>"},{"location":"caching/#available-drivers","title":"Available Drivers","text":"<p>Lightpack provides several cache drivers:</p> <ul> <li>FileDriver: Stores cache in files (default).</li> <li>ArrayDriver: Stores cache in memory (non-persistent, useful for testing).</li> <li>NullDriver: Disables cache (all operations are no-ops).</li> <li>DatabaseDriver: Stores cache in a database table (requires schema).</li> <li>RedisDriver: Stores cache in Redis (supports key prefixing).</li> </ul> <p>You can view <code>config/cache.php</code> file for cache related configurations.</p>"},{"location":"caching/#database-migration","title":"Database Migration","text":"<p>If using database as cache driver, you need to migrate a new table for storing cache entries.</p> <pre><code>php console create:migration create_table_cache\n</code></pre> <p>Update and run the migration code:</p> <pre><code>return new class extends Migration\n{\n    public function up(): void\n    {\n        $this-&gt;create('cache', function (Table $table) {\n            $table-&gt;varchar('key', 255)-&gt;primary();\n            $table-&gt;column('value')-&gt;type('longtext');\n            $table-&gt;column('expires_at')-&gt;type('int')-&gt;attribute('UNSIGNED');\n            $table-&gt;index('expires_at', 'idx_cache_expiry');\n        });\n    }\n\n    public function down(): void\n    {\n        $this-&gt;drop('cache');\n    }\n};\n</code></pre>"},{"location":"captcha/","title":"Lightpack Captcha System","text":"<p>Lighpack makes it painless to add CAPTCHA protection to your apps\u2014whether you need a simple image challenge, Google reCAPTCHA, Cloudflare Turnstile, or a no-op for testing.</p> <ul> <li>Purpose: Prevent automated bots from abusing forms, APIs, or other user-facing endpoints.</li> <li>Where to Use: Registration, login, comments, password reset, or any action vulnerable to spam or brute-force.</li> </ul>"},{"location":"captcha/#supported-drivers","title":"Supported Drivers","text":"Driver Class Use Case <code>null</code> <code>NullCaptcha</code> Testing/dev, disables CAPTCHA (always passes) <code>native</code> <code>NativeCaptcha</code> Simple image CAPTCHA (no external API) <code>recaptcha</code> <code>GoogleReCaptcha</code> Google reCAPTCHA v2 widget <code>turnstile</code> <code>CloudflareTurnstile</code> Cloudflare Turnstile widget <p>See config/captcha.php file configuration details.</p>"},{"location":"captcha/#captchainterface","title":"CaptchaInterface","text":"<p>All drivers implement:</p> <pre><code>// Render the challenge (HTML/image)\npublic function generate(): string;\n\n// Validate user captcha response\npublic function verify(): bool;     \n</code></pre>"},{"location":"captcha/#usage-patterns","title":"Usage Patterns","text":""},{"location":"captcha/#rendering-a-captcha","title":"Rendering a CAPTCHA","text":"<pre><code>echo captcha()-&gt;generate();\n</code></pre>"},{"location":"captcha/#verifying-user-response","title":"Verifying User Response","text":"<pre><code>// In your form handler:\nif (captcha()-&gt;verify()) {\n    // Passed\n} else {\n    // Failed\n}\n</code></pre>"},{"location":"captcha/#driver-details","title":"Driver Details","text":""},{"location":"captcha/#nullcaptcha-testingdev","title":"NullCaptcha (Testing/Dev)","text":"<ul> <li>No challenge, always passes.</li> <li>Use for local/dev/testing only.</li> </ul> <pre><code>echo captcha()-&gt;generate(); // ''\n\ncaptcha()-&gt;verify(); // always true\n</code></pre>"},{"location":"captcha/#nativecaptcha-image-based","title":"NativeCaptcha (Image-based)","text":"<ul> <li>No external API. Generates PNG image with random text.</li> <li>Stores captcha verification answer in session.</li> <li>Configurable: font, width, height.</li> </ul> <pre><code>// Configure image captcha settings\ncaptcha()\n    -&gt;font('/path/to/font.ttf')\n    -&gt;width(200)\n    -&gt;height(60);\n\n// In the form view\necho '&lt;img src=\"' . captcha()-&gt;generate() . '\" /&gt;';\n\n// In form handler\nif (captcha()-&gt;verify()) { \n    // Passed\n}\n</code></pre>"},{"location":"captcha/#googlerecaptcha","title":"GoogleReCaptcha","text":"<ul> <li>Google-hosted widget. </li> <li>Requires site/secret keys in config.</li> <li>Renders widget, verifies via Google API.</li> </ul> <pre><code>// Outputs Google recaptcha\necho captcha()-&gt;generate(); \n\n// In form handler\nif (captcha()-&gt;verify()) {\n    // passed\n}\n</code></pre>"},{"location":"captcha/#cloudflareturnstile","title":"CloudflareTurnstile","text":"<ul> <li>Cloudflare-hosted widget.</li> <li>Requires site/secret keys in config.</li> <li>Renders widget, verifies via Cloudflare API.</li> </ul> <pre><code>// Outputs &lt;div class=\"cf-turnstile\" ...&gt;\necho captcha()-&gt;generate(); \n\n// In form handler\nif (captcha()-&gt;verify()) {\n    // passed\n}\n</code></pre>"},{"location":"collections/","title":"Collections in Lightpack ORM","text":"<p>Collections are a powerful abstraction in Lightpack ORM for working with groups of models. Whenever you fetch multiple records from the database\u2014such as via <code>all()</code>, <code>where()</code>, or relationship queries\u2014you receive a <code>Collection</code> object. This class provides a rich, expressive API for transforming, filtering, mapping, and interacting with sets of models in a clean, object-oriented way.</p>"},{"location":"collections/#what-is-a-collection","title":"What is a Collection?","text":"<p>A <code>Collection</code> is an object that wraps an array of models and provides utility methods for iteration, searching, transformation, and batch operations. It implements PHP interfaces like <code>IteratorAggregate</code>, <code>Countable</code>, <code>ArrayAccess</code>, and <code>JsonSerializable</code>, so it behaves like an array but with much more power.</p>"},{"location":"collections/#example-getting-a-collection","title":"Example: Getting a Collection","text":"<pre><code>// Collection of User models\n$users = User::query()-&gt;where('status', 'active')-&gt;all();\n</code></pre> <p>You can loop over a collection just like an array:</p> <pre><code>foreach ($users as $user) {\n    echo $user-&gt;email;\n}\n</code></pre>"},{"location":"collections/#core-collection-methods","title":"Core Collection Methods","text":""},{"location":"collections/#ids","title":"ids()","text":"<p>Get all primary keys from the collection.</p> <pre><code>$userIds = $users-&gt;ids(); // [1, 2, 3, ...]\n</code></pre>"},{"location":"collections/#isempty","title":"isEmpty()","text":"<p>Check if the collection is empty.</p> <pre><code>if ($users-&gt;isEmpty()) { ... }\n</code></pre>"},{"location":"collections/#isnotempty","title":"isNotEmpty()","text":"<p>Check if the collection is not empty.</p> <pre><code>if ($users-&gt;isNotEmpty()) { ... }\n</code></pre>"},{"location":"collections/#find","title":"find()","text":"<p>Find a model by its primary key.</p> <pre><code>$user = $users-&gt;find(5);\n</code></pre>"},{"location":"collections/#first","title":"first()","text":"<p>Get the first model in the collection, or the first that matches conditions.</p> <pre><code>$firstUser = $users-&gt;first();\n$admin = $users-&gt;first(['role' =&gt; 'admin']);\n</code></pre>"},{"location":"collections/#column","title":"column()","text":"<p>Get an array of values for a given column from all models.</p> <pre><code>$emails = $users-&gt;column('email');\n</code></pre>"},{"location":"collections/#filter","title":"filter()","text":"<p>Return a new collection with only items matching the callback.</p> <pre><code>$activeUsers = $users-&gt;filter(fn($u) =&gt; $u-&gt;active);\n</code></pre>"},{"location":"collections/#map","title":"map()","text":"<p>Transform each item in the collection, returning a new collection.</p> <pre><code>$names = $users-&gt;map(fn($u) =&gt; strtoupper($u-&gt;name));\n</code></pre>"},{"location":"collections/#asmap","title":"asMap()","text":"<p>Return an associative array keyed by a property.</p> <pre><code>$userMap = $users-&gt;asMap('email');\n// $userMap['foo@bar.com'] =&gt; User model\n</code></pre>"},{"location":"collections/#any","title":"any()","text":"<p>Check if any model in the collection has a given attribute.</p> <pre><code>if ($users-&gt;any('last_login')) { ... }\n</code></pre>"},{"location":"collections/#exclude","title":"exclude()","text":"<p>Return a new collection excluding models with the given primary key(s).</p> <pre><code>$withoutAdmins = $users-&gt;exclude([1, 2]);\n</code></pre>"},{"location":"collections/#each","title":"each()","text":"<p>Run a callback on each item in the collection.</p> <pre><code>$users-&gt;each(function($user) {\n    $user-&gt;sendWelcomeEmail();\n});\n</code></pre>"},{"location":"collections/#toarray","title":"toArray()","text":"<p>Convert the collection to an array of arrays (each model as array).</p> <pre><code>$array = $users-&gt;toArray();\n</code></pre>"},{"location":"collections/#load","title":"load()","text":"<p>Eager load one or more relationships for existing model instances.</p> <pre><code>$users-&gt;load('profile', 'roles');\n</code></pre>"},{"location":"collections/#loadcount","title":"loadCount()","text":"<p>Eager load counts of related models.</p> <pre><code>$users-&gt;loadCount('posts');\nforeach ($users as $user) {\n    echo $user-&gt;posts_count;\n}\n</code></pre>"},{"location":"collections/#loadmorphs","title":"loadMorphs()","text":"<p>Efficiently eager load polymorphic parents for a collection of models with a <code>morphTo</code> relation.</p> <pre><code>$comments-&gt;loadMorphs([\n    Post::class,\n    Video::class,\n    Photo::class,\n]);\n</code></pre>"},{"location":"collections/#transforming-collections","title":"Transforming Collections","text":"<p>Collections support transforming all models using the model\u2019s transformer. This is especially useful for APIs:</p> <pre><code>$payload = $users-&gt;transform([\n    'fields' =&gt; ['id', 'name', 'email'],\n    'includes' =&gt; ['profile'],\n]);\n</code></pre> <p>See also: For advanced transformation options, custom field selection, relation includes, and best practices for API responses, refer to the Transformers documentation.</p>"},{"location":"collections/#array-like-and-json-behavior","title":"Array-like and JSON Behavior","text":"<ul> <li>ArrayAccess: You can use array syntax: <code>$users[0]</code>, <code>isset($users[3])</code>, etc.</li> <li>Countable: Use <code>count($users)</code> to get the number of items.</li> <li>JsonSerializable: Collections can be safely passed to <code>json_encode()</code>.</li> </ul>"},{"location":"collections/#best-practices-tips","title":"Best Practices &amp; Tips","text":"<ul> <li>Chain methods for expressive code:   <code>php   $emails = $users-&gt;filter(fn($u) =&gt; $u-&gt;active)                   -&gt;map(fn($u) =&gt; $u-&gt;email)                   -&gt;toArray();</code></li> <li>Avoid N+1 queries: Use <code>load()</code> or <code>loadMorphs()</code> before accessing related models in a loop.</li> <li>Use asMap() for fast lookups by a property value.</li> <li>Use transform() for API responses, respecting field selection and includes.</li> <li>Prefer collection methods over manual array manipulation for clarity and consistency.</li> </ul>"},{"location":"collections/#example-putting-it-all-together","title":"Example: Putting It All Together","text":"<pre><code>$users = User::query()-&gt;with('profile')-&gt;all();\n\n// Eager load posts and count of comments for each user\n$users-&gt;load('posts')-&gt;loadCount('comments');\n\n// Get all user emails who have posted in the last week\n$recent = $users-&gt;filter(fn($u) =&gt; $u-&gt;posts-&gt;first()?-&gt;created_at &gt; now()-&gt;subWeek());\n$emails = $recent-&gt;column('email');\n\n// Transform for API\nreturn $users-&gt;transform([\n    'fields' =&gt; ['id', 'name', 'email'],\n    'includes' =&gt; ['profile', 'posts'],\n]);\n</code></pre>"},{"location":"configuration/","title":"Configuration","text":"<p>Every project needs to maintain some configuration data for the application.  These configurations also depend on your project environment. For example, you would prefer to have seperate configurations for staging database as compared to production database.</p> <p><code>Lightpack</code> comes with a simple <code>array</code> based configuration approach which is lightweight yet extendible to meet complex configuration requirements as per project.</p>"},{"location":"configuration/#config","title":"config()","text":"<p>To access a config item, simply call <code>config()</code> function passing it the configuration key.</p> <pre><code>config('key'); \n</code></pre> <p>All your project configurations goes in config folder in your app root.</p>"},{"location":"configuration/#accessing-configuration","title":"Accessing configuration","text":"<p>To view configurations for your application browse <code>config</code> folder. It lists some pre-defined configurations as an <code>array</code> of key-value pairs.</p> <p>For example, you c an access <code>config/db.php</code> configuration file keys like:</p> <pre><code>config('db.mysql.host');\nconfig('db.mysql.port');\n</code></pre>"},{"location":"configuration/#custom-configuration","title":"Custom configuration","text":"<p>You can define your own custom configuration files as per your application needs. Say  for example, you want to have a new configuration file for your <code>Redis</code> server. For that, simply create a file <code>redis.php</code> in the <code>config</code> folder and put your configuration details as an array as show below.</p> <pre><code>&lt;?php\n\nreturn [\n    'redis' =&gt; [\n        'host' =&gt; '127.0.0.1',\n        'port' =&gt; '6666',\n        'password' =&gt; '1234',\n    ],\n];\n</code></pre> <p>Now you can easily access the config values as shown:</p> <pre><code>config('redis.host'); // 127.0.0.1\nconfig('redis.port'); // 6666\n</code></pre>"},{"location":"configuration/#changing-configuration","title":"Changing configuration","text":"<p>You can dynamically add new configuration values at runtime by simply setting the config item key as show below.</p> <pre><code>config()-&gt;set('key', 'value');\n</code></pre>"},{"location":"console/","title":"Console: Lightpack CLI Assistant","text":"<p>Lightpack ships with developer-focused command-line assistant named console. It\u2019s simple, powerful, and built for rapid PHP application development, automation, and extension.</p>"},{"location":"console/#quick-example","title":"Quick Example","text":"<p>To generate a new controller class:</p> <pre><code>php console create:controller Product\n</code></pre>"},{"location":"console/#available-commands","title":"Available Commands","text":"<p>console CLI provides a comprehensive set of commands for code generation, database management, job processing, application utilities, and more. Each command is described below with usage examples and options.</p>"},{"location":"console/#code-generators","title":"Code Generators","text":""},{"location":"console/#createenv","title":"create:env","text":"<p>Create a new <code>.env</code> file in your project root by copying from the example template.</p> <pre><code>php console create:env\n</code></pre>"},{"location":"console/#createevent","title":"create:event","text":"<p>Generate a new event class in <code>app/Events</code>.</p> <pre><code>php console create:event UserRegistered\n</code></pre>"},{"location":"console/#createmodel","title":"create:model","text":"<p>Generate a new model class in <code>app/Models</code>.</p> <pre><code>php console create:model Product\n</code></pre> <ul> <li><code>--table=products</code> : Set the table name.</li> <li><code>--key=product_id</code> : Set the primary key name.</li> </ul>"},{"location":"console/#createfilter","title":"create:filter","text":"<p>Generate a new filter class in <code>app/Filters</code>.</p> <pre><code>php console create:filter InputFilter\n</code></pre>"},{"location":"console/#createcommand","title":"create:command","text":"<p>Generate a new command class in <code>app/Commands</code>.</p> <pre><code>php console create:command HelloCommand\n</code></pre>"},{"location":"console/#createprovider","title":"create:provider","text":"<p>Generate a new provider class in <code>app/Providers</code>.</p> <pre><code>php console create:provider MailProvider\n</code></pre> <ul> <li><code>--instance</code> : Create a provider that calls the container's factory method.</li> </ul>"},{"location":"console/#createcontroller","title":"create:controller","text":"<p>Generate a new controller class in <code>app/Controllers</code>.</p> <pre><code>php console create:controller ProductController\n</code></pre>"},{"location":"console/#createmigration","title":"create:migration","text":"<p>Generate a new migration file in <code>database/migrations</code>.</p> <pre><code>php console create:migration create_table_users\n</code></pre>"},{"location":"console/#createjob","title":"create:job","text":"<p>Generate a new job class in <code>app/Jobs</code>.</p> <pre><code>php console create:job SendEmailJob\n</code></pre>"},{"location":"console/#createmail","title":"create:mail","text":"<p>Generate a new mail class in <code>app/Mails</code>.</p> <pre><code>php console create:mail WelcomeMail\n</code></pre>"},{"location":"console/#createseeder","title":"create:seeder","text":"<p>Generate a new seeder class in <code>database/seeders</code>.</p> <pre><code>php console create:seeder UserSeeder\n</code></pre>"},{"location":"console/#createtransformer","title":"create:transformer","text":"<p>Generate a new transformer class in <code>app/Transformers</code>.</p> <pre><code>php console create:transformer UserTransformer\n</code></pre>"},{"location":"console/#createrequest","title":"create:request","text":"<p>Generate a new request class in <code>app/Requests</code>.</p> <pre><code>php console create:request RegisterRequest\n</code></pre>"},{"location":"console/#file-storage","title":"File Storage","text":""},{"location":"console/#linkstorage","title":"link:storage","text":"<p>Create a symbolic link from <code>public/uploads</code> to <code>storage/uploads/public</code>.</p> <pre><code>php console link:storage\n</code></pre>"},{"location":"console/#unlinkstorage","title":"unlink:storage","text":"<p>Remove the symbolic link created by <code>link:storage</code>.</p> <pre><code>php console unlink:storage\n</code></pre>"},{"location":"console/#database-migrations","title":"Database &amp; Migrations","text":""},{"location":"console/#migrateup","title":"migrate:up","text":"<p>Run all pending database migrations (MySQL/MariaDB only).</p> <pre><code>php console migrate:up\n</code></pre> <ul> <li>Prompts for confirmation in production.</li> </ul>"},{"location":"console/#migratedown","title":"migrate:down","text":"<p>Rollback database migrations.</p> <pre><code>php console migrate:down --all\nphp console migrate:down --steps=2\n</code></pre> <ul> <li><code>--all</code> : Rollback all migrations.</li> <li><code>--steps=N</code> : Rollback N batches.</li> </ul>"},{"location":"console/#dbseed","title":"db:seed","text":"<p>Run the <code>DatabaseSeeder</code> to seed your database.</p> <pre><code>php console db:seed\n</code></pre> <ul> <li>Prompts for confirmation before running.</li> </ul>"},{"location":"console/#jobs-scheduling","title":"Jobs &amp; Scheduling","text":""},{"location":"console/#processjobs","title":"process:jobs","text":"<p>Run the background job worker to process queued jobs.</p> <pre><code>php console process:jobs\n</code></pre> <ul> <li><code>--sleep=N</code> : Polling interval in seconds (default: 5).</li> <li><code>--queue=emails,notifications</code> : Comma-separated list of queues (default: <code>default</code>).</li> <li><code>--cooldown=N</code> : Exit after this many seconds of inactivity (default: run forever).</li> </ul>"},{"location":"console/#scheduleevents","title":"schedule:events","text":"<p>Run all scheduled tasks (for cron integration).</p> <pre><code>php console schedule:events\n</code></pre>"},{"location":"console/#application-utilities","title":"Application Utilities","text":""},{"location":"console/#appkey","title":"app:key","text":"<p>Generate and set a new <code>APP_KEY</code> in your <code>.env</code> file.</p> <pre><code>php console app:key\n</code></pre>"},{"location":"console/#appserve","title":"app:serve","text":"<p>Start the PHP built-in server using <code>APP_URL</code> from <code>.env</code> as the host.</p> <pre><code>php console app:serve\n</code></pre> <p>You can specify the port to run:</p> <pre><code>php console app:serve 8001\n</code></pre>"},{"location":"console/#hot-reload-watch","title":"Hot Reload &amp; Watch","text":""},{"location":"console/#watch","title":"watch","text":"<p>Watch files or directories for changes and run a shell command (hot reload for development).</p> <pre><code>php console watch --path=app,config --ext=php,json --run=\"vendor/bin/phpunit\"\n</code></pre> <ul> <li><code>--path=app,config</code> : Comma-separated list of directories/files to watch (required).</li> <li><code>--ext=php,json</code> : Comma-separated file extensions to filter (optional).</li> <li><code>--run=command</code> : Shell command to execute on change (optional).</li> <li><code>--help</code> : Show detailed usage.</li> </ul>"},{"location":"console/#interactive-prompts-output","title":"Interactive Prompts &amp; Output","text":"<p>Lightpack console CLI provides a rich set of APIs for interactive command-line UX:</p>"},{"location":"console/#output-formatting","title":"Output Formatting","text":"<p>Use the <code>Lightpack\\Console\\Output()</code> class for styled output:</p> <pre><code>$output = new Output();\n\n$output-&gt;info('Information');\n$output-&gt;success('Success!');\n$output-&gt;error('An error occurred');\n$output-&gt;warning('This is a warning');\n$output-&gt;line('Plain text');\n$output-&gt;pad('Left', 'Right', 30, '.'); // Left................. Right\n$output-&gt;infoLabel('INFO'); // Colored label\n</code></pre>"},{"location":"console/#interactive-prompts","title":"Interactive Prompts","text":"<p>Use the <code>Lightpack\\Console\\Prompt</code> class for user input:</p> <pre><code>$prompt = new Prompt();\n\n$name = $prompt-&gt;ask('What is your name?');\n$password = $prompt-&gt;secret('Enter password:');\n$agree = $prompt-&gt;confirm('Do you agree?', true); // [Y/n]\n$email = $prompt-&gt;askWithValidation('Email:', fn($v) =&gt; filter_var($v, FILTER_VALIDATE_EMAIL));\n$choice = $prompt-&gt;choice('Pick one:', ['a' =&gt; 'Apple', 'b' =&gt; 'Banana']);\n</code></pre>"},{"location":"console/#custom-commands-registration","title":"Custom Commands &amp; Registration","text":""},{"location":"console/#creating-a-command","title":"Creating a Command","text":"<ol> <li>Generate a new command class:</li> </ol> <p><code>terminal    php console create:command MyCommand</code></p> <ol> <li> <p>Implement the <code>run(array $arguments = [])</code> method in your class.</p> </li> <li> <p>Register your command in <code>config/commands.php</code>:</p> </li> </ol> <p><code>php    return [        'my:command' =&gt; App\\Commands\\MyCommand::class,    ];</code></p> <ol> <li>Run your command:</li> </ol> <p><code>terminal    php console my:command arg1 --flag=value</code></p> <p>Note: All arguments are passed as an array to <code>run()</code>.</p>"},{"location":"containers/","title":"Containers","text":"<p>Lightpack provides an IoC container to configure your class dependencies in a manner that helps write maintainable code. </p> <p> IoC refers to the concept of inversion of control where dependencies are injected into a class rather than hard coding into it. </p> <p>Note that container in <code>Lightpack</code> is a lightweight service locator.</p> <p>That means, it doesn't inject dependencies, it locates them for you.</p>"},{"location":"containers/#register-singleton","title":"Register Singleton","text":"<p>To bind an instance of a class just once, call <code>register()</code> method.</p> <p>It takes an alias as string and a callback where you configure and return your class instance.</p> <pre><code>$container-&gt;register('service', function($container) {\n    return new ServiceProvider();\n});\n</code></pre> <p>The <code>register()</code> method essentially ends up creating a singleton of the registered service.</p> <p> By default, all the services are registered in a lazy manner. </p>"},{"location":"containers/#register-instance","title":"Register Instance","text":"<p>In some cases you might want a new instance every time you access the service through the container. For that use the <code>factory()</code> method of container.</p> <pre><code>$container-&gt;factory('service', function($container) {\n    return new ServiceProvider();\n});\n</code></pre>"},{"location":"containers/#accessing-service","title":"Accessing Service","text":"<p>To access a registered service through the container, use <code>app()</code> utility function passing it the alias of the service you want to access from the container. </p> <pre><code>app('service');\n</code></pre>"},{"location":"containers/#other-methods","title":"Other Methods","text":"<p>There are few more methods that you should know about.</p>"},{"location":"containers/#has","title":"has()","text":"<p>To check if a service/class is registered in container, call <code>has()</code> method passing it the alias. This method return a <code>boolean</code> value.</p> <pre><code>$container-&gt;has('service'); // true\n</code></pre>"},{"location":"containers/#get","title":"get()","text":"<p>To get a configured item from the container, call <code>get()</code> method passing it the alias.</p> <pre><code>$container-&gt;get('service');\n</code></pre>"},{"location":"controllers/","title":"Controllers","text":"<p>Controllers are classes that define action methods that respond to a request. Define  your controllers within <code>app/controllers</code> folder. </p> <pre><code>&lt;?php\n\nnamespace App\\Controllers;\n\nclass HomeController\n{\n    public function index()\n    {\n        return 'welcome';\n    }\n}\n</code></pre> <p>As you can see, defining controllers in Lightpack is quite easy.</p>"},{"location":"controllers/#route-params","title":"Route Params","text":"<p>For dynamic routes, you can access route parameters by defining them in the controller's action method signature. For example, for the following route definition:</p> <pre><code>route()-&gt;get('/users/:user/posts/:post', PostController::class);\n</code></pre> <p>Define your controller as:</p> <pre><code>&lt;?php\n\nnamespace App\\Controllers;\n\nclass PostController\n{\n    public function index($user, $post)\n    {\n        // ...\n    }\n}\n</code></pre>"},{"location":"controllers/#rendering-views","title":"Rendering Views","text":"<p>Define your view templates in <code>app/views</code> folder. To render a view template,  call the <code>view()</code> method of <code>response()</code>. This method takes a view template name and an optional array of view data as arguments.</p> <pre><code>&lt;?php\n\nnamespace App\\Controllers;\n\nclass PageController\n{\n    return response()-&gt;view('page');\n}\n</code></pre> <p>You can pass view data as second argument to <code>render()</code> method.</p> <pre><code>class PageController\n{\n    public function index()\n    {\n        return response()-&gt;view('page', [\n            'title' =&gt; 'Lightpack PHP',\n        ]);\n    }\n}\n</code></pre> <p>Now you can access the view data array by key names as variables within your view template files. For example, if you want to access the <code>title</code> variable, you can do it as follows:</p> <pre><code>Title: &lt;?= $title ?&gt;\n</code></pre> <p>Read more about view templating support in Lightpack.</p>"},{"location":"controllers/#json-response","title":"JSON Response","text":"<p>For APIs, you may be interested in sending JSON response instead of view templates. For that, simply call the <code>json()</code> method inherited from parent class.</p> <pre><code>return response()-&gt;json(['framework' =&gt; 'Lighpack']);\n</code></pre>"},{"location":"controllers/#xml-response","title":"XML Response","text":"<p>For sending XML response, simply call the <code>xml()</code> method inherited from parent class passing it the XML formatted string data.</p> <pre><code>return response()-&gt;xml('xml_data_string');\n</code></pre> <p> Calling methods <code>view()</code>, or <code>json()</code>, or <code>xml()</code> automatically takes care of setting appropriate response content type and status code <code>200</code>, thereby saving you some typing. However, you can set them manually using the methods available in <code>response()</code> object. </p> <p>Read more about using response() in Lightpack PHP.</p>"},{"location":"cookies/","title":"Cookies","text":"<p>Lightpack provides the <code>cookie()</code> function to work with cookies.</p> <p>Note: All cookies created by Lightpack are signed using HMAC for tamper detection. The cookie value is visible to the client, but any modification will be detected and rejected.</p> <p>You can access the following functions:</p> <pre><code>cookie()-&gt;set()\ncookie()-&gt;get()\ncookie()-&gt;has()\ncookie()-&gt;forever()\ncookie()-&gt;delete()\n</code></pre>"},{"location":"cookies/#set","title":"Set","text":"<p>Set a cookie (expires at the end of the session):</p> <pre><code>cookie()-&gt;set('key', 'value');\n</code></pre> <p>Set a cookie with custom expiry (in seconds):</p> <pre><code>cookie()-&gt;set('key', 'value', 5*60);\n</code></pre> <p>Set a cookie with options (<code>path</code>, <code>domain</code>, <code>secure</code>, <code>http_only</code>, <code>same_site</code>):</p> <pre><code>cookie()-&gt;set('key', 'value', 5*60, [\n    'path' =&gt; $path,\n    'domain' =&gt; $domain,\n    'secure' =&gt; true,\n    'http_only' =&gt; true,\n    'same_site' =&gt; 'lax', // or 'strict', 'none'\n]);\n</code></pre>"},{"location":"cookies/#get","title":"Get","text":"<p>Get all cookies:</p> <pre><code>cookie()-&gt;get();\n</code></pre> <p>Get a specific cookie (returns <code>null</code> if not found or tampered):</p> <pre><code>cookie()-&gt;get('key');\n</code></pre>"},{"location":"cookies/#has","title":"Has","text":"<p>Check if a cookie is set:</p> <pre><code>cookie()-&gt;has('key');\n</code></pre>"},{"location":"cookies/#forever","title":"Forever","text":"<p>Set a cookie that lasts for years (useful for \u201cRemember Me\u201d):</p> <pre><code>cookie()-&gt;forever('key', 'value');\n</code></pre> <p>You can also pass options as the third parameter:</p> <pre><code>cookie()-&gt;forever('key', 'value', ['path' =&gt; $path, 'same_site' =&gt; 'strict']);\n</code></pre>"},{"location":"cookies/#delete","title":"Delete","text":"<p>Delete a specific cookie:</p> <pre><code>cookie()-&gt;delete('key');\n</code></pre> <p>Security Note: If a cookie is modified by the client, Lightpack will detect the tampering and return <code>null</code> for that cookie.</p>"},{"location":"cors/","title":"CORS","text":"<p>If you want to allow your APIs to be consumed from external domains you need to understand the mechanism of <code>Cross-Origin Resource Sharing</code> aka CORS.</p> <p>Cross-Origin Resource Sharing (CORS) </p> <p><code>Lightpack</code> framework comes with a filter to support CORS requests made by browsers while accessing your APIs. </p> <p>The class <code>Lightpack\\Filters\\CorsFilter</code> adds sufficient headers in the before() and after() methods to allow preflight requests made by browsers using <code>OPTIONS</code> request method.</p>"},{"location":"csv-utils/","title":"CSV Utility","text":"<p>Lightpack\u2019s <code>Csv</code> utility provides a robust, memory-efficient, and highly flexible interface for reading, writing, streaming, and transforming CSV data. It is designed for both small and very large files, with a focus on practical ETL, data import/export, and reporting workflows.</p>"},{"location":"csv-utils/#features","title":"Features","text":"<ul> <li>Memory-efficient: Reads large files with generators, never loads all rows into memory.</li> <li>Flexible mapping: Rename columns, transform values, or apply callables per column.</li> <li>Type casting: Automatically cast columns to <code>int</code>, <code>float</code>, <code>bool</code>, or <code>date</code> (timestamp).</li> <li>Column exclusion: Remove sensitive or unwanted columns.</li> <li>Validation: Row-level validation with three error handling modes (<code>skip</code>, <code>collect</code>, <code>fail</code>).</li> <li>Streaming: Stream CSV data to output (e.g., HTTP response) with consistent header order.</li> <li>Customizable: Set delimiter, enclosure, and escape characters.</li> <li>Header order: Control and cache column order for consistent output.</li> </ul>"},{"location":"csv-utils/#basic-usage","title":"Basic Usage","text":""},{"location":"csv-utils/#reading-csv-files","title":"Reading CSV Files","text":"<pre><code>use Lightpack\\Utils\\Csv;\n\n$csv = new Csv();\n\n// Read with headers (default)\nforeach ($csv-&gt;read('users.csv') as $row) {\n    echo $row['name'];\n}\n\n// Read without headers (returns indexed arrays)\nforeach ($csv-&gt;read('data.csv', false) as $row) {\n    echo $row[0];\n}\n</code></pre>"},{"location":"csv-utils/#writing-csv-files","title":"Writing CSV Files","text":"<pre><code>$data = [\n    ['name' =&gt; 'John', 'age' =&gt; 25],\n    ['name' =&gt; 'Jane', 'age' =&gt; 30],\n];\n\n// Write with auto-detected headers\n$csv-&gt;write('users.csv', $data);\n\n// Write with explicit header order\n$csv-&gt;write('users.csv', $data, ['name', 'age']);\n\n// Write from generator or database cursor\n$users = User::query()-&gt;cursor();\n$csv-&gt;write('users.csv', $users, ['id', 'name', 'email']);\n</code></pre>"},{"location":"csv-utils/#data-transformation","title":"Data Transformation","text":""},{"location":"csv-utils/#column-mapping-value-transformation","title":"Column Mapping &amp; Value Transformation","text":"<ul> <li>Rename columns (e.g., <code>user_id</code> \u2192 <code>id</code>) or transform values (e.g., uppercase names):</li> </ul> <pre><code>// Rename columns and apply callables\n$csv-&gt;map([\n    'user_id' =&gt; 'id',               // Rename 'user_id' to 'id'\n    'user_name' =&gt; 'name',           // Rename 'user_name' to 'name'\n    'salary' =&gt; fn($v) =&gt; (float)$v, // Transform 'salary' to float\n    'name' =&gt; fn($v) =&gt; strtoupper($v), // Uppercase names\n]);\n</code></pre> <ul> <li>Mapping is bidirectional: When writing, mapped headers are used; when reading, output keys are the mapped names.</li> </ul>"},{"location":"csv-utils/#type-casting","title":"Type Casting","text":"<ul> <li>Supported types: <code>int</code>, <code>float</code>, <code>bool</code>, <code>date</code> (as UNIX timestamp)</li> <li>Works on read and write</li> </ul> <pre><code>$csv-&gt;casts([\n    'age' =&gt; 'int',\n    'active' =&gt; 'bool',\n    'joined' =&gt; 'date', // Converts to timestamp on read, to Y-m-d H:i:s on write\n]);\n</code></pre>"},{"location":"csv-utils/#excluding-columns","title":"Excluding Columns","text":"<ul> <li>Remove unwanted columns:</li> </ul> <pre><code>$csv-&gt;exclude(['password', 'token']);\n</code></pre>"},{"location":"csv-utils/#chaining-transformations","title":"Chaining Transformations","text":"<ul> <li>All methods are chainable:</li> </ul> <pre><code>$csv-&gt;map(['user_id' =&gt; 'id'])\n    -&gt;casts(['id' =&gt; 'int'])\n    -&gt;exclude(['password'])\n    -&gt;write('users.csv', $data, ['user_id', 'name']);\n</code></pre>"},{"location":"csv-utils/#validation","title":"Validation","text":""},{"location":"csv-utils/#row-validation-with-error-handling-modes","title":"Row Validation (with error handling modes)","text":"<ul> <li>Provide a closure: Return <code>true</code>, <code>false</code>, string, or array of errors.</li> <li>Modes:</li> <li><code>'skip'</code> (default): skip invalid rows</li> <li><code>'collect'</code>: include all rows, collect errors</li> <li><code>'fail'</code>: throw on first invalid row</li> </ul> <pre><code>$csv-&gt;validate(function($row) {\n    if ($row['age'] &lt; 18) return 'Must be 18 or older';\n    return true;\n});\n\n$csv-&gt;validate(function($row) {\n    $errors = [];\n    if (!is_numeric($row['salary'])) $errors[] = 'Salary must be numeric';\n    if ($row['salary'] &lt; 0) $errors[] = 'Salary cannot be negative';\n    return $errors;\n}, 'collect');\n</code></pre> <ul> <li>With Lightpack Validator:</li> </ul> <pre><code>use Lightpack\\Validation\\Validator;\n\n$csv-&gt;validate(function($row) {\n    $validator = new Validator();\n    $validator-&gt;field('email')-&gt;required()-&gt;email();\n    $validator-&gt;setInput($row);\n    $result = $validator-&gt;validate();\n    return $result-&gt;passes() ? true : $result-&gt;getErrors();\n}, 'collect');\n</code></pre> <ul> <li>Get errors:</li> </ul> <pre><code>$errors = $csv-&gt;getErrors();\n</code></pre>"},{"location":"csv-utils/#row-limits-and-processing-control","title":"Row Limits and Processing Control","text":""},{"location":"csv-utils/#maximum-rows-hard-limit","title":"Maximum Rows (hard limit)","text":"<ul> <li>Throws if file exceeds limit:</li> </ul> <pre><code>$csv-&gt;max(1000)-&gt;read('large.csv');\n</code></pre>"},{"location":"csv-utils/#processing-limit-soft-limit","title":"Processing Limit (soft limit)","text":"<ul> <li>Only process first N rows:</li> </ul> <pre><code>$csv-&gt;limit(500)-&gt;read('large.csv');\n</code></pre>"},{"location":"csv-utils/#streaming-output","title":"Streaming Output","text":"<ul> <li>Stream large datasets directly to output (e.g., HTTP response):</li> <li>Headers are written only once; column order is cached.</li> </ul> <pre><code>$csv-&gt;map(['Name' =&gt; 'name', 'Email' =&gt; 'email']);\n\n// First stream call writes headers\n$csv-&gt;stream([\n    ['name' =&gt; 'John', 'email' =&gt; 'john@example.com'],\n], ['Name', 'Email']);\n\n// Subsequent calls append rows (no headers)\n$csv-&gt;stream([\n    ['name' =&gt; 'Jane', 'email' =&gt; 'jane@example.com'],\n]);\n</code></pre>"},{"location":"csv-utils/#header-order-and-consistency","title":"Header Order and Consistency","text":"<ul> <li>Specify header order for write/stream:</li> </ul> <pre><code>$csv-&gt;map([\n    'User ID' =&gt; 'id',\n    'Full Name' =&gt; 'name',\n    'Email Address' =&gt; 'email',\n    'Age' =&gt; 'age',\n]);\n\n$csv-&gt;write('users.csv', $data, [\n    'Email Address', // first column\n    'Age',           // second\n    'Full Name',     // third\n    'User ID',       // last\n]);\n</code></pre> <ul> <li>Order is preserved on subsequent stream calls.</li> </ul>"},{"location":"csv-utils/#error-handling","title":"Error Handling","text":"<ul> <li>Throws <code>RuntimeException</code> for:</li> <li>Unreadable files</li> <li>Unwritable directories</li> <li>Exceeding <code>max()</code></li> <li>Invalid arguments (e.g., negative limits)</li> <li>Validation errors:</li> <li>Collected via <code>getErrors()</code> if <code>'collect'</code> mode</li> <li>Skipped or thrown otherwise</li> </ul>"},{"location":"csv-utils/#advanced-usage-tips","title":"Advanced Usage &amp; Tips","text":"<ul> <li>Generators and cursors: Use generators for both reading and writing to handle huge files efficiently.</li> <li>Custom delimiter, enclosure, escape:</li> </ul> <pre><code>$csv-&gt;setDelimiter(';')\n    -&gt;setEnclosure(\"'\")\n    -&gt;setEscape('\\\\');\n</code></pre> <ul> <li>Streaming to HTTP: Use <code>php://output</code> as the file path in <code>write()</code> for direct HTTP output, or use <code>stream()</code> for chunked output.</li> <li>Chaining: All configuration and transformation methods are chainable.</li> <li>Header caching: Once headers are set (by write or stream), order is preserved for all subsequent rows.</li> </ul>"},{"location":"csv-utils/#practical-examples","title":"Practical Examples","text":""},{"location":"csv-utils/#export-with-transformations-and-column-order","title":"Export with Transformations and Column Order","text":"<pre><code>$data = [\n    ['id' =&gt; 1, 'name' =&gt; 'JOHN', 'age' =&gt; 25],\n    ['id' =&gt; 2, 'name' =&gt; 'JANE', 'age' =&gt; 30],\n];\n\n$csv-&gt;map([\n    'user_id' =&gt; 'id',\n    'user_name' =&gt; 'name',\n])\n-&gt;casts(['age' =&gt; 'int'])\n-&gt;write('users.csv', $data, ['user_id', 'user_name', 'age']);\n// Output columns: user_id,user_name,age\n</code></pre>"},{"location":"csv-utils/#import-validate-and-collect-errors","title":"Import, Validate, and Collect Errors","text":"<pre><code>$csv-&gt;validate(function($row) {\n    $errors = [];\n    if ($row['quantity'] &lt;= 0) $errors[] = 'Quantity must be positive';\n    if ($row['price'] &lt;= 0) $errors[] = 'Price must be positive';\n    return $errors;\n}, 'collect')\n-&gt;casts([\n    'quantity' =&gt; 'int',\n    'price' =&gt; 'float',\n])\n-&gt;read('orders.csv');\n\nforeach ($csv-&gt;getErrors() as $error) {\n    Log::error($error);\n}\n</code></pre>"},{"location":"csv-utils/#generate-reports","title":"Generate Reports","text":"<pre><code>$csv = new Csv();\n\n// Get sales data\n$sales = ProductSale::query\n    -&gt;select('product_id', 'quantity', 'price', 'created_at')\n    -&gt;all()\n    -&gt;toArray();\n\n// Generate sales report\n$csv-&gt;map([\n        'created_at' =&gt; fn($date) =&gt; date('Y-m-d', strtotime($date)),\n        'total' =&gt; fn($row) =&gt; $row['quantity'] * $row['price']\n    ])\n    -&gt;casts([\n        'quantity' =&gt; 'int',\n        'price' =&gt; 'float',\n        'total' =&gt; 'float'\n    ])\n    -&gt;write('sales_report.csv', $sales);\n</code></pre>"},{"location":"csv-utils/#etl-extract-transform-load-operations","title":"ETL (Extract, Transform, Load) Operations","text":"<p>The CSV utility class is powerful enough to handle ETL operations, making it perfect for data pipeline processing.</p>"},{"location":"csv-utils/#basic-etl-example","title":"Basic ETL Example","text":"<pre><code>use Lightpack\\Utils\\Csv;\n\n$csv = new Csv();\n\n// Extract: Get users from database\n$users = User::query()\n    -&gt;where('status', 'active')\n    -&gt;all()\n    -&gt;toArray();\n\n// Transform: Clean and format data\n$csv-&gt;map([\n        // Format dates\n        'created_at' =&gt; fn($date) =&gt; date('Y-m-d', strtotime($date)),\n        // Calculate full name\n        'full_name' =&gt; fn($row) =&gt; $row['first_name'] . ' ' . $row['last_name'],\n        // Format currency\n        'salary' =&gt; fn($amount) =&gt; number_format($amount, 2)\n    ])\n    -&gt;casts([\n        'id' =&gt; 'int',\n        'age' =&gt; 'int',\n        'is_active' =&gt; 'bool'\n    ])\n    -&gt;except(['password', 'remember_token'])\n    -&gt;validate(function($row) {\n        $errors = [];\n        if ($row['age'] &lt; 18) $errors[] = 'Must be adult';\n        if ($row['salary'] &lt; 0) $errors[] = 'Invalid salary';\n        return $errors;\n    }, 'skip');\n\n// Load: Export to CSV\n$csv-&gt;write('processed_users.csv', $users);\n</code></pre>"},{"location":"custom-auth/","title":"Extending Authentication","text":"<p>Lightpack's authentication system is made up of two key building blocks: <code>Authenticators</code> and <code>Identifiers</code>.</p> <p>Understanding how these work together will help you confidently customize authentication for your application.</p>"},{"location":"custom-auth/#concepts","title":"Concepts","text":"<p>Authenticator - Handles the mechanics of authentication (e.g., parsing a JWT, validating a password, checking a cookie) - Extracts identifying information (e.g., user ID) from the request</p> <p>Identifier - Responsible for fetching the user (Identity) from a data source, given some identifying info (like user ID, email, etc.) - Is agnostic to how the identifying info was obtained</p> <p>How do they work together? - Authenticator verifies the request and extracts the identifier (e.g., user ID from JWT) - Identifier loads the user from the database (or other source) - This separation allows you to mix and match authentication strategies and user sources</p> <p>When do you need a custom Identifier? - Only if your user-fetching logic is different from the default (e.g., you want to look up by email instead of ID, or fetch from an API) - Most of the time, the default identifier is sufficient\u2014even for JWT authentication</p> <p>Why this separation? - Encourages single responsibility and testability - Makes it easy to add new authentication methods without rewriting user lookup logic - Enables advanced scenarios (multi-tenancy, external user stores, etc.)</p> <p>Below we document in detail how to define your own custom authenticators and identifiers as required.</p>"},{"location":"custom-auth/#authenticators","title":"Authenticators","text":"<p>Authenticators are classes that extend <code>Lightpack\\Auth\\AbstractAuthenticator</code> class. </p> <p>These classes are responsible for authenticating a request. You can create your own authenticator by extending this class. For example:</p> <pre><code>class JwtAuthenticator extends AbstractAuthenticator\n{\n    public function verify(): ?Identity\n    {\n        // custom auth logic goes here\n    }\n}\n</code></pre> <p>The <code>verify()</code> method should return an instance of \\Lightpack\\Auth\\Identity (or <code>null</code> if authentication fails). </p> <p>To use your custom authenticator, you should register it using the <code>extend()</code> method. For example, in your login controller:</p> <pre><code>class LoginController\n{\n    public function authenticate()\n    {\n        // specify authenticator to use\n        auth()-&gt;extend('jwt', JwtAuthenticator::class);\n\n        return auth()-&gt;login();\n    }\n}\n</code></pre>"},{"location":"custom-auth/#identifiers","title":"Identifiers","text":"<p>Identifiers are classes that implement <code>Lightpack\\Auth\\Identifier</code> interface.</p> <p>These classes are responsible for fetching users and they act as user repository or user data service providers. You can create your own identifier by implementing this interface. For example:</p> <pre><code>class CustomIdentifier implements Identifier\n{\n    public function findById($id): ?Identity\n    {\n        // custom logic to fetch user by id\n    }\n\n    public function findByRememberToken($id, string $token): ?Identity\n    {\n        // fetch user with matching remember_me token\n    }\n\n    public function findByCredentials(array $credentials): ?Identity\n    {\n        // fetch user by username/password credentials\n    }\n\n    public function updateLogin($id, array $fields)\n    {\n        // update login fields \n    }\n}\n</code></pre>"},{"location":"custom-auth/#configuration","title":"Configuration","text":"<p>Now the final step is to configure your custom identifier. Add a new key in your <code>config/auth.php</code> file with a value that identifies your authentication provider:</p> <pre><code>&lt;?php\n\nreturn [\n    'auth' =&gt; [\n        'default' =&gt; [\n            // ...\n        ],\n        'custom' =&gt; [\n            'identifier' =&gt; CustomIdentifier::class,\n        ],\n    ]\n];\n</code></pre> <p>To use your custom provider in a controller or any part of your app, simply call <code>auth('custom')</code> to switch to your provider for that call chain:</p> <pre><code>&lt;?php\n\nnamespace App\\Controllers;\n\nclass LoginController\n{\n    public function authenticate()\n    {\n        return auth('custom')-&gt;login();\n    }\n}\n</code></pre>"},{"location":"custom-auth/#quick-summary-table","title":"Quick Summary Table","text":"Task How to do it Register authenticator <code>auth()-&gt;extend('jwt', JwtAuthenticator::class);</code> Use custom provider <code>auth('custom')-&gt;login();</code> Register identifier Add to <code>config/auth.php</code> under <code>'custom'</code>"},{"location":"db-connection/","title":"Connecting to a Database","text":"<p>Lightpack aims to provide a performant thin layer of abstraction for easing working with relational database systems. Currently it supports PDO adapters for <code>MySQL/MariaDB</code>.</p>"},{"location":"db-connection/#configuration","title":"Configuration","text":"<p>Before you get set with a databse connection, you need to configure database credentials. </p> <p>You can set your database credentials in the environment configuration file.</p> <pre><code>DB_HOST=localhost\nDB_PORT=3306\nDB_NAME=mydb\nDB_USER=root\nDB_PSWD=password\n</code></pre> <p>Now you can get a MySQL database connection by simply calling <code>db()</code> function.</p>"},{"location":"db-connection/#raw-queries","title":"Raw Queries","text":"<p>Tip: Once you have a database connection, you can use the full power of the PHP PDO APIs.</p> <p>You can execute raw SQL queries using the <code>query()</code> method. This always returns a <code>PDOStatement</code> object, so you can fetch rows, columns, etc.</p> <pre><code>// Select with no parameters\n$stmt = db()-&gt;query('SELECT * FROM products WHERE id = 23');\n$row = $stmt-&gt;fetch();\n</code></pre> <p>Warning: Always use parameter binding to prevent SQL injection! Pass values as the second argument (positional or named):</p> <pre><code>// Positional parameters\n$stmt = db()-&gt;query('SELECT * FROM products WHERE price &gt; ?', [500]);\n\n// Named parameters\n$stmt = db()-&gt;query('SELECT * FROM products WHERE id = :id', [':id' =&gt; 23]);\n</code></pre> <p>You can also execute insert and update queries safely:</p> <pre><code>// Insert\n$stmt = db()-&gt;query('INSERT INTO products (name) VALUES (?)', ['Blue Denim']);\n\n// Update\n$stmt = db()-&gt;query('UPDATE articles SET status = ?', ['active']);\n</code></pre> <p>Note: The <code>query()</code> method returns a <code>PDOStatement</code> for all query types. Use PDO methods like <code>fetch()</code>, <code>fetchAll()</code>, or <code>rowCount()</code> as needed.</p>"},{"location":"db-connection/#query-logging","title":"Query Logging","text":"<p>Tip: Query logging helps you debug and optimize your database usage by recording every SQL statement executed during a request.</p> <p>Query logging is only enabled when <code>APP_DEBUG=true</code> in your environment.</p> <p>To retrieve all query logs as an array:</p> <pre><code>$logs = db()-&gt;getQueryLogs();\n</code></pre> <p>To print all query logs (pretty-prints to output):</p> <pre><code>db()-&gt;printQueryLogs();\n</code></pre> <p>To clear the query logs (useful in tests or long-running scripts):</p> <pre><code>db()-&gt;clearQueryLogs();\n</code></pre> <p>Note: Query logs contain both the SQL statements and their parameter bindings. This is invaluable for debugging complex issues or performance bottlenecks.</p>"},{"location":"db-connection/#transactions","title":"Transactions","text":"<p>Transactions can be managed manually or with a convenient closure-based API.</p>"},{"location":"db-connection/#manual-transaction-control","title":"Manual Transaction Control","text":"<p>Start a transaction:</p> <pre><code>db()-&gt;begin();\n</code></pre> <p>Commit the transaction:</p> <pre><code>db()-&gt;commit();\n</code></pre> <p>Rollback the transaction:</p> <pre><code>db()-&gt;rollback();\n</code></pre>"},{"location":"db-connection/#closure-based-transactions-recommended","title":"Closure-Based Transactions (Recommended)","text":"<p>The easiest and safest way to run multiple queries atomically is with a closure:</p> <pre><code>db()-&gt;transaction(function() {\n    db()-&gt;query('INSERT INTO products (name) VALUES (?)', ['T-shirt']);\n    db()-&gt;query('UPDATE users SET points = points - 10 WHERE id = ?', [1]);\n});\n</code></pre> <ul> <li>If the closure throws an exception, the transaction is automatically rolled back.</li> <li>If it completes, the transaction is committed.</li> </ul> <p>Tip: You can return a value from the closure: </p> <pre><code>$id = db()-&gt;transaction(function() {\n    db()-&gt;query('INSERT INTO products (name) VALUES (?)', ['Sneakers']);\n    return db()-&gt;lastInsertId();\n});\n</code></pre>"},{"location":"db-query-builder/","title":"Query Builder","text":"<p>While you can definitely write raw SQL queries, Lightpack does come with a fluent query builder that helps you build SQL queries programatically.</p> <p>It also helps you protect against SQL injection attacks by properly binding query parameters.</p>"},{"location":"db-query-builder/#getting-started","title":"Getting Started","text":"<p>Call the <code>table()</code> method to get an instance of the query builder for the database connection.</p> <p>For example, this will create a query builder object for <code>products</code> table. </p> <pre><code>$products = db()-&gt;table('products');\n</code></pre> <p>Now you can start building and executing queries as documented below.</p>"},{"location":"db-query-builder/#fetch-all","title":"Fetch all","text":"<p>Call the <code>all()</code> method to retrieve all the rows in a table.</p> <pre><code>// SELECT * FROM products\n$products-&gt;all();\n</code></pre>"},{"location":"db-query-builder/#fetch-one","title":"Fetch one","text":"<p>To retrieve only a single record, call <code>one()</code> method instead.</p> <pre><code>// SELECT * FROM products LIMIT 1\n$products-&gt;one();\n</code></pre>"},{"location":"db-query-builder/#fetch-column","title":"Fetch column","text":"<p>To retrieve a specific column value from a record:</p> <pre><code>// SELECT name FROM products LIMIT 1\n$products-&gt;column('name');\n</code></pre>"},{"location":"db-query-builder/#select","title":"Select","text":"<p>You can specify table columns you need.</p> <pre><code>// SELECT id, name FROM products\n$products-&gt;select('id', 'name')-&gt;all();\n</code></pre> <pre><code>// SELECT id AS product_id, name FROM products\n$products-&gt;select('id AS product_id', 'name')-&gt;all();\n</code></pre> <pre><code>// SELECT count(*) as total_products FROM products\n$products-&gt;select('count(*) AS total_products')-&gt;all();\n</code></pre>"},{"location":"db-query-builder/#alias","title":"Alias","text":"<p>You can alias a table name using <code>alias()</code> method.</p> <pre><code>// SELECT * FROM products AS p\n$products-&gt;alias('p')-&gt;all();\n</code></pre>"},{"location":"db-query-builder/#distinct","title":"Distinct","text":"<p>You can select distinct rows too.</p> <pre><code>// SELECT DISTINCT name FROM products\n$products-&gt;select('name')-&gt;distinct()-&gt;all();\n</code></pre>"},{"location":"db-query-builder/#where","title":"Where","text":"<p>You can narrow result set using where clauses.</p> <pre><code>// SELECT * FROM products WHERE id = ?\n$products-&gt;where('id', '=', 2)-&gt;all();\n\n// SELECT * FROM products WHERE id &gt; ?\n$products-&gt;where('id', '&gt;', 2)-&gt;all();\n\n// SELECT * FROM products WHERE id &gt; ? AND color = ?\n$products-&gt;where('id', '&gt;', 2)-&gt;where('color', '=', '#000')-&gt;all();\n\n// SELECT * FROM products WHERE id &gt; ? OR color = ?\n$products-&gt;where('id', '&gt;', 2)-&gt;orWhere('color', '=', '#000')-&gt;all();\n</code></pre>"},{"location":"db-query-builder/#where-in","title":"Where in","text":"<p>Note: The SQL generated uses parentheses: <code>IN (?, ?, ?)</code>. If you pass an empty array to <code>whereIn</code>, the condition will always be false. If you pass an empty array to <code>whereNotIn</code>, the condition will always be true. You can also pass a closure for subqueries.</p> <pre><code>// SELECT * FROM products WHERE id IN (?, ?, ?)\n$products-&gt;whereIn('id', [23, 24, 25])-&gt;all();\n\n// SELECT * FROM products WHERE id IN (?, ?, ?) OR color IN (?, ?)\n$products-&gt;whereIn('id', [23, 24, 25])-&gt;orWhereIn('color', ['#000', '#FFF'])-&gt;all();\n\n// SELECT * FROM products WHERE id NOT IN (?, ?, ?)\n$products-&gt;whereNotIn('id', [23, 24, 25])-&gt;all();\n\n// SELECT * FROM products WHERE id NOT IN (?, ?, ?) OR color NOT IN (?, ?)\n$products-&gt;whereNotIn('id', [23, 24, 25])-&gt;orWhereNotIn('color', ['#000', '#FFF'])-&gt;all();\n\n// Subquery support:\n$products-&gt;whereIn('size', function($q) {\n    $q-&gt;from('sizes')-&gt;select('id')-&gt;where('size', '=', 'XL');\n})-&gt;all();\n</code></pre>"},{"location":"db-query-builder/#where-null","title":"Where null","text":"<pre><code>// SELECT * FROM products WHERE owner IS NULL\n$products-&gt;whereNull('owner')-&gt;all();\n\n// SELECT * FROM products WHERE owner IS NOT NULL\n$products-&gt;whereNotNull('owner')-&gt;all();\n\n// SELECT * FROM products WHERE owner IS NULL AND weight IS NULL\n$products-&gt;whereNull('owner')-&gt;whereNull('weight')-&gt;all();\n\n// SELECT * FROM products WHERE owner IS NULL OR weight IS NULL\n$products-&gt;whereNull('owner')-&gt;orWhereNull('weight')-&gt;all();\n\n// SELECT * FROM products WHERE owner IS NULL OR weight IS NOT NULL\n$products-&gt;whereNull('owner')-&gt;orWhereNotNull('weight')-&gt;all();\n</code></pre>"},{"location":"db-query-builder/#where-between","title":"Where between","text":"<p>Note: You must provide exactly two values for the between clause, e.g. <code>[min, max]</code>.</p> <pre><code>// SELECT * FROM products WHERE price BETWEEN ? AND ?\n$products-&gt;whereBetween('price', [10, 20]);\n</code></pre> <pre><code>// SELECT * FROM products WHERE price NOT BETWEEN ? AND ?\n$products-&gt;whereNotBetween('price', [10, 20]);\n</code></pre> <pre><code>// SELECT * FROM products WHERE price BETWEEN ? AND ? OR size BETWEEN ? AND ?\n$products-&gt;whereBetween('price', [10, 20])-&gt;orWhereBetween('size', ['M', 'L']);\n</code></pre> <pre><code>// SELECT * FROM products WHERE price NOT BETWEEN ? AND ? OR size NOT BETWEEN ? AND ?\n$products-&gt;whereNotBetween('price', [10, 20])-&gt;orWhereNotBetween('size', ['M', 'L']);\n</code></pre>"},{"location":"db-query-builder/#logical-grouping","title":"Logical Grouping","text":"<p>You can group <code>where</code> conditions logically by passing a callback. This callback will recieve an instance of query builder.</p> <pre><code>// SELECT * FROM products WHERE (color = ? OR size = ?)\n$products-&gt;where(function($q) {\n    $q-&gt;where('color', '=', '#000')-&gt;orWhere('size', '=', 'XL');\n})-&gt;all();\n</code></pre> <pre><code>// SELECT * FROM products WHERE id = ? AND (color = ? OR color = ?)\n$products-&gt;where('id', '=', 1)-&gt;where(function($q) {\n    $q-&gt;where('color', '=', '#000')-&gt;orWhere('color', '=', '#FFF');\n})-&gt;all();\n</code></pre>"},{"location":"db-query-builder/#subqueries","title":"Subqueries","text":"<p>You can specify subqueries as callback functions in <code>where</code> clauses.</p> <pre><code>// SELECT * FROM products WHERE size IN (SELECT id FROM sizes WHERE size = ?)\n$products-&gt;whereIn('size', function($q) {\n    $q-&gt;from('sizes')-&gt;select('id')-&gt;where('size', '=', 'XL');\n})-&gt;all();\n</code></pre>"},{"location":"db-query-builder/#where-exists","title":"Where exists","text":"<p>To specify <code>WHERE EXISTS</code> subquery, use <code>whereExists()</code> method.</p> <pre><code>// SELECT * FROM products WHERE EXISTS (SELECT id FROM sizes WHERE size = ?)';\n$products-&gt;whereExists(function($q) {\n    $q-&gt;from('sizes')-&gt;select('id')-&gt;where('size', '=', 'XL');\n});\n</code></pre> <p>To specify <code>WHERE NOT EXISTS</code> subquery, use <code>whereNotExists()</code> method.</p> <pre><code>// SELECT * FROM products WHERE NOT EXISTS (SELECT id FROM sizes WHERE size = ?)';\n$products-&gt;whereNotExists(function($q) {\n    $q-&gt;from('sizes')-&gt;select('id')-&gt;where('size', '=', 'XL');\n});\n</code></pre>"},{"location":"db-query-builder/#raw-queries","title":"Raw queries","text":"<p>Sometimes it's handy to write complex <code>where</code> clauses using raw query strings. For such cases, use <code>whereRaw()</code> and <code>orWhereRaw()</code> methods.</p> <pre><code>// SELECT * FROM products WHERE color = '#000' AND size = 'XL';\n$products-&gt;whereRaw(\"color = '#000' AND size = 'XL'\");\n</code></pre> <p>To protect raw where queries against SQL injection attacks, you can pass an array of parameters as the second argument.</p> <pre><code>// SELECT * FROM products WHERE color = ? AND size = ?';\n$products-&gt;whereRaw('color = ? AND size = ?', ['#000', 'XL']);\n</code></pre> <pre><code>// SELECT * FROM products WHERE color = ? OR status = 'active'\";\n$products-&gt;where('color', '=', '#000')-&gt;orWhereRaw(\"status = 'active'\");\n</code></pre>"},{"location":"db-query-builder/#order-by","title":"Order By","text":"<p>You can specify order of result set.</p> <pre><code>// SELECT id, name FROM products ORDER BY id ASC\n$products-&gt;select('id', 'name')-&gt;orderBy('id')-&gt;all();\n\n// SELECT id, name FROM products ORDER BY id DESC\n$products-&gt;select('id', 'name')-&gt;orderBy('id', 'DESC')-&gt;all();\n\n// SELECT id, name FROM products ORDER BY name DESC, id DESC\n$products-&gt;select('id', 'name')-&gt;orderBy('name', 'DESC')-&gt;orderBy('id', 'DESC')-&gt;all();\n</code></pre>"},{"location":"db-query-builder/#group-by","title":"Group By","text":"<p>You can group rows together.</p> <pre><code>// SELECT * FROM products GROUP BY color\n$products-&gt;groupBy('color')-&gt;all();\n</code></pre> <pre><code>// SELECT * FROM products GROUP BY color, size\n$products-&gt;groupBy('color', 'size')-&gt;all();\n</code></pre>"},{"location":"db-query-builder/#limit","title":"Limit","text":"<pre><code>// SELECT * FROM products LIMIT 10\n$products-&gt;limit(10)-&gt;all();\n</code></pre>"},{"location":"db-query-builder/#offset","title":"Offset","text":"<pre><code>// SELECT * FROM products LIMIT 10 OFFSET 2\n$products-&gt;limit(10)-&gt;offset(2)-&gt;all();\n</code></pre>"},{"location":"db-query-builder/#paginate","title":"Paginate","text":"<p>Use <code>paginate()</code> method to fetch the records page wise. </p> <p>So if the request URL is <code>http://domain.com?page=3</code>,</p> <pre><code>// SELECT * FROM products LIMIT 10 OFFSET 20\n$rows = $products-&gt;paginate(10);\n</code></pre> <p>By default it will try to look for <code>page</code> query parameter from the URL string. But, you can also pass the current page value manually as second parameter. For example, following query will paginate the result with <code>10</code> results for <code>3rd</code> page.</p> <pre><code>// SELECT * FROM products LIMIT 10 OFFSET 20\n$rows = $products-&gt;paginate(10, 3);\n</code></pre> <p>Now you can iterate the result as an array.</p> <pre><code>foreach($rows as $product) {\n    $product-&gt;name;\n    $product-&gt;color;\n}\n</code></pre>"},{"location":"db-query-builder/#count","title":"Count","text":"<p>This methods returns the total number of rows in the table.</p> <pre><code>// SELECT count(*) AS num FROM products\n$products-&gt;count();\n\n// SELECT count(* AS num FROM products WHERE price &gt; 200\n$products-&gt;where('price', '&gt;', 200)-&gt;count();\n</code></pre>"},{"location":"db-query-builder/#joins","title":"Joins","text":"<p>You can also join multiple tables.</p> <pre><code>// SELECT * FROM products INNER JOIN options ON products.id = options.product_id\n$products-&gt;join('options', 'products.id', 'options.product_id')-&gt;all();\n\n// SELECT * FROM products LEFT JOIN options ON products.id = options.product_id\n$products-&gt;leftJoin('options', 'products.id', 'options.product_id')-&gt;all();\n\n// SELECT * FROM products RIGHT JOIN options ON products.id = options.product_id\n$products-&gt;rightJoin('options', 'products.id', 'options.product_id')-&gt;all();\n\n// SELECT products.*, options.name AS oname FROM products INNER JOIN options ON products.id = options.product_id\n$products-&gt;select('products.*', 'options.name AS oname')-&gt;join('options', 'products.id', 'options.product_id')-&gt;all();\n</code></pre>"},{"location":"db-query-builder/#insert","title":"Insert","text":"<p>Use <code>insert()</code> method to insert a new record. The method returns the result of the query execution (not the inserted ID).</p> <pre><code>// INSERT INTO products (name, color) VALUES (?, ?)\n$products-&gt;insert([\n    'name' =&gt; 'Product 4',\n    'color' =&gt; '#CCC',\n]);\n</code></pre> <p>Note: To get the last inserted auto-incremented ID, use the <code>lastInsertId()</code> method after insert.</p>"},{"location":"db-query-builder/#get-last-inserted-id","title":"Get Last Inserted ID","text":"<p>After performing an insert, you can retrieve the last auto-incremented primary key value using the <code>lastInsertId()</code> method. This is useful for working with records that use auto-incrementing IDs.</p> <pre><code>$products-&gt;insert([\n    'name' =&gt; 'Product 4',\n    'color' =&gt; '#CCC',\n]);\n\n$lastId = $products-&gt;lastInsertId(); // Gets the last inserted ID\n</code></pre>"},{"location":"db-query-builder/#bulk-insert","title":"Bulk Insert","text":"<p>To insert multiple records, simply pass an array of arrays to the <code>insert()</code> method:</p> <pre><code>$products-&gt;insert([\n    ['name' =&gt; 'Product 1', 'color' =&gt; '#CCC'],\n    ['name' =&gt; 'Product 2', 'color' =&gt; '#DDD'],\n    ['name' =&gt; 'Product 3', 'color' =&gt; '#EEE'],\n]);\n</code></pre> <p>Note: There is no <code>bulkInsert()</code> method. Use <code>insert()</code> for both single and multiple records.</p>"},{"location":"db-query-builder/#update","title":"Update","text":"<p>Use <code>update()</code> method to modify an existing record.</p> <pre><code>// UPDATE products SET name = ?, color = ? WHERE id = 23\n$products-&gt;where('id', '=', 23)-&gt;update([\n    'name' =&gt; 'Product 4',\n    'color' =&gt; '#CCC',\n]);\n</code></pre>"},{"location":"db-query-builder/#delete","title":"Delete","text":"<p>Use <code>delete()</code> method to delete an existing record.</p> <pre><code>// DELETE FROM products WHERE id = 23\n$products-&gt;where('id', '=', 23)-&gt;delete();\n</code></pre>"},{"location":"db-query-builder/#insert-ignore","title":"Insert Ignore","text":"<p>Insert a record, ignoring errors (like duplicate keys):</p> <pre><code>$products-&gt;insertIgnore([\n    'name' =&gt; 'Product 4',\n    'color' =&gt; '#CCC',\n]);\n</code></pre>"},{"location":"db-query-builder/#upsert-insert-or-update","title":"Upsert (Insert or Update)","text":"<p>Insert or update records using MySQL's ON DUPLICATE KEY UPDATE:</p> <pre><code>$products-&gt;upsert(['id' =&gt; 1, 'name' =&gt; 'New Name']);\n</code></pre> <p>You can specify which columns to update:</p> <pre><code>$products-&gt;upsert(['id' =&gt; 1, 'name' =&gt; 'New Name'], ['name']);\n</code></pre>"},{"location":"db-query-builder/#tosql","title":"toSql","text":"<p>To inspect the generated <code>SQL</code> query as string, use <code>toSql()</code> method:</p> <pre><code>$products-&gt;toSql(); // SELECT * FROM products\n</code></pre> <p>Note that when you call <code>toSql()</code>, you cannot use methods that execute the query. For example, this is wrong to do:</p> <pre><code>$products-&gt;all()-&gt;toSql(); // Error\n$products-&gt;one()-&gt;toSql(); // Error\n$products-&gt;where('id', '=', 23)-&gt;delete()-&gt;toSql(); // Error\n</code></pre> <p>This is because those methods actually execute the <code>SQL</code> query. So calling <code>toSql()</code> will result in error.</p>"},{"location":"db-query-builder/#raw-select-expressions","title":"Raw Select Expressions","text":"<p>If you need to select expressions or use SQL functions, use <code>selectRaw()</code>:</p> <pre><code>// SELECT id, SUM(score) AS total FROM products\n$products-&gt;select('id')-&gt;selectRaw('SUM(score) AS total')-&gt;groupBy('id')-&gt;all();\n</code></pre> <p>You can pass bindings as the second argument for safety:</p> <pre><code>$products-&gt;selectRaw('SUM(score) &gt; ? AS high', [100]);\n</code></pre>"},{"location":"db-query-builder/#having-clauses","title":"HAVING Clauses","text":"<p>You can filter groups after aggregation using <code>having()</code>, <code>orHaving()</code>, <code>havingRaw()</code>, and <code>orHavingRaw()</code>:</p> <pre><code>// SELECT category, COUNT(*) FROM products GROUP BY category HAVING COUNT(*) &gt; 5\n$products-&gt;select('category')-&gt;selectRaw('COUNT(*)')-&gt;groupBy('category')-&gt;having('COUNT(*)', '&gt;', 5)-&gt;all();\n</code></pre> <p>For more complex conditions, use raw SQL:</p> <pre><code>$products-&gt;havingRaw('SUM(score) &gt; ?', [100]);\n</code></pre>"},{"location":"db-query-builder/#row-locking","title":"Row Locking","text":"<p>You can lock rows for update using <code>forUpdate()</code>, or skip locked rows with <code>skipLocked()</code>:</p> <pre><code>$products-&gt;where('stock', '&gt;', 0)-&gt;forUpdate()-&gt;all();\n$products-&gt;where('stock', '&gt;', 0)-&gt;forUpdate()-&gt;skipLocked()-&gt;all();\n</code></pre>"},{"location":"db-query-builder/#full-text-search","title":"Full-Text Search","text":"<p>To perform full-text search on indexed columns:</p> <pre><code>// WHERE MATCH(title, body) AGAINST ('foo bar' IN BOOLEAN MODE)\n$products-&gt;search('foo bar', ['title', 'body'])-&gt;all();\n</code></pre>"},{"location":"db-query-builder/#boolean-shortcuts","title":"Boolean Shortcuts","text":"<p>You can quickly filter on boolean columns:</p> <pre><code>$products-&gt;whereTrue('is_active')-&gt;all();\n$products-&gt;orWhereFalse('is_deleted')-&gt;all();\n</code></pre>"},{"location":"db-query-builder/#conditional-query-building","title":"Conditional Query Building","text":"<p>Add conditions only if a value is present:</p> <pre><code>$products-&gt;whereIf($userId, 'user_id', '=', $userId);\n</code></pre> <p>Or, run a callback if a condition is true:</p> <pre><code>$products-&gt;when($isAdmin, function($q) {\n    $q-&gt;where('is_admin', true);\n});\n</code></pre>"},{"location":"db-query-builder/#incrementdecrement","title":"Increment/Decrement","text":"<p>Atomically increase or decrease a column value:</p> <pre><code>$products-&gt;where('id', 1)-&gt;increment('stock', 5);\n$products-&gt;where('id', 1)-&gt;decrement('stock', 2);\n</code></pre>"},{"location":"db-query-builder/#chunked-processing","title":"Chunked Processing","text":"<p>Process large datasets in batches:</p> <pre><code>$products-&gt;chunk(100, function($chunk) {\n    foreach ($chunk as $product) {\n        // Process each product\n    }\n});\n</code></pre>"},{"location":"db-query-builder/#aggregates","title":"Aggregates","text":"<p>You can use the following methods for aggregate queries:</p> <pre><code>$products-&gt;sum('price');\n$products-&gt;avg('rating');\n$products-&gt;min('created_at');\n$products-&gt;max('updated_at');\n$products-&gt;countBy('category'); // returns an array of objects with counts for each group\n</code></pre>"},{"location":"eager-loading/","title":"Eager Loading","text":"<p>Once again let us consider these three tables:</p> products id title options id product_id name color seo id product_id meta_title meta_description <p>The association between these entities is:</p> <ul> <li>A product has many options.</li> <li>A product has one seo details.</li> </ul> <pre><code>class Product extends Model\n{\n    public function options()\n    {\n        return $this-&gt;hasMany(Option::class, 'product_id');\n    }\n\n    public function seo()\n    {\n        return $this-&gt;hasOne(Seo::class, 'product_id');\n    }\n}\n</code></pre> <p>Now suppose we have 20 products and correspondingly 20 seo records. To fetch <code>products</code> along with their <code>seo</code> details, you can simply loop each product:</p> <pre><code>$products = Product::query()-&gt;all();\n\nforeach($products as $product) {\n    echo $product-&gt;seo-&gt;meta_title;\n}\n</code></pre> <p>The problem with above approach is that it will fire one query for fetching all <code>products</code> and 20 extra queries per product to fetch <code>seo</code> data. This will result in a total of <code>21 queries</code> which can be expensive.</p> <p>In raw SQL terms, following queries will be executed</p> <pre><code>-- 1 query to fetch all products\nSELECT * FROM products;\n\n-- 20 queries (one per product) to fetch seo details\nSELECT * FROM seo WHERE product_id = 1;\nSELECT * FROM seo WHERE product_id = 2;\nSELECT * FROM seo WHERE product_id = 3;\n-- ...and so on, up to product_id = 20\nSELECT * FROM seo WHERE product_id = 20;\n</code></pre> <p>This is known as the classic <code>N+1</code> queries problem. </p> <p>For every product, the ORM issues an additional query to fetch its related SEO record\u2014quickly adding up to many unnecessary database calls and poor performance.</p> <p>Eager loading is a technique designed to solve this problem. Instead of fetching related data one record at a time, eager loading retrieves all the necessary related records in as few queries as possible\u2014usually just one extra query, no matter how many products you have. This dramatically reduces database load and speeds up your application, especially when displaying lists of records with their associations.</p> <p>In Lightpack ORM, eager loading is simple and explicit, empowering you to write efficient, high-performance code with minimal effort.</p>"},{"location":"eager-loading/#single-ended-associations","title":"Single-ended Associations","text":"<p>To eager load single-ended associations aka <code>1:1</code> mapping, use <code>with()</code> method:</p> <pre><code>$products = Product::query()-&gt;with('seo')-&gt;all();\n</code></pre> <p>This will fetch all products and corresponding seo records with just two queries:</p> <pre><code>select * from products;\n\nselect * from seo where product_id in (1,2,3,4,5,...,N)\n</code></pre> <p>So you can loop each product and access its seo data:</p> <pre><code>foreach($products as $product) {\n    echo $product-&gt;seo-&gt;meta_title;\n}\n</code></pre>"},{"location":"eager-loading/#one-to-many-associations","title":"One-to-many Associations","text":"<p>To eager load <code>1:N</code> associations, use the same <code>with</code> method passing it the associated method name as string:</p> <pre><code>$products = Product::query()-&gt;with('options')-&gt;all();\n</code></pre>"},{"location":"eager-loading/#loading-multiple-associations","title":"Loading multiple associations","text":"<p>To eager load multiple associations, pass associated method names in the <code>with</code> method:</p> <pre><code>$products = Product::query()-&gt;with('seo', 'options')-&gt;all();\n</code></pre>"},{"location":"eager-loading/#counting-associations","title":"Counting associations","text":"<p>To count the associated relations, use <code>withCount()</code> method:</p> <pre><code>$categories = Category::query()-&gt;withCount('products')-&gt;all();\n</code></pre> <p>How do you access the count?</p> <p>When you use <code>withCount()</code> or <code>loadCount()</code> in Lightpack, the ORM automatically adds a <code>_count</code> suffix to the relation property. For example, after calling <code>withCount('comments')</code>, you can access the count using <code>$post-&gt;comments_count</code>. This naming convention keeps your model properties clear and intention-revealing.</p> <p>For example:</p> <pre><code>$categories = Category::query()-&gt;withCount('products')-&gt;all();\n\nforeach($categories as $category) {\n    echo $category-&gt;products_count;\n}\n</code></pre>"},{"location":"eager-loading/#quick-reference-eager-loading-methods","title":"Quick Reference: Eager Loading Methods","text":"Use When... For fetching... Example Usage <code>with()</code> Related models <code>with('seo')</code>, <code>with('options')</code> <code>withCount()</code> Count of relations <code>withCount('products')</code> <code>load()</code> (on collection) Related models <code>$products-&gt;load('seo')</code> <code>loadCount()</code> (on collection) Count of relations <code>$products-&gt;loadCount('options')</code> <ul> <li>Use <code>with()</code> and <code>withCount()</code> when building your initial query.</li> <li>Use <code>load()</code> and <code>loadCount()</code> to eager load associations on an existing collection.</li> </ul>"},{"location":"eager-loading/#eager-loading-callbacks-filtering-related-data","title":"Eager Loading Callbacks: Filtering Related Data","text":"<p>You can pass a callback to <code>with()</code>, <code>withCount()</code>, <code>load()</code>, or <code>loadCount()</code> to apply conditions to the eager loaded relationship. The callback receives the query builder for the related model, letting you add any filters you need.</p> <pre><code>$projects = Project::query()-&gt;with(['tasks' =&gt; function($q) {\n    $q-&gt;where('status', '=', 'pending');\n}])-&gt;all();\n</code></pre> <p>Here, only tasks with status <code>pending</code> are eager loaded for each project.</p> <p>You can also nest callbacks for deeper relations:</p> <pre><code>$projects = Project::query()-&gt;with([\n    'tasks' =&gt; function($q) {\n        $q-&gt;where('status', '=', 'pending');\n        $q-&gt;with(['comments' =&gt; function($q) {\n            $q-&gt;where('status', '=', 'approved');\n        }]);\n    }\n])-&gt;all();\n</code></pre>"},{"location":"eager-loading/#chaining-and-composing-eager-loading-methods","title":"Chaining and Composing Eager Loading Methods","text":"<p>Lightpack ORM allows you to fluently chain eager loading methods with other query builder methods for expressive, composable queries. For example:</p> <pre><code>$projects = Project::query()\n    -&gt;with('manager')\n    -&gt;withCount('tasks')\n    -&gt;where('status', '=', 'active')\n    -&gt;orderBy('created_at', 'desc')\n    -&gt;all();\n</code></pre> <p>This query fetches all active projects, eager loads the manager, counts the tasks, orders by creation date, and returns the results\u2014all in a single, readable chain.</p>"},{"location":"eager-loading/#nested-eager-loading","title":"Nested Eager Loading","text":"<p>Suppose we have table <code>projects</code> with many <code>tasks</code> and each task can have many <code>comments</code>. We can eager load <code>projects</code> with their <code>tasks</code> and <code>comments</code> together:</p> <pre><code>$projects = Project::query()-&gt;with('tasks.comments')-&gt;all();\n</code></pre> <p>Note that such convinience can become a performance issue if there are too many <code>comments</code> for <code>tasks</code> for a given project.</p>"},{"location":"eager-loading/#conditional-eager-loading","title":"Conditional Eager Loading","text":"<p>You can restrict eager loading relations via <code>callback</code> functions. For example, to eager load all pending <code>tasks</code> for <code>projects</code>:</p> <pre><code>$projects = Project::query()-&gt;with(['tasks' =&gt; function($q) {\n    $q-&gt;where('status', '=', 'pending');\n})-&gt;all();\n</code></pre> <p>You can also restrict nested eager loading. For example. to eager load <code>projects</code> with pending <code>tasks</code> and approved <code>comments</code>:</p> <pre><code>$projects = Project::query()-&gt;with(['tasks' =&gt; function($q) {\n    // Load tasks with pending status\n    $q-&gt;where('status', '=', 'pending');\n\n    // Load comments with approved status\n    $q-&gt;with(['comments' =&gt; function($q) {\n        $q-&gt;where('status', =, 'approved');\n    }]);\n})-&gt;all();\n</code></pre> <p>Note: You can apply the same constraints on <code>withCount()</code> method too:</p> <pre><code>$projects = Project::query()-&gt;withCount(['tasks' =&gt; function($q) {\n    $q-&gt;where('status', '=', 'pending');\n})-&gt;all();\n</code></pre>"},{"location":"eager-loading/#deferred-eager-loading","title":"Deferred eager loading","text":"<p>Suppose that we have <code>100</code> records in products table. Eager loading <code>seo</code> and <code>options</code> for <code>100</code> products will be a huge performance miss.</p> <p>In such cases, you might be interested in paginating <code>products</code> and then eager load associated relations.</p> <pre><code>$products = Product::query()-&gt;paginate(10);\n</code></pre> <p>Once you have got the products, you can eager load its associated relations by calling <code>load()</code> and <code>loadCount()</code> methods on products.</p> <pre><code>$products-&gt;load('seo');\n$products-&gt;loadCount('options');\n</code></pre> <p>This will automatically populate <code>seo</code> data along with <code>options</code> count for each product in <code>$products</code> collection.</p> <pre><code>foreach($products as $product) {\n    $product-&gt;seo; \n    $product-&gt;options_count;\n}\n</code></pre> <p>Note: You can also chain <code>load()</code> and <code>loadCount()</code> methods together. For example:</p> <pre><code>$products = Product::query()-&gt;paginate(10);\n$products-&gt;load('seo')-&gt;loadCount('options');\n</code></pre> <p>Note: All the capabilities that <code>with()</code> and <code>withCount()</code> methods have also applies to <code>load()</code> and <code>loadCount()</code> methods.</p> <p>For example, you can pass provide callbacks to restric eager loading:</p> <pre><code>$products-&gt;load(['reviews' =&gt; function($q) {\n    $q-&gt;where('status', '=', 'approved');\n}]);\n</code></pre> <pre><code>$products-&gt;loadCount(['reviews' =&gt; function($q) {\n    $q-&gt;where('status', '=', 'approved');\n}]);\n</code></pre>"},{"location":"eager-loading/#eager-loading-polymorphic-parents-with-loadmorphs","title":"Eager Loading Polymorphic Parents with <code>loadMorphs</code>","text":"<p>When working with a collection of polymorphic models (e.g., a list of comments where each comment could belong to a different parent type), eager loading the parent models efficiently can be challenging. Lightpack ORM provides the <code>loadMorphs()</code> method to solve this elegantly.</p>"},{"location":"eager-loading/#why-use-loadmorphs","title":"Why use <code>loadMorphs()</code>?","text":"<p>If you have a collection of comments, each referencing a different parent type (Post, Video, etc.), calling <code>$comments-&gt;load('parent')</code> is not sufficient, because the ORM needs to know all possible parent types to perform efficient eager loading. <code>loadMorphs()</code> lets you specify the possible types so Lightpack can fetch all parents in as few queries as possible.</p>"},{"location":"eager-loading/#example-usage","title":"Example Usage","text":"<p>Suppose you fetch a set of comments:</p> <pre><code>$comments = Comment::query()-&gt;where('user_id', '=', 42)-&gt;all();\n</code></pre> <p>You can eager load their parents like this:</p> <pre><code>$comments-&gt;loadMorphs([\n    Post::class,\n    Video::class,\n    Photo::class,\n]);\n</code></pre> <p>Now, for each comment, <code>$comment-&gt;parent</code> will be the appropriate parent model instance, and all parents will have been loaded efficiently\u2014no N+1 problem!</p>"},{"location":"eager-loading/#best-practices-notes","title":"Best Practices &amp; Notes","text":"<ul> <li>Always specify all possible parent types for the morph relation.</li> <li>Use <code>loadMorphs</code> after fetching the collection (not on the query builder).</li> <li>This method is especially useful for API responses or UI screens showing polymorphic lists with their parents.</li> <li>If you omit a possible type, parents of that type will not be eager loaded and may trigger lazy loading (and N+1 queries) if accessed.</li> </ul>"},{"location":"eager-loading/#lazy-loading","title":"Lazy Loading","text":"<p>If you access a relation property that hasn't been loaded yet, Lightpack ORM will transparently execute a new query to fetch it. This aspect is know as lazy loading relationships.</p> <pre><code>$user = User::find(1); // No relations loaded\n$posts = $user-&gt;posts; // Triggers a query to fetch posts for this user\n</code></pre> <ul> <li>The first time you access <code>$user-&gt;posts</code>, Lightpack issues a query and caches the result on the model instance.</li> <li>Subsequent accesses to <code>$user-&gt;posts</code> use the cached data\u2014no additional queries are made.</li> </ul>"},{"location":"eager-loading/#tradeoffs-and-risks","title":"Tradeoffs and Risks","text":"<ul> <li>N+1 Query Problem: If you loop over a collection and access a relation on each item, you can easily trigger many queries:</li> </ul> <p>```php   $users = User::query()-&gt;all();</p> <p>foreach ($users as $user) {         $user-&gt;profile; // Triggers 1 profile query per user   }   ```</p> <p>This leads to poor performance and unpredictable database load.</p> <ul> <li> <p>Performance Unpredictability: Lazy loading can make it hard to know how many queries your code will run, especially as your data grows.</p> </li> <li> <p>Best Practice: Always prefer eager loading (<code>with()</code>, <code>load()</code>) for predictable, efficient queries. Use lazy loading only if you are certain the relation will be accessed infrequently or in non-performance-critical code (e.g., admin dashboards, prototypes).</p> </li> </ul>"},{"location":"eager-loading/#when-is-lazy-loading-acceptable","title":"When is Lazy Loading Acceptable?","text":"<ul> <li>For small datasets, prototyping, or admin tools where performance is not critical.</li> <li>When you explicitly whitelist certain relations using <code>allowedLazyRelations</code> in strict mode.</li> </ul>"},{"location":"eager-loading/#strict-mode-lazy-loading","title":"Strict Mode &amp; Lazy Loading","text":"<p>Preventing <code>N+1</code> query issues and ensuring predictable performance is a core principle in Lightpack ORM. While eager loading is the primary tool for fetching related data efficiently, Lightpack also offers strict mode for even greater safety and explicitness.</p> <p>Tip: For maximum safety against N+1 issues, enable strict mode on your models. See the section below for details.</p>"},{"location":"eager-loading/#what-is-strict-mode","title":"What is Strict Mode?","text":"<p>Strict mode prevents accidental lazy loading of relations. In strict mode, if you try to access a relation that was not eager loaded (via <code>with</code>, <code>load</code>, etc.), Lightpack will throw an exception\u2014unless that relation is explicitly whitelisted. This is crucial for API performance, large-scale applications, and when you want to guarantee predictable queries.</p>"},{"location":"eager-loading/#how-to-enable-strict-mode","title":"How to Enable Strict Mode","text":"<p>Enable strict mode by setting the following property on your model:</p> <pre><code>protected $strictMode = true;\n</code></pre> <p>Optionally, you can allow specific relations to be lazy loaded by whitelisting them:</p> <pre><code>protected $allowedLazyRelations = ['profile', 'roles'];\n</code></pre>"},{"location":"eager-loading/#how-it-works","title":"How It Works","text":"<ul> <li>Accessing a relation that was not eager loaded or whitelisted throws an exception.</li> <li>Only eager loaded relations or whitelisted <code>allowedLazyRelations</code> can be accessed without error.</li> <li>This ensures all relation access is explicit and safe for large-scale or API use.</li> </ul>"},{"location":"eager-loading/#example-strict-mode-in-action","title":"Example: Strict Mode in Action","text":"<pre><code>class User extends Model\n{\n    protected $strictMode = true;\n    protected $allowedLazyRelations = ['profile'];\n}\n\n// Eager loading\n$user = User::query()-&gt;with('roles')-&gt;one(); // OK\n$user-&gt;roles; // OK\n\n// Not eager loaded and not whitelisted\n$user = new User($id); // No eager load\n\n// Throws exception\n$user-&gt;roles;\n\n// Whitelisted lazy relation\n$user-&gt;profile; // OK\n</code></pre>"},{"location":"encryption-decryption-utils/","title":"Crypto","text":"<p>Lightpack\u2019s <code>Crypto</code> utility provides secure, easy-to-use methods for encryption, decryption, token generation, and hashing. It is designed for safe handling of sensitive data using modern cryptography standards.</p>"},{"location":"encryption-decryption-utils/#overview","title":"Overview","text":"<ul> <li>Encryption/Decryption: Securely encrypt and decrypt strings using AES-256-CBC and your app key.</li> <li>Token Generation: Generate unique, cryptographically secure tokens.</li> <li>Hashing: Generate HMAC-SHA256 hashes for data integrity or signatures.</li> <li>Provider/Container: Available via dependency injection and the global <code>crypto()</code> helper.</li> </ul>"},{"location":"encryption-decryption-utils/#configuration-usage","title":"Configuration &amp; Usage","text":""},{"location":"encryption-decryption-utils/#app-key-requirement","title":"App Key Requirement","text":"<p>Your <code>.env</code> file must have an <code>APP_KEY</code> set. The <code>CryptoProvider</code> will throw if missing.</p> <pre><code>APP_KEY=your-very-secret-key\n</code></pre>"},{"location":"encryption-decryption-utils/#accessing-the-utility","title":"Accessing the Utility","text":"<pre><code>use Lightpack\\Utils\\Crypto;\n\n$crypto = new Crypto($key); // Manual instantiation\n$crypto = crypto();         // Preferred: via container helper\n</code></pre>"},{"location":"encryption-decryption-utils/#encrypting-decrypting-data","title":"Encrypting &amp; Decrypting Data","text":"<pre><code>$encrypted = crypto()-&gt;encrypt('Sensitive data');\n$decrypted = crypto()-&gt;decrypt($encrypted); // 'Sensitive data'\n</code></pre> <ul> <li>Uses AES-256-CBC with a random IV per encryption.</li> <li>Output is base64-encoded; safe for storage and transport.</li> <li>Decryption returns the original string or <code>false</code> on failure.</li> <li>Each encryption produces a unique output (random IV).</li> </ul>"},{"location":"encryption-decryption-utils/#generating-tokens","title":"Generating Tokens","text":"<pre><code>$token = crypto()-&gt;token(); // 64-char secure token\n</code></pre> <ul> <li>Useful for CSRF, password resets, API keys, etc.</li> <li>Each token is unique and cryptographically secure.</li> </ul>"},{"location":"encryption-decryption-utils/#hashing-data","title":"Hashing Data","text":"<pre><code>$hash = crypto()-&gt;hash('my data');\n</code></pre> <ul> <li>Returns a SHA-256 HMAC hash using your app key.</li> <li>Use for signatures, integrity checks, or non-reversible data storage.</li> </ul>"},{"location":"encryption-decryption-utils/#helper-function","title":"Helper Function","text":"<p>You can use the global <code>crypto()</code> helper anywhere in your app:</p> <pre><code>crypto()-&gt;encrypt('secret');\ncrypto()-&gt;decrypt($encrypted);\ncrypto()-&gt;token();\ncrypto()-&gt;hash('data');\n</code></pre>"},{"location":"encryption-decryption-utils/#error-handling-security","title":"Error Handling &amp; Security","text":"<ul> <li>If <code>APP_KEY</code> is not set, an exception is thrown at service registration.</li> <li>All cryptographic operations use secure random bytes and modern algorithms.</li> <li>Never share your app key or use weak keys.</li> <li>Ensure you backup your secret key.</li> </ul>"},{"location":"environments/","title":"Environments","text":"<p>You may want to change how your application behaves on a production server than on a local development machine. For example, you should display all PHP errors when developing your app but you should turn off error display to end users when your application goes live.</p>"},{"location":"environments/#env","title":".env","text":"<p>Lightpack ships with a sample configuration file where some pre-defined environment configurations are available for your reference. </p> <p>Copy and paste the contents of <code>.env.example</code> file into <code>env.php</code> file in the same folder. There you can define as many environment configurations as you wish.</p> <p>You can also generate the .env file from command line itself.</p> <pre><code>php console create:env\n</code></pre> <p>You should not commit your environment specific config files to your version control system.</p>"},{"location":"environments/#get_env","title":"get_env()","text":"<p>To access environment configurations, call <code>get_env()</code> function.</p> <pre><code>get_env('APP_ENV', 'development');\n</code></pre> <p>This function takes two arguments. First is the <code>environment</code> variable name and second is the <code>default</code> value in case it does not find that environment variable.</p>"},{"location":"environments/#set_env","title":"set_env()","text":"<p>This function sets an environment variable.</p> <pre><code>set_env('APP_VERSION', 'v1.0');\n</code></pre>"},{"location":"events/","title":"Events","text":"<p>Lightpack provides events support in very friendly manner. For example,  sending account confirmation or payment due email both involve utilizing email features. So instead of hard coding email service provider reference in your controllers, you can notify your application components to act on behalf of email related events.</p> <p> You can use events to promote loose coupling and better code reuse of shareable components. </p>"},{"location":"events/#defining-listener","title":"Defining Listener","text":"<p>To use events in Lighpack, first create a listener. For example, here we create  a user event listener.</p> <pre><code>&lt;?php\n\nnamespace App\\Events;\n\nclass UserCreatedEvent\n{\n    public function handle()\n    {\n        // ...\n    }\n}\n</code></pre>"},{"location":"events/#configuring-listener","title":"Configuring Listener","text":"<p>Now configure this listener in <code>config/events.php</code> file.</p> <pre><code>&lt;?php\n\nreturn [\n    'user:created' =&gt; [\n        App\\Events\\UserCreatedEvent::class,\n    ]\n];\n</code></pre>"},{"location":"events/#notifying-listeners","title":"Notifying Listeners","text":"<p>Now anywhere you fire an event named <code>user:created</code>, will call <code>App\\Events\\UserCreatedEvent::handle()</code> method.</p> <pre><code>&lt;?php\n\nclass UserController\n{\n    public function index()\n    {\n        event()-&gt;fire('user:created');\n    }\n}\n</code></pre>"},{"location":"events/#passing-event-data","title":"Passing Event Data","text":"<p>You can pass any data as second argument to <code>fire()</code> method.</p> <pre><code>event()-&gt;fire('user:created', $user);\n</code></pre> <p>Now you can access the event data array in the <code>handle()</code> method of the listener.</p> <pre><code>public function handle(User $user)\n{\n    // ...\n}\n</code></pre>"},{"location":"factory/","title":"Factory","text":"<p>A factory in Lightpack is a dedicated class that encapsulates the logic for generating consistent, customizable arrays or model instances\u2014typically for testing, seeding, or rapid prototyping. Factories let you define default data structures, produce batches of fake or default data, and override fields as needed.</p>"},{"location":"factory/#why-use-factories","title":"Why Use Factories?","text":"<p>Factories are one of the most powerful tools for building reliable, maintainable applications\u2014especially when it comes to testing and prototyping. Here\u2019s why they matter in Lightpack:</p> <ul> <li>Eliminate Repetition: Without factories, every test or seed script would need to manually construct arrays or models\u2014over and over, with subtle inconsistencies and lots of boilerplate.</li> <li>Consistency Everywhere: Factories guarantee that your test data always follows the same structure and rules. Change it in one place, and every test, seeder, or script benefits instantly.</li> <li>Rapid Prototyping: Need 50 users, 100 products, or a complex data tree? Factories let you spin up realistic data in a single line, so you can focus on logic, not busywork.</li> <li>Safer Refactoring: When your data structure changes, update the factory\u2014not hundreds of scattered test cases.</li> <li>Batch Operations Made Easy: Factories make it trivial to generate large datasets for performance testing, UI demos, or stress tests.</li> <li>Override Only What Matters: Want to test an edge case? Override just one field\u2014no need to duplicate the entire data definition.</li> <li>Readable, Intentional Tests: Your tests and seeders become clear and expressive, showing intent (\u201ccreate a user with email X\u201d) instead of low-level details.</li> </ul>"},{"location":"factory/#factory-base-class","title":"Factory Base Class","text":"<p>You define a new factory class by extending <code>Factory</code> and implementing the <code>template()</code> method:</p> <pre><code>class UserFactory extends Factory\n{\n    protected function template(): array\n    {\n        $faker = new Faker();\n\n        return [\n            'name' =&gt; $faker-&gt;name(),\n            'email' =&gt; $faker-&gt;unique()-&gt;email(),\n            'address' =&gt; $faker-&gt;address(),\n            'created_at' =&gt; $faker-&gt;date('Y-m-d H:i:s'),\n        ];\n    }\n}\n</code></pre>"},{"location":"factory/#core-methods","title":"Core Methods","text":"<ul> <li><code>times(int $count)</code> \u2014 Specify how many entities to generate (fluent interface).</li> <li><code>make(array $overrides = [])</code> \u2014 Generate a single entity array, or a batch if <code>times()</code> was called.</li> <li>Field overrides: pass an array to <code>make()</code> to override default values.</li> </ul> <p>Examples:</p> <pre><code>// Generate a single user entity\n$user = (new UserFactory)-&gt;make();\n\n// Generate a batch of 3 user entities\n$users = (new UserFactory)-&gt;times(3)-&gt;make();\n\n// Generate a single user entity overriding email\n$user = (new UserFactory)-&gt;make([\n    'email' =&gt; 'custom@example.com'\n]);\n</code></pre>"},{"location":"factory/#modelfactory-for-persisted-models","title":"ModelFactory: For Persisted Models","text":"<p><code>ModelFactory</code> extends <code>Factory</code> and adds support for creating and saving model instances.</p> <ul> <li>Implement both <code>template()</code> (attributes) and <code>model()</code> (model class name).</li> <li>Use <code>save()</code> to create and persist a model or batch of models.</li> </ul> <p>In this example we create a <code>ProductFactory</code> class for <code>Product</code> model.</p> <pre><code>class ProductFactory extends ModelFactory\n{\n    protected function template(): array\n    {\n        return [\n            'sku' =&gt; 'DUMMY_1000',\n            'name' =&gt; 'Dummy Product',\n        ];\n    }\n    protected function model(): string\n    {\n        return Product::class;\n    }\n}\n</code></pre> <p>Usage</p> <pre><code>// Save a single model\n$model = (new ProductFactory)-&gt;save();\n\n// Save a batch of models with name override\n$models = (new ProductFactory)\n    -&gt;times(2)\n    -&gt;save(['name' =&gt; 'Batch Name']);\n</code></pre>"},{"location":"faker/","title":"Faker System","text":"<p>Lightpack's Faker provides a lighweight fake data generator for tests, seeding, and development.</p>"},{"location":"faker/#getting-started","title":"Getting Started","text":"<pre><code>use Lightpack\\Faker\\Faker;\n\n$faker = new Faker(); // Uses the default 'en' locale\n</code></pre>"},{"location":"faker/#basic-usage","title":"Basic Usage","text":"<pre><code>$name = $faker-&gt;name();         // 'John Smith'\n$email = $faker-&gt;email();       // 'johnsmith@example.com'\n$city = $faker-&gt;city();         // 'London'\n$sentence = $faker-&gt;sentence(); // 'Lorem ipsum dolor sit amet.'\n$uuid = $faker-&gt;uuid();         // 'e7b8...-...'\n</code></pre>"},{"location":"faker/#locale-system","title":"Locale System","text":"<p>Faker supports locale-based data via simple PHP arrays. You can: - Use built-in locales (e.g., <code>en</code>) - Provide your own locale file - Inject locale data as an array at runtime</p>"},{"location":"faker/#using-a-custom-locale-file","title":"Using a Custom Locale File","text":"<pre><code>$faker = new Faker('custom', '/path/to/custom-locale.php');\n</code></pre> <p>A locale file returns an array of data lists:</p> <pre><code>&lt;?php\nreturn [\n    'firstNames' =&gt; ['Jean'],\n    'lastNames' =&gt; ['Dupont'],\n    'domains' =&gt; ['monsite.fr'],\n    // ...\n];\n</code></pre>"},{"location":"faker/#injecting-locale-data-directly","title":"Injecting Locale Data Directly","text":"<pre><code>$faker = new Faker('custom');\n$faker-&gt;setLocaleData([\n    'firstNames' =&gt; ['Anna'],\n    'lastNames' =&gt; ['Smith'],\n    'domains' =&gt; ['example.test'],\n    // ...\n]);\n</code></pre>"},{"location":"faker/#faker-api-methods","title":"Faker API Methods","text":"<p>All methods are explicit, chainable, and deterministic (with seeding):</p>"},{"location":"faker/#identity-contact","title":"Identity &amp; Contact","text":"<ul> <li><code>name()</code> \u2014 Full name</li> <li><code>email()</code> \u2014 Email address</li> <li><code>username()</code> \u2014 Username</li> <li><code>phone()</code> \u2014 Phone number</li> <li><code>address()</code> \u2014 Full address</li> <li><code>city()</code>, <code>state()</code>, <code>country()</code> \u2014 Location fields</li> </ul>"},{"location":"faker/#business-commerce","title":"Business &amp; Commerce","text":"<ul> <li><code>company()</code> \u2014 Company name</li> <li><code>jobTitle()</code> \u2014 Job title</li> <li><code>productName()</code> \u2014 Product name</li> <li><code>price($min, $max, $currency)</code> \u2014 Price string</li> </ul>"},{"location":"faker/#internet-tech","title":"Internet &amp; Tech","text":"<ul> <li><code>url()</code> \u2014 URL</li> <li><code>ipv4()</code>, <code>ipv6()</code> \u2014 IP addresses</li> <li><code>hexColor()</code> \u2014 Color code</li> <li><code>uuid()</code> \u2014 RFC 4122 UUID</li> <li><code>slug($words)</code> \u2014 URL slug</li> </ul>"},{"location":"faker/#numbers-types","title":"Numbers &amp; Types","text":"<ul> <li><code>number($min, $max)</code> \u2014 Integer</li> <li><code>float($min, $max, $decimals)</code> \u2014 Float</li> <li><code>bool()</code> \u2014 Boolean</li> <li><code>enum($values)</code> \u2014 Random value from array</li> </ul>"},{"location":"faker/#text","title":"Text","text":"<ul> <li><code>sentence($words)</code> \u2014 Sentence</li> <li><code>paragraph($sentences)</code> \u2014 Paragraph</li> <li><code>words</code> (locale data) \u2014 Word list used internally by methods like <code>sentence()</code>, <code>paragraph()</code>, and <code>slug()</code>. Not a direct method, but can be customized in your locale.</li> </ul>"},{"location":"faker/#dates-time","title":"Dates &amp; Time","text":"<ul> <li><code>date($format)</code> \u2014 Date string</li> <li><code>dob($minAge, $maxAge)</code> \u2014 Date of birth</li> <li><code>age($min, $max)</code> \u2014 Age</li> </ul>"},{"location":"faker/#security-finance","title":"Security &amp; Finance","text":"<ul> <li><code>password($length)</code> \u2014 Password</li> <li><code>creditCardNumber()</code> \u2014 Card number (plausible, not valid)</li> <li><code>otp($digits)</code> \u2014 One-time code</li> </ul>"},{"location":"faker/#geo","title":"Geo","text":"<ul> <li><code>latitude()</code> \u2014 Latitude</li> <li><code>longitude()</code> \u2014 Longitude</li> <li><code>zipCode()</code> \u2014 Zip/postal code</li> </ul>"},{"location":"faker/#utilities","title":"Utilities","text":"<ul> <li><code>arrayOf($method, $count, ...$args)</code> \u2014 Generate array of fake values</li> <li><code>seed($seed)</code> \u2014 Set deterministic seed</li> </ul>"},{"location":"faker/#uniquefaker-generating-unique-values","title":"UniqueFaker: Generating Unique Values","text":"<p>For unique fake data (e.g., unique emails), use <code>unique()</code>:</p> <pre><code>$uniqueFaker = $faker-&gt;unique();\n$email1 = $uniqueFaker-&gt;email();\n$email2 = $uniqueFaker-&gt;email(); // Always different from $email1\n</code></pre> <ul> <li>Guarantees uniqueness up to the pool size (throws if exhausted)</li> <li>Supports all Faker methods</li> </ul>"},{"location":"faker/#deterministic-seeding","title":"Deterministic Seeding","text":"<p>You can make all fake data deterministic for repeatable tests:</p> <pre><code>$faker = new Faker();\n$faker-&gt;seed(1234);\necho $faker-&gt;name(); // Always the same output for the same seed\n</code></pre>"},{"location":"faker/#practical-usage-examples","title":"Practical Usage Examples","text":""},{"location":"faker/#generate-a-batch-of-fake-users","title":"Generate a Batch of Fake Users","text":"<pre><code>$faker = new Faker();\n$users = $faker-&gt;arrayOf('name', 5);\n// [ 'John Smith', 'Priya Sharma', ... ]\n</code></pre>"},{"location":"faker/#unique-emails-for-seeding","title":"Unique Emails for Seeding","text":"<pre><code>$unique = $faker-&gt;unique();\n$emails = [];\nfor ($i = 0; $i &lt; 10; $i++) {\n    $emails[] = $unique-&gt;email();\n}\n// All emails are unique\n</code></pre>"},{"location":"filesystem/","title":"Filesystem","text":"<p>PHP already has a rich support for working with local filesystem in your application. However some file operations can be abstracted to make performing operations like copying/moving/deleting files and/or folders much easier. <code>Lightpack</code> comes with a handy filesystem library to help you working with local filesystem.</p> <p>To get started, simply create an instance of <code>Lightpack\\File\\File</code> class.</p> <pre><code>&lt;?php\n\n$file = new Lightpack\\File\\File();\n</code></pre> <p>Now you can access following listed methods as documented.</p> <pre><code>$file-&gt;exists();\n$file-&gt;read();\n$file-&gt;write();\n$file-&gt;delete();\n$file-&gt;append();\n$file-&gt;copy();\n$file-&gt;rename();\n$file-&gt;move();\n$file-&gt;extension();\n$file-&gt;size();\n$file-&gt;modified();\n$file-&gt;info();\n$file-&gt;isDir();\n$file-&gt;makeDir();\n$file-&gt;copyDir();\n$file-&gt;emptyDir();\n$file-&gt;removeDir();\n$file-&gt;recent();\n$file-&gt;traverse();\n</code></pre>"},{"location":"filesystem/#exists","title":"exists()","text":"<p>To check whether a file or folder exists, call <code>exists()</code> method. It returns a boolean <code>true</code> if it exists otherwise <code>false</code>.</p> <pre><code>$file-&gt;exists('/path/to/file');\n</code></pre>"},{"location":"filesystem/#read","title":"read()","text":"<p>To read the entire contents of a file into a string, call <code>read()</code> method. It returns <code>null</code> if the file doesn't exist.</p> <pre><code>$file-&gt;read('/path/to/file');\n</code></pre>"},{"location":"filesystem/#write","title":"write()","text":"<p>To write a string data to a file, call <code>write()</code> method. It will try to create the file if the file doesn't exist otherwise it will overwrite the existing file contents with new data.</p> <pre><code>$file-&gt;write('/path/to/file', 'Hello World');\n</code></pre>"},{"location":"filesystem/#delete","title":"delete()","text":"<p>To delete a file, call <code>delete</code> method. It returns <code>true</code> on success otherwise <code>false</code>.</p> <pre><code>$file-&gt;delete('/path/to/file');\n</code></pre>"},{"location":"filesystem/#append","title":"append()","text":"<p>To append data to the end of the file, call <code>append()</code> method.</p> <pre><code>$file-&gt;append('/path/to/file', 'Thanks.');\n</code></pre>"},{"location":"filesystem/#copy","title":"copy()","text":"<p>To make a copy of a file, call <code>copy()</code> method. Pass it the source file path and destination path. If the destination path already exists, its content will be overwritten with source file contents.</p> <p>This method returns <code>true</code> on success otherwise <code>false</code>.</p> <pre><code>$file-&gt;copy('/path/to/source', '/path/to/destination');\n</code></pre>"},{"location":"filesystem/#rename","title":"rename()","text":"<p>To rename a file, call <code>rename()</code> method. This is same as <code>copy()</code> except that it will delete the source file.</p> <pre><code>$file-&gt;rename('/path/to/source', '/path/to/destination');\n</code></pre>"},{"location":"filesystem/#move","title":"move()","text":"<p>This is an alias of the <code>rename()</code> method above. It moves a source file to a given destination path and deletes the source file.</p> <pre><code>$file-&gt;move('/path/to/source', '/path/to/destination');\n</code></pre>"},{"location":"filesystem/#extension","title":"extension()","text":"<p>To get the extension of a file (e.g. txt, jpg, png, etc.), call <code>extension()</code> method.</p> <pre><code>$file-&gt;extension('path/to/file');\n</code></pre>"},{"location":"filesystem/#size","title":"size()","text":"<p>The get the size of a file in bytes, call <code>size()</code> method.</p> <ul> <li>Returns <code>null</code> if the file does not exist.</li> </ul> <pre><code>$file-&gt;size('/path/to/file'); // 1024\n</code></pre> <p>You can also get the formatted file size as <code>B, KB, MB, GB, TB</code>. Pass <code>true</code> as second parameter to this method.</p> <pre><code>$file-&gt;size('/path/to/file'); // 1KB\n</code></pre>"},{"location":"filesystem/#modified","title":"modified()","text":"<p>To get the time the file was last modified, call <code>modified()</code> method. </p> <pre><code>$file-&gt;modified('/path/to/file');\n</code></pre> <p>It returns a UNIX timestamp by default. But you can also format the result by passing <code>true</code> as second parameter.</p> <p>This will return the last modified date formatted as <code>M d, Y</code>.</p> <pre><code>$file-&gt;modified('/path/to/file', true); // Feb 7, 2020\n</code></pre> <p>You can pass the date format as third parameter to this method.</p> <pre><code>$file-&gt;modified('/path/to/file', true, 'd-M, Y'); // 7-Feb, 2020\n</code></pre>"},{"location":"filesystem/#info","title":"info()","text":"<p>Calling <code>info()</code> method returns an instance of <code>SplFileInfo</code> class from PHP SPL library. This class provides an object-oriented access to the properties of a file or directory.</p> <ul> <li>Returns <code>null</code> if the file does not exist.</li> </ul> <p>It is worth your time to have a look at this class details.</p> <p>SplFileInfo</p> <pre><code>$fielinfo = $file-&gt;info('/path/to/file');\n</code></pre> <p>Now you can call all the methods defined in <code>SplFileInfo</code> class. For example:</p> <pre><code>$fileinfo-&gt;getFilename();\n</code></pre>"},{"location":"filesystem/#isdir","title":"isDir()","text":"<p>To check if a filepath is a folder, call <code>isDir()</code> method. It returns <code>true</code> on success otherwise <code>false</code>.</p> <pre><code>$file-&gt;isDir('/path/to/file');\n</code></pre>"},{"location":"filesystem/#makedir","title":"makeDir()","text":"<p>To create a new folder, call <code>makeDir()</code> method. This method returns <code>true</code> on success otherwise <code>false</code>.</p> <pre><code>$file-&gt;makeDir('/path/to/file');\n</code></pre> <p>By default it tries to create the directory with a permission value <code>0777</code>. You can pass the permission as second parameter to this method.</p> <pre><code>$file-&gt;makeDir('/path/to/file', 0775);\n</code></pre>"},{"location":"filesystem/#copydir","title":"copyDir()","text":"<p>To copy the contents of a source folder into another folder, call <code>copyDir()</code> method. It will recursively copy all the files and sub-folders from the source to the destination folder.</p> <ul> <li>The third argument (<code>delete</code>) deletes the source folder after copy (useful for moves).</li> </ul> <p>This returns <code>true</code> on success otherwise <code>false</code>. </p> <pre><code>$file-&gt;copyDir('/path/to/source', '/path/to/destination');\n</code></pre> <p>If you want to delete the source folder after copy operation, pass <code>true</code> as third argument.</p> <pre><code>$file-&gt;copyDir('/path/to/source', '/path/to/destination', true);\n</code></pre>"},{"location":"filesystem/#emptydir","title":"emptyDir()","text":"<p>To empty a folder, call <code>emptyDir()</code> method. This method will delete all the files and folders in the source directory.</p> <p>It returns <code>true</code> on success otherwise <code>false</code> on failure.</p> <pre><code>$file-&gt;emptyDir('/path/to/file');\n</code></pre> <p>Note that this method will not delete the source folder itself.</p>"},{"location":"filesystem/#removedir","title":"removeDir()","text":"<p>To delete a folder and all its content, call <code>removeDir()</code> method.</p> <ul> <li>The second argument (<code>delete</code>) controls whether the directory itself is deleted (default: <code>true</code>).</li> </ul> <p>It returns <code>true</code> on success otherwise <code>false</code>.</p> <pre><code>$file-&gt;removeDir('/path/to/file');\n</code></pre>"},{"location":"filesystem/#recent","title":"recent()","text":"<p>To get the most recently modified file in a folder, call <code>recent()</code> method. </p> <ul> <li>Returns <code>null</code> if there are no files in the directory.</li> </ul> <p>This method returns an instance of <code>SplFileInfo</code> class which provides a number of methods to get the information about a file.</p> <pre><code>$recent = $file-&gt;recent('/path/to/file');\n\n// Now you can access all methods in SplFileInfo class.\n$recent-&gt;getFilename();\n</code></pre>"},{"location":"filesystem/#traverse","title":"traverse()","text":"<p>To list all the files and folders in a given directory, call <code>traverse()</code> method. </p> <ul> <li>Returns <code>null</code> if the path is not a directory.</li> </ul> <p>This method will return an array of the contents of a folder with filepath as <code>key</code> and an instance of <code>SplFileInfo</code> as value.</p> <pre><code>$files = $file-&gt;traverse('path/to/file');\n\nforeach($files as $file) {\n    echo $file-&gt;getFilename();\n}\n</code></pre>"},{"location":"filesystem/#movedir","title":"moveDir()","text":"<p>Move a directory and all its contents to a new location. This is a wrapper around <code>copyDir()</code> that deletes the source after copy.</p> <pre><code>$file-&gt;moveDir('/path/to/source', '/path/to/destination');\n</code></pre>"},{"location":"filesystem/#hash","title":"hash()","text":"<p>Get a cryptographic hash (checksum) of a file\u2019s contents. Useful for verifying file integrity, cache-busting, or detecting changes. Supports any hash algorithm supported by PHP (<code>sha256</code>, <code>md5</code>, etc).</p> <pre><code>$file-&gt;hash('/path/to/file'); // default: sha256\n$file-&gt;hash('/path/to/file', 'md5');\n</code></pre>"},{"location":"filesystem/#atomic","title":"atomic()","text":"<p>Write contents to a file atomically. This prevents partial/corrupted writes by writing to a temp file and then renaming. Especially useful for config, cache, or data files that must never be corrupted.</p> <pre><code>$file-&gt;atomic('/path/to/file', $contents);\n</code></pre>"},{"location":"filesystem/#directory-iterators","title":"Directory Iterators","text":"<p>For advanced directory traversal, you can get iterators:</p> <pre><code>$iterator = $file-&gt;getIterator('/path/to/dir'); // FilesystemIterator, non-recursive\n$iterator = $file-&gt;getRecursiveIterator('/path/to/dir'); // RecursiveIteratorIterator, recursive\n</code></pre>"},{"location":"filesystem/#path-sanitization","title":"Path Sanitization","text":"<p>For security, you can sanitize file paths:</p> <pre><code>$safe = $file-&gt;sanitizePath($userInputPath);\n</code></pre>"},{"location":"filters/","title":"Filters","text":"<p>Filters in Lightpack are reusable hooks that run before or after a controller action. They are typically used for authentication, authorization, CSRF protection, rate limiting, CORS, and other request/response concerns.</p>"},{"location":"filters/#how-filters-work","title":"How Filters Work","text":"<ul> <li>Before filters can halt the request and return a response before the controller action runs.</li> <li>After filters can modify the response after the controller action runs.</li> <li>Filters can be attached to individual routes or route groups.</li> </ul>"},{"location":"filters/#usage","title":"Usage","text":""},{"location":"filters/#attaching-filters-to-routes","title":"Attaching Filters to Routes","text":"<pre><code>// Single filter\nroute()-&gt;get('/dashboard', DashboardController::class)-&gt;filter('auth');\n\n// Multiple filters\nroute()-&gt;post('/posts', PostController::class)-&gt;filter(['csrf', 'auth']);\n</code></pre>"},{"location":"filters/#grouping-filters","title":"Grouping Filters","text":"<pre><code>route()-&gt;group(['filter' =&gt; ['csrf', 'auth']], function() {\n    route()-&gt;get('/dashboard', DashboardController::class);\n});\n</code></pre>"},{"location":"filters/#halting-or-modifying-requests","title":"Halting or Modifying Requests","text":"<ul> <li>To halt a request early (e.g., unauthorized), return a <code>Response</code> from the filter\u2019s <code>before()</code> method.</li> <li>To modify the response, return a new <code>Response</code> from the filter\u2019s <code>after()</code> method.</li> </ul>"},{"location":"filters/#defining-custom-filters","title":"Defining Custom Filters","text":"<pre><code>php console create:filter TrimFilter\n</code></pre> <p>A filter is a class implementing the <code>Lightpack\\Filters\\IFilter</code> interface:</p> <pre><code>class TrimFilter implements IFilter\n{\n    public function before(Request $request, array $params = [])\n    {\n        // Logic before action\n    }\n\n    public function after(Request $request, Response $response, array $params = []): Response\n    {\n        // Logic after action\n        return $response;\n    }\n}\n</code></pre> <p>Register your filter alias in <code>config/filters.php</code>:</p> <pre><code>return [\n    'trim' =&gt; App\\Filters\\TrimFilter::class,\n];\n</code></pre>"},{"location":"filters/#built-in-filters","title":"Built-in Filters","text":"<p>Lightpack provides many pre-defined filters that you can declare on your route definitions. Below are the built-in filters provided by Lightpack, their aliases, and what they do:</p>"},{"location":"filters/#1-auth","title":"1. <code>auth</code>","text":"<p>Purpose: Restricts access to authenticated users (web or API). - Web: Redirects guests to login; stores intended URL for redirect after login. - API: Returns 401 JSON if token is missing or invalid. - Params: <code>['web']</code> (default) or <code>['api']</code>.</p>"},{"location":"filters/#2-guest","title":"2. <code>guest</code>","text":"<p>Purpose: Restricts access to guests only. - Redirects logged-in users to a default location (usually dashboard).</p>"},{"location":"filters/#3-csrf","title":"3. <code>csrf</code>","text":"<p>Purpose: Protects against CSRF attacks. - Checks for a valid CSRF token on POST, PUT, PATCH, DELETE. - Throws exceptions for missing or invalid tokens. - Bypasses in <code>APP_ENV=testing</code>.</p>"},{"location":"filters/#4-cors","title":"4. <code>cors</code>","text":"<p>Purpose: Handles Cross-Origin Resource Sharing. - Responds to OPTIONS requests with CORS headers. - Adds CORS headers to all responses. - Uses headers from <code>config('cors.headers')</code>.</p>"},{"location":"filters/#5-limit","title":"5. <code>limit</code>","text":"<p>Purpose: API rate limiting. - Limits requests per user or IP to a configurable max per time window. - Throws 429 with rate limit headers if exceeded. - Params: <code>[maxRequests, minutes]</code>. Defaults from <code>config('limit.default')</code>.</p>"},{"location":"filters/#6-signed","title":"6. <code>signed</code>","text":"<p>Purpose: Ensures URL signatures are valid. - Returns 403 (JSON or error view) if the request signature is invalid.</p>"},{"location":"filters/#7-verifyemail","title":"7. <code>verifyemail</code>","text":"<p>Purpose: Restricts access to users with verified email addresses. - Redirects or returns 403 JSON if user\u2019s email is not verified.</p>"},{"location":"filters/#8-mfa","title":"8. <code>mfa</code>","text":"<p>Purpose: Enforces Multi-Factor Authentication. - If MFA is enforced or user has enabled MFA, triggers MFA flow and redirects to verification screen. - Skips if already passed in session.</p>"},{"location":"filters/#filter-parameters","title":"Filter Parameters","text":"<p>You can pass parameters to filters via the route definition:</p> <pre><code>route()-&gt;get('/api/data', ApiController::class)-&gt;filter(['limit:100,5']);\n</code></pre> <ul> <li>For <code>limit</code>, this would allow 100 requests per 5 minutes.</li> </ul>"},{"location":"filters/#best-practices","title":"Best Practices","text":"<ul> <li>Order matters: Filters run in the order they\u2019re listed.</li> <li>Return a Response: To halt further processing, return a <code>Response</code> from <code>before()</code>.</li> <li>Chainable: Filters from groups and routes are merged and deduplicated.</li> <li>Testing: CSRF filter is disabled in test environment.</li> </ul>"},{"location":"filters/#summary-table","title":"Summary Table","text":"Alias Description Typical Use/Params <code>auth</code> Require authentication (web/API) <code>auth:web</code>, <code>auth:api</code> <code>guest</code> Require guest (not logged in) <code>csrf</code> CSRF protection on state-changing verbs <code>cors</code> Add CORS headers, handle preflight <code>limit</code> Rate limiting <code>limit:60,1</code> <code>signed</code> Require valid signed URL <code>verifyemail</code> Require verified email <code>mfa</code> Enforce multi-factor authentication"},{"location":"http-client/","title":"Lightpack Http Client","text":"<p>Lightpack provide a lightweight HTTP client for making API requests.</p> <ul> <li>Fluent API: Chain methods for configuration and requests.</li> <li>Supports all major HTTP verbs: GET, POST, PUT, PATCH, DELETE.</li> <li>Flexible data formats: JSON (default) and form-urlencoded.</li> <li>Custom headers, bearer token, and file uploads.</li> <li>Timeouts, SSL options, and custom cURL settings.</li> <li>Simple helpers for response status, errors, and parsing.</li> </ul>"},{"location":"http-client/#quick-reference","title":"Quick Reference","text":"Method Purpose <code>get($url, $query)</code> Send GET request with optional query params <code>post($url, $data)</code> Send POST request with data (JSON or form) <code>put($url, $data)</code> Send PUT request with data <code>patch($url, $data)</code> Send PATCH request with data <code>delete($url, $data)</code> Send DELETE request with data <code>headers([$k=&gt;$v])</code> Set custom headers <code>files([$k=&gt;$file])</code> Attach files for upload (POST/PUT) <code>token($token)</code> Set Bearer token for Authorization <code>timeout($seconds)</code> Set request timeout <code>insecure()</code> Disable SSL verification (use with caution) <code>options([$opt=&gt;$v])</code> Set custom cURL options <code>form()</code> Send data as form-urlencoded <code>download($url, $path)</code> Download file to disk <code>json()</code> Get response as array (assumes JSON) <code>body()</code> Get raw response body <code>status()</code> Get HTTP status code <code>error()</code> Get transport error message, if any <code>ok()</code> 2xx status <code>failed()</code> Transport or HTTP error <code>clientError()</code> 4xx status <code>serverError()</code> 5xx status <code>redirect()</code> 3xx status"},{"location":"http-client/#creating-a-client","title":"Creating a Client","text":"<pre><code>use Lightpack\\Http\\Http;\n\n$http = new Http();\n</code></pre>"},{"location":"http-client/#making-requests","title":"Making Requests","text":""},{"location":"http-client/#get-request","title":"GET Request","text":"<pre><code>$response = $http-&gt;get('https://api.example.com/users');\n$data = $response-&gt;json();\n</code></pre>"},{"location":"http-client/#get-with-query-parameters","title":"GET with Query Parameters","text":"<pre><code>$response = $http-&gt;get('https://api.example.com/users', [\n    'name' =&gt; 'alice',\n    'active' =&gt; true\n]);\n</code></pre>"},{"location":"http-client/#post-request-json","title":"POST Request (JSON)","text":"<pre><code>$response = $http-&gt;post('https://api.example.com/users', [\n    'name' =&gt; 'alice',\n    'email' =&gt; 'alice@example.com'\n]);\n</code></pre>"},{"location":"http-client/#post-request-form-data","title":"POST Request (Form Data)","text":"<pre><code>$response = $http\n    -&gt;form()\n    -&gt;post('https://api.example.com/login', [\n        'username' =&gt; 'alice',\n        'password' =&gt; 'secret',\n    ]);\n</code></pre>"},{"location":"http-client/#putpatchdelete-requests","title":"PUT/PATCH/DELETE Requests","text":"<pre><code>$http-&gt;put($url, $data);\n$http-&gt;patch($url, $data);\n$http-&gt;delete($url, $data);\n</code></pre>"},{"location":"http-client/#customizing-requests","title":"Customizing Requests","text":""},{"location":"http-client/#custom-headers","title":"Custom Headers","text":"<pre><code>$headers = ['X-Custom' =&gt; 'value', 'Accept' =&gt; 'application/json'];\n\n$response = $http-&gt;headers($headers)-&gt;get($url);\n</code></pre>"},{"location":"http-client/#bearer-token-authentication","title":"Bearer Token Authentication","text":"<pre><code>$response = $http-&gt;token('your-token')-&gt;get($url);\n</code></pre>"},{"location":"http-client/#file-uploads","title":"File Uploads","text":"<pre><code>$file = ['avatar' =&gt; '/path/to/file.jpg'];\n\n$response = $http-&gt;files()-&gt;post($url);\n</code></pre>"},{"location":"http-client/#set-timeout","title":"Set Timeout","text":"<pre><code>$response = $http-&gt;timeout(10)-&gt;get($url);\n</code></pre>"},{"location":"http-client/#insecure-requests-disable-ssl-verification","title":"Insecure Requests (Disable SSL Verification)","text":"<pre><code>$response = $http-&gt;insecure()-&gt;get($url);\n</code></pre>"},{"location":"http-client/#custom-curl-options","title":"Custom cURL Options","text":"<pre><code>$curlOptions = [\n    CURLOPT_PROXY =&gt; 'proxy.example.com:8080',\n    CURLOPT_FOLLOWLOCATION =&gt; false\n];\n\n$response = $http-&gt;options()-&gt;get($url);\n</code></pre>"},{"location":"http-client/#handling-responses","title":"Handling Responses","text":""},{"location":"http-client/#status-and-error-checking","title":"Status and Error Checking","text":"<pre><code>if ($response-&gt;ok()) {\n    // 2xx response\n}\n</code></pre> <pre><code>if ($response-&gt;clientError()) {\n    // 4xx error\n}\n</code></pre> <pre><code>if ($response-&gt;serverError()) {\n    // 5xx error\n}\n</code></pre> <pre><code>if ($response-&gt;failed()) {\n    // Transport error (DNS, connection, SSL, etc.)\n    $error = $response-&gt;error();\n}\n</code></pre>"},{"location":"http-client/#parsing-response-data","title":"Parsing Response Data","text":"<pre><code>$array = $response-&gt;json(); // Array (assumes JSON)\n$text = $response-&gt;body();  // Raw body\n$status = $response-&gt;status(); // HTTP status code\n</code></pre>"},{"location":"http-client/#downloading-files","title":"Downloading Files","text":"<pre><code>$success = $http-&gt;download('https://example.com/image.jpg', '/tmp/image.jpg');\n\nif ($success) {\n    // File downloaded\n}\n</code></pre>"},{"location":"http-client/#error-handling-explained","title":"Error Handling Explained","text":"<ul> <li>Transport Errors:</li> <li>Occur before an HTTP response is received (DNS failure, timeout, SSL error, etc.)</li> <li><code>$response-&gt;error()</code> returns the error message</li> <li><code>$response-&gt;status()</code> returns 0</li> <li> <p><code>$response-&gt;failed()</code> returns true</p> </li> <li> <p>HTTP Errors:</p> </li> <li>Server returns 4xx or 5xx status</li> <li><code>$response-&gt;status()</code> returns the HTTP code</li> <li><code>$response-&gt;failed()</code> returns true</li> </ul>"},{"location":"http-client/#example-complete-request-flow","title":"Example: Complete Request Flow","text":"<pre><code>$http = new Http();\n\n$response = $http\n    -&gt;token('abc123')\n    -&gt;headers(['Accept' =&gt; 'application/json'])\n    -&gt;timeout(10)\n    -&gt;get('https://api.example.com/profile');\n\nif ($response-&gt;ok()) {\n    $profile = $response-&gt;json();\n} elseif ($response-&gt;failed()) {\n    // Handle error\n    $error = $response-&gt;error();\n}\n</code></pre>"},{"location":"image-utils/","title":"Image Utilities","text":"<p>Lightpack\u2019s <code>Image</code> utility provides a robust, chainable API for image manipulation, supporting all common operations for avatars, thumbnails, and web graphics. It is built on PHP\u2019s GD extension and covers resizing, cropping, filters, format conversion, and more, with strong error handling and test coverage.</p>"},{"location":"image-utils/#overview","title":"Overview","text":"<ul> <li>Load from file or URL (JPEG, PNG, WebP)</li> <li>Resize, crop, rotate, flip with aspect ratio and quality controls</li> <li>Save to JPEG, PNG, or WebP with custom quality/compression</li> <li>Generate avatars and thumbnails in standard sizes</li> <li>Apply filters and effects: grayscale, brightness, contrast, blur, sharpen, colorize, sepia, invert, pixelate, emboss, edge detect, posterize</li> <li>Watermark and text overlay support</li> <li>Method chaining for expressive, fluent code</li> </ul>"},{"location":"image-utils/#basic-usage","title":"Basic Usage","text":"<pre><code>use Lightpack\\Utils\\Image;\n\n// Load image\n$image = new Image('/path/to/photo.jpg');\n\n// Resize and save\n$image-&gt;resize(400, 300)-&gt;save('/path/to/output.jpg');\n\n// Crop, grayscale, and save as PNG\n$image = new Image('/path/to/photo.jpg');\n$image-&gt;crop(100, 100, 10, 10)\n      -&gt;grayscale()\n      -&gt;save('/path/to/cropped.png');\n</code></pre>"},{"location":"image-utils/#loading-images","title":"Loading Images","text":"<ul> <li>Supports JPEG, PNG, WebP (file or URL)</li> <li>Throws if file/URL is missing or unsupported</li> </ul> <pre><code>$image = new Image('photo.jpg');\n$image = new Image('https://example.com/pic.png');\n</code></pre>"},{"location":"image-utils/#resizing-cropping","title":"Resizing &amp; Cropping","text":"<pre><code>// Resize (maintains aspect ratio if one dimension is zero)\n$image-&gt;resize(300, 0); // 300px wide, proportional height\n\n// Crop (x, y, width, height)\n$image-&gt;crop(100, 100, 10, 10);\n</code></pre>"},{"location":"image-utils/#saving-format-conversion","title":"Saving &amp; Format Conversion","text":"<p>The <code>save()</code> method writes the current image to disk, automatically selecting the format (JPEG, PNG, or WebP) based on the file extension you provide. It also lets you control quality and compression for each format.</p> <pre><code>// Save as JPEG (with quality)\n$image-&gt;save('output.jpg', 90);    // 90% quality (default is 80)\n\n// Save as PNG (with compression)\n$image-&gt;save('output.png');        // Compression defaults to 7 (0 = none, 9 = max)\n$image-&gt;setDefaultPngCompression(4); // Set default for future PNG saves\n\n// Save as WebP (with quality)\n$image-&gt;save('output.webp', 80);   // 80% quality (default is 80)\n</code></pre> <p>Format detection: - The format is determined by the file extension (<code>.jpg</code>, <code>.jpeg</code>, <code>.png</code>, <code>.webp</code>). - Throws an exception for unsupported extensions.</p> <p>Quality &amp; Compression: - JPEG/WebP: Quality is 0\u2013100 (higher = better quality, larger file). - PNG: Compression is 0\u20139 (higher = smaller file, slower save, no quality loss). - You can set global defaults for each format.</p> <p>Directory checks: - Throws if the target directory does not exist or is not writable. - Does not create directories automatically.</p> <p>Overwriting: - If the target file exists, it will be overwritten without warning.</p> <p>Image object state after save: - After saving, the internal image resource is destroyed to free memory. - The <code>Image</code> object cannot be reused for further operations or additional saves. - To perform multiple saves or edits, reload the image or clone before saving:</p> <pre><code>$image = new Image('photo.jpg');\n$image-&gt;resize(200, 200)-&gt;save('small.jpg');\n\n// Need to reload or re-instantiate for further use:\n$image = new Image('photo.jpg');\n$image-&gt;resize(400, 400)-&gt;save('large.jpg');\n</code></pre> <p>Tip: If you want to save multiple versions (e.g., different sizes or formats), clone the <code>Image</code> object before calling <code>save()</code>:</p> <p><code>php $img = new Image('photo.jpg'); $clone = clone $img; $img-&gt;resize(200, 200)-&gt;save('small.jpg'); $clone-&gt;resize(400, 400)-&gt;save('large.jpg');</code></p> <p>Best Practices: - Always check that your target directory exists and is writable. - Use explicit file extensions to control output format. - Reload or clone the image for multiple operations after saving.</p> <p>Warning: If you try to use the same <code>Image</code> object after <code>save()</code>, you will get an error because the underlying image resource has been destroyed.</p>"},{"location":"image-utils/#quality-compression-settings","title":"Quality &amp; Compression Settings","text":"<pre><code>$image-&gt;setDefaultJpegQuality(85);\n$image-&gt;setDefaultWebpQuality(90);\n$image-&gt;setDefaultPngCompression(6); // 0 (none) to 9 (max)\n</code></pre>"},{"location":"image-utils/#avatars-thumbnails","title":"Avatars &amp; Thumbnails","text":"<p>Lightpack\u2019s <code>Image</code> utility provides dedicated methods for generating standardized avatar and thumbnail images\u2014ideal for user profiles, listings, galleries, blog posts, and more. These helpers automate resizing and format selection, ensuring consistency and optimal display across your application.</p>"},{"location":"image-utils/#what-are-avatars-and-thumbnails","title":"What Are Avatars and Thumbnails?","text":"<ul> <li>Avatars: Square images, typically used for user profile pictures, comments, or account listings. Sizes are chosen for clarity at different UI scales.</li> <li>Thumbnails: Rectangular or square images, optimized for previews, cards, or gallery grids. Useful for content teasers and fast-loading image lists.</li> </ul>"},{"location":"image-utils/#standard-sizes","title":"Standard Sizes","text":"<ul> <li>Avatars:</li> <li><code>small</code>: 48x48 px (comments, lists)</li> <li><code>medium</code>: 96x96 px (profile preview)</li> <li><code>large</code>: 192x192 px (profile page)</li> <li>Thumbnails:</li> <li><code>small</code>: 300px wide (height auto)</li> <li><code>medium</code>: 600px wide (height auto)</li> <li><code>large</code>: 1200px wide (height auto)</li> </ul> <p>Note: Thumbnail height is automatically calculated to preserve the original aspect ratio.</p>"},{"location":"image-utils/#generating-avatars","title":"Generating Avatars","text":"<pre><code>$image = new Image('userpic.jpg');\n$paths = $image-&gt;avatar('avatars/user123');\n// $paths['small']  =&gt; 'avatars/user123_avatar_small.webp'\n// $paths['medium'] =&gt; 'avatars/user123_avatar_medium.webp'\n// $paths['large']  =&gt; 'avatars/user123_avatar_large.webp'\n</code></pre> <ul> <li>Avatars are always saved as WebP for modern browser support and efficient storage.</li> <li>You can specify which sizes to generate:</li> </ul> <pre><code>$paths = $image-&gt;avatar('avatars/user123', ['small', 'large']);\n</code></pre>"},{"location":"image-utils/#generating-thumbnails","title":"Generating Thumbnails","text":"<pre><code>$image = new Image('photo.jpg');\n$thumbs = $image-&gt;thumbnail('thumbs/photo123');\n// $thumbs['small']  =&gt; 'thumbs/photo123_thumb_small.jpg'\n// $thumbs['medium'] =&gt; 'thumbs/photo123_thumb_medium.jpg'\n// $thumbs['large']  =&gt; 'thumbs/photo123_thumb_large.jpg'\n</code></pre> <ul> <li>Thumbnails are always saved as JPEG for maximum compatibility and fast loading.</li> <li>You can specify which sizes to generate:</li> </ul> <pre><code>$thumbs = $image-&gt;thumbnail('thumbs/photo123', ['medium']);\n</code></pre>"},{"location":"image-utils/#file-naming-conventions","title":"File Naming Conventions","text":"<ul> <li>Avatars: <code>{base}_avatar_{size}.webp</code></li> <li>Thumbnails: <code>{base}_thumb_{size}.jpg</code></li> </ul>"},{"location":"image-utils/#custom-sizes-error-handling","title":"Custom Sizes &amp; Error Handling","text":"<ul> <li>Both methods accept a custom array of sizes (must match supported keys).</li> <li>Throws an <code>InvalidArgumentException</code> if an invalid size is given.</li> <li>The original image is not modified; each output is generated from a clone.</li> </ul>"},{"location":"image-utils/#method-chaining-reuse","title":"Method Chaining &amp; Reuse","text":"<ul> <li>Both <code>avatar()</code> and <code>thumbnail()</code> clone the image internally, so you can reuse the original <code>Image</code> object for other operations.</li> <li>The returned array contains the full paths to each generated image.</li> </ul>"},{"location":"image-utils/#best-practices","title":"Best Practices","text":"<ul> <li>Store avatars and thumbnails in dedicated directories for easy management.</li> <li>Always check that your output directories exist and are writable.</li> <li>Use the returned paths for referencing images in your application.</li> </ul> <p>Tip: You can combine avatars, thumbnails, and other manipulations by chaining methods or by working with clones for batch processing.</p>"},{"location":"image-utils/#filters-effects","title":"Filters &amp; Effects","text":"<pre><code>$image-&gt;grayscale()-&gt;contrast(-20)-&gt;brightness(30)-&gt;blur(2)-&gt;sharpen();\n$image-&gt;colorize(255, 0, 0)-&gt;sepia()-&gt;invert()-&gt;pixelate(8);\n$image-&gt;emboss()-&gt;edgedetect()-&gt;posterize();\n</code></pre> <ul> <li>All filters are chainable</li> </ul>"},{"location":"image-utils/#watermark-text-overlay","title":"Watermark &amp; Text Overlay","text":"<pre><code>// Overlay PNG watermark at (x, y), opacity 0-100\n$image-&gt;watermark('logo.png', 10, 10, 60);\n\n// Overlay text (x, y, size, color, font)\n$image-&gt;text('Sample', 20, 40, 16, '#ff0000', '/path/to/font.ttf');\n</code></pre>"},{"location":"image-utils/#rotating-flipping","title":"Rotating &amp; Flipping","text":"<pre><code>$image-&gt;rotate(90); // Degrees, counter-clockwise\n$image-&gt;flip('vertical'); // or 'horizontal'\n</code></pre>"},{"location":"image-utils/#error-handling-edge-cases","title":"Error Handling &amp; Edge Cases","text":"<ul> <li>Throws exceptions for missing files, unsupported formats, invalid sizes, or failed operations</li> <li>All operations require GD extension</li> <li>Output image is destroyed after save (reload to reuse)</li> <li>Method chaining is supported for all mutators</li> </ul>"},{"location":"install/","title":"Installation","text":"<p>Clone the <code>Lightpack</code> repository into your project web root directory.</p> <pre><code>git clone https://github.com/lightpack/lightpack.git\n</code></pre> <p>Move into your repository folder.</p> <pre><code>cd lightpack\n</code></pre> <p>Now run the composer command.</p> <pre><code>composer install --no-dev -vvv\n</code></pre>"},{"location":"introduction/","title":"Lightpack PHP","text":"<p>A modern PHP web framework with extreme performance and small footprint.</p> <p>\u00a9 Pradeep Tiwari</p>"},{"location":"js-utils/","title":"JS Utilities","text":"<p>Lightpack\u2019s <code>Js</code> utility provides a safe, expressive way to convert PHP data into JavaScript code for use in your views, scripts, or templates. It ensures proper escaping and supports all variable declaration types.</p>"},{"location":"js-utils/#overview","title":"Overview","text":"<ul> <li>encode(): Safely encode any PHP value (scalar, array, object) as a JavaScript literal or JSON.</li> <li>var() / let() / const(): Generate JavaScript variable declarations from PHP data.</li> <li>Escaping: All HTML, quotes, and special characters are escaped to prevent XSS and syntax errors.</li> <li>Helper function: Use the global <code>js()</code> helper for convenience.</li> </ul> <pre><code>use Lightpack\\Utils\\Js;\n\n$js = new Js();\n</code></pre> <p>Or you can use the <code>js()</code> utility function.</p>"},{"location":"js-utils/#encode-php-data-as-javascript","title":"Encode PHP data as JavaScript","text":"<p><code>encode(mixed $data, bool $asObject = true): string</code></p> <ul> <li>Converts any PHP value to a safe JavaScript/JSON representation.</li> <li>By default, returns a JSON literal. </li> <li>If <code>$asObject</code> is false, returns a <code>JSON.parse(...)</code> string for use in inline scripts.</li> </ul> <pre><code>js()-&gt;encode(42); // 42\njs()-&gt;encode('hello'); // \"hello\"\njs()-&gt;encode(['a' =&gt; 1, 'b' =&gt; 2]); // {\"a\":1,\"b\":2}\njs()-&gt;encode(['foo' =&gt; 'bar'], false); // JSON.parse('{...}')\n</code></pre>"},{"location":"js-utils/#create-js-variable-declarations","title":"Create JS variable declarations","text":"<ul> <li><code>var(string $name, mixed $value): string</code></li> <li><code>let(string $name, mixed $value): string</code></li> <li><code>const(string $name, mixed $value): string</code></li> </ul> <p>Creates a JS variable declaration with the specified name and value.</p> <pre><code>js()-&gt;var('user', ['id' =&gt; 1]);   // var user = {\"id\":1};\njs()-&gt;let('user', ['id' =&gt; 1]);   // let user = {\"id\":1};\njs()-&gt;const('API_KEY', 'abc');    // const API_KEY = \"abc\";\n</code></pre>"},{"location":"js-utils/#escaping-safety","title":"Escaping &amp; Safety","text":"<ul> <li>All HTML tags (<code>&lt;</code>, <code>&gt;</code>), ampersands (<code>&amp;</code>), quotes (<code>'</code>, <code>\"</code>), and special characters are escaped using JSON_HEX_* flags.</li> <li>Prevents XSS and JS syntax errors when embedding PHP data directly into scripts.</li> <li>Arrays and objects are encoded as JSON objects.</li> </ul>"},{"location":"logging/","title":"Logging","text":"<p>Lightpack ships with a PSR-3 compatible logger that is already configured as a service for you. You can access the logger instance as service using <code>logger()</code> which gives an instance of <code>Lightpack\\Logger\\Logger</code>. </p> <p>This class exposes following logging methods:</p> <pre><code>logger()-&gt;log();\nlogger()-&gt;info();\nlogger()-&gt;alert();\nlogger()-&gt;debug();\nlogger()-&gt;notice();\nlogger()-&gt;warning();\nlogger()-&gt;critical();\nlogger()-&gt;emergency();\n</code></pre>"},{"location":"logging/#log-driver","title":"Log Driver","text":"<p>Lightpack ships with <code>null</code> and <code>file</code> log drivers. The default is the <code>file</code> log driver and logs the messages in the filename configured in <code>config/storage.php</code> file.</p>"},{"location":"logging/#disable-logging","title":"Disable Logging","text":"<p>To disable logging messages, you can set the log driver to null in <code>.env</code> file.</p> <pre><code>LOG_DRIVER=null\n</code></pre>"},{"location":"logging/#available-methods","title":"Available Methods","text":""},{"location":"logging/#log","title":"log()","text":"<p>This method takes a log level and a message string to log.</p> <pre><code>logger()-&gt;log('level', 'message');\n</code></pre>"},{"location":"logging/#info","title":"info()","text":"<p>This method sets the log level to <code>info</code> and takes a message string to log.</p> <pre><code>logger()-&gt;info('message');\n</code></pre>"},{"location":"logging/#alert","title":"alert()","text":"<p>This method sets the log level to <code>alert</code> and takes a message string to log.</p> <pre><code>logger()-&gt;alert('message');\n</code></pre>"},{"location":"logging/#debug","title":"debug()","text":"<p>This method sets the log level to <code>debug</code> and takes a message string to log.</p> <pre><code>logger()-&gt;debug('message');\n</code></pre>"},{"location":"logging/#notice","title":"notice()","text":"<p>This method sets the log level to <code>notice</code> and takes a message string to log.</p> <pre><code>logger()-&gt;notice('message');\n</code></pre>"},{"location":"logging/#warning","title":"warning()","text":"<p>This method sets the log level to <code>warning</code> and takes a message string to log.</p> <pre><code>logger()-&gt;warning('message');\n</code></pre>"},{"location":"logging/#critical","title":"critical()","text":"<p>This method sets the log level to <code>critical</code> and takes a message string to log.</p> <pre><code>logger()-&gt;critical('message');\n</code></pre>"},{"location":"logging/#emergency","title":"emergency()","text":"<p>This method sets the log level to <code>emergency</code> and takes a message string to log.</p> <pre><code>logger()-&gt;emergency('message');\n</code></pre>"},{"location":"mails/","title":"Sending Emails","text":"<p>Lightpack facilitates sending emails using any SMTP service provider in a very friendly manner. You can easily send emails in plain <code>Text</code> or rich <code>HTML</code> format.</p> <p>The first step is to configure your SMTP service provider in the <code>.env</code> file and adjust the SMTP credentials.</p>"},{"location":"mails/#creating-mail-class","title":"Creating Mail Class","text":"<p>Once you have setup your <code>SMTP</code> credentials, you should now create a mail class. To create a new mail class, fire this command in your terminal from project root:</p> <pre><code>php console create:mail TestMail\n</code></pre> <p>This should have created a <code>TestMail.php</code> file in app/Mails folder. You can write your mail logic in <code>dispatch()</code> method. Here is a minimal example of sending an email:</p> <pre><code>public function dispatch(array $payload = [])\n{\n    $this-&gt;to('bob@example.com')\n        -&gt;from('joe@example.com')\n        -&gt;subject('Hello Bob')\n        -&gt;body('Welcome to Lightpack')\n        -&gt;send();\n}\n</code></pre>"},{"location":"mails/#sending-mail","title":"Sending Mail","text":"<p>To send the mail, simply instantiate the mail class and call its <code>dispatch()</code> method:</p> <pre><code>(new TestMail)-&gt;dispatch();\n</code></pre> <p>You can optionally pass it an array as data payload which you can use inside the <code>dispatch()</code> method:</p> <pre><code>(new TestMail)-&gt;dispatch([\n    'to' =&gt; 'devs@example.com',\n    'from' =&gt; 'lightpack@example.com',\n]);\n</code></pre>"},{"location":"mails/#html-templates","title":"HTML Templates","text":"<p>You can create an <code>HTML</code> email template inside <code>app/views</code> folder and use that as your email body.</p> <p>For example, create a folder named <code>mails</code> inside <code>app/views</code> with following two files.</p> <pre><code>./app\n    \u2514\u2500\u2500 views\n        \u2514\u2500\u2500 mails\n            \u251c\u2500\u2500 welcome.html.php\n            \u251c\u2500\u2500 welcome.text.php\n</code></pre> <p>As you can see, we have two files named welcome.html.php and welcome.text.php because it is recommended to also send plain text version of your email for non-HTML compliant inboxes.</p>"},{"location":"mails/#creating-message","title":"Creating Message","text":"<p>Create your HTML email message markup in welcome.html.php.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;body&gt;\n        &lt;h1&gt;Hello Devs,&lt;/h1&gt;\n        &lt;p&gt;Welcome to Lightpack PHP web framework.&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>And here is the plain text version in welcome.text.php.</p> <pre><code>Hello Devs, welcome to Lightpack PHP web framework.\n</code></pre>"},{"location":"mails/#setting-view-templates","title":"Setting View Templates","text":"<p>Now in the mail class <code>dispatch()</code> method, specify those two templates using <code>htmlView()</code> and <code>textView()</code> methods.</p> <pre><code>class WelcomeMail extends Mail\n{\n    public function dispatch(array $payload = [])\n    {\n        $this-&gt;to('bob@example.com')\n            -&gt;from('joe@example.com')\n            -&gt;subject('Hello Bob')\n            -&gt;htmlView('mails/welcome.html')\n            -&gt;textView('mails/welcome.text')\n            -&gt;send();\n    }\n}\n</code></pre> <p>Thats it!! Now you can simply send both the versions of the mail.</p>"},{"location":"mails/#passing-view-data","title":"Passing View Data","text":"<p>In case you need to pass data to your templates, use the <code>viewData()</code> method passing it an array as argument for data. </p> <pre><code>public function dispatch(array $payload = [])\n{\n    $this-&gt;viewData([\n        'title' =&gt; 'Hello Devs',\n        'content' =&gt; 'Welcome to Lightpack PHP web framework.',\n    ]);\n\n    $this-&gt;to('bob@example.com')\n        -&gt;from('joe@example.com')\n        -&gt;subject('Hello Bob')\n        -&gt;htmlView('mails/welcome.html')\n        -&gt;textView('mails/welcome.text')\n        -&gt;send();\n}\n</code></pre> <p>Now you can access the data inside your templates with keys as variables:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;body&gt;\n        &lt;h1&gt;&lt;?= $title ?&gt;&lt;/h1&gt;\n        &lt;p&gt;&lt;?= $content ?&gt;&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"mails/#available-methods","title":"Available Methods","text":"<p>Below we document the most important methods that will help you send emails.</p>"},{"location":"mails/#from","title":"from()","text":"<p>Use this method to configure the <code>sender</code> email address and name.</p> <pre><code>$this-&gt;from('joe@example.com', 'Bob');\n</code></pre> <p>Note: Use <code>MAIL_FROM_ADDRESS</code> and <code>MAIL_FROM_NAME</code> to set the global <code>from</code> address and name of the email sender. In case when you do not explicitly specify the sender in the mail class using <code>from()</code> method, this email will be used.</p>"},{"location":"mails/#to","title":"to()","text":"<p>Use this method to configure the <code>recipient</code> email address and name.</p> <pre><code>$this-&gt;to('joe@example.com', 'Joe');\n</code></pre>"},{"location":"mails/#cc","title":"cc()","text":"<p>Use this method to <code>cc</code> a recipient email address and name.</p> <pre><code>$this-&gt;cc('rob@example.com', 'Rob');\n$this-&gt;cc('john@example.com', 'John');\n</code></pre> <p>You can <code>cc</code> multiple recipients at once by passing it an array of email address and name as key-value pairs.</p> <pre><code>$this-&gt;cc([\n    'rob@example.com' =&gt; 'Rob',\n    'john@example.com' =&gt; 'John'\n]);\n</code></pre> <p>Note that the name is optional. For example:</p> <pre><code>$this-&gt;cc([\n    'rob@example.com'\n    'john@example.com'\n]);\n</code></pre>"},{"location":"mails/#bcc","title":"bcc()","text":"<p>Use this method to <code>bcc</code> a recipient email address and name.</p> <pre><code>$this-&gt;bcc('rob@example.com', 'Rob');\n$this-&gt;bcc('john@example.com', 'John');\n</code></pre> <p>You can <code>bcc</code> multiple recipients at once by passing it an array of email address and name as key-value pairs.</p> <pre><code>$this-&gt;bcc([\n    'rob@example.com' =&gt; 'Rob',\n    'john@example.com' =&gt; 'John'\n]);\n</code></pre> <p>Note that the name is optional. For example:</p> <pre><code>$this-&gt;bcc([\n    'rob@example.com'\n    'john@example.com'\n]);\n</code></pre>"},{"location":"mails/#replyto","title":"replyTo()","text":"<p>Use this method to add a <code>reply-to</code> header.</p> <pre><code>$this-&gt;replyTo('support@example.com', 'Support Team');\n</code></pre> <p>You can <code>replyTo</code> multiple recipients at once by passing it an array of email address and name as key-value pairs.</p> <pre><code>$this-&gt;replyTo([\n    'support1@example.com' =&gt; 'Support Team1',\n    'support2@example.com' =&gt; 'Support Team2'\n]);\n</code></pre> <p>Note that the name is optional. For example:</p> <pre><code>$this-&gt;replyTo([\n    'support1@example.com',\n    'support2@example.com',\n]);\n</code></pre>"},{"location":"mails/#attach","title":"attach()","text":"<p>Use this method to send a file <code>attachment</code>.</p> <pre><code>$this-&gt;attach('/path/to/file');\n</code></pre> <p>You can <code>attach</code> multiple files at once by passing it an array of filepath and optional name as key-value pairs.</p> <pre><code>$this-&gt;attach([\n    '/path/to/file1' =&gt; 'filename1',\n    '/path/to/file2' =&gt; 'filename2',\n]);\n</code></pre>"},{"location":"mails/#subject","title":"subject()","text":"<p>Use this method to set the <code>subject</code> of the mail.</p> <pre><code>$this-&gt;subject('My Email Subject');\n</code></pre>"},{"location":"mails/#body","title":"body()","text":"<p>Use this method to set a rich <code>HTML</code> email message.</p> <pre><code>$this-&gt;body('&lt;p&gt;Hello Devs&lt;/p&gt;');\n</code></pre> <p>However, it is recommended to create and send rich HTML  email templates for a better email templates management.</p>"},{"location":"mails/#altbody","title":"altBody()","text":"<p>Use this method to set a <code>plain</code> text email message.</p> <pre><code>$this-&gt;altBody('Hello Devs');\n</code></pre>"},{"location":"mails/#send","title":"send()","text":"<p>Use this method to finally send the mail.</p> <pre><code>$this-&gt;send();\n</code></pre>"},{"location":"mails/#final-note","title":"Final Note","text":"<p>Lightpack depends on the awesome PHPMailer library for mail sending facility and all the mail classes extend this library. So you can utilize all the possible methods in your mail class as documented by PHPMailer project.</p>"},{"location":"mfa/","title":"Lightpack MFA: Complete Developer Guide","text":"<p>Lightpack MFA enables robust, flexible, and secure multi-factor authentication for modern PHP applications. It supports TOTP (authenticator app), SMS, Email, and backup codes out of the box, and is designed for extensibility, security, and ease of use.</p>"},{"location":"mfa/#supported-factors","title":"Supported Factors","text":"<ul> <li>TOTP (Authenticator App): </li> <li>Time-based one-time passwords (Google Authenticator, Authy, etc.)</li> <li>SMS: </li> <li>One-time code sent to user\u2019s phone (uses Lightpack SMS subsystem)</li> <li>Email: </li> <li>One-time code sent to user\u2019s email</li> <li>Backup Codes: </li> <li>Single-use codes for account recovery</li> <li>Null: </li> <li>No MFA (for testing or fallback)</li> </ul>"},{"location":"mfa/#installation-migration","title":"Installation &amp; Migration","text":""},{"location":"mfa/#1-migration","title":"1. Migration","text":"<p>Add MFA fields to your users table:</p> <pre><code>return new class extends Migration {\n    public function up(): void {\n        $this-&gt;alter('users')-&gt;add(function (Table $table) {\n            $table-&gt;varchar('phone', 20)-&gt;nullable(); // For SMS MFA\n            $table-&gt;varchar('mfa_method', 32)-&gt;nullable(); // Chosen factor\n            $table-&gt;boolean('mfa_enabled')-&gt;default(false);\n            $table-&gt;text('mfa_backup_codes')-&gt;nullable(); // JSON array of hashes\n            $table-&gt;varchar('mfa_totp_secret', 64)-&gt;nullable(); // TOTP secret\n        });\n    }\n    public function down(): void {\n        $this-&gt;alter('users')-&gt;modify(function (Table $table) {\n            $table-&gt;dropColumn('phone');\n            $table-&gt;dropColumn('mfa_method');\n            $table-&gt;dropColumn('mfa_enabled');\n            $table-&gt;dropColumn('mfa_backup_codes');\n            $table-&gt;dropColumn('mfa_totp_secret');\n        });\n    }\n};\n</code></pre> <p>Run your migration command to apply.</p>"},{"location":"mfa/#2-install-dependencies","title":"2. Install Dependencies","text":"<ul> <li>For TOTP: <code>composer require robthree/twofactorauth</code></li> <li>For SMS:   See Lightpack SMS documentation (Twilio, etc.)</li> </ul>"},{"location":"mfa/#3-configure-mfa","title":"3. Configure MFA","text":"<p>View <code>config/mfa.php</code> for available configuration options.</p>"},{"location":"mfa/#user-model-integration","title":"User Model Integration","text":"<p>Add the trait to your User model:</p> <pre><code>use Lightpack\\Mfa\\MfaTrait;\n\nclass User extends Model {\n    use MfaTrait;\n    // ...\n}\n</code></pre> <p>This extends your User model capabilities with methods:</p> <ul> <li><code>getMfaFactor()</code></li> <li><code>sendMfa()</code></li> <li><code>validateMfa($input)</code></li> </ul>"},{"location":"mfa/#usage-patterns","title":"Usage Patterns","text":""},{"location":"mfa/#enrollment","title":"Enrollment","text":"<ol> <li>TOTP: </li> <li>Generate secret: <code>TotpSetupHelper::generateSecret()</code></li> <li>Show QR: <code>TotpSetupHelper::getQrUri($secret, $user-&gt;email)</code></li> <li>Save secret to user: <code>$user-&gt;mfa_totp_secret = $secret; $user-&gt;save();</code></li> <li> <p>User scans QR with authenticator app.</p> </li> <li> <p>SMS/Email: </p> </li> <li>Ensure user\u2019s phone/email is set.</li> <li> <p>Set <code>$user-&gt;mfa_method = 'sms'</code> or <code>'email'</code>, <code>$user-&gt;save();</code></p> </li> <li> <p>Backup Codes: </p> </li> </ol> <p>Generate and show codes to user (store only hashes!)</p> <pre><code>$codes = BackupCodeHelper::generateCodes(); // array of codes\n$hashes = BackupCodeHelper::hashCodes($codes);\n$user-&gt;mfa_backup_codes = json_encode($hashes);\n$user-&gt;save();\n</code></pre>"},{"location":"mfa/#verification","title":"Verification","text":"<ul> <li>To send challenge: <code>$user-&gt;sendMfa(); // sends code via chosen factor</code></li> <li>To validate: <code>$user-&gt;validateMfa($input); // returns true/false</code></li> </ul>"},{"location":"mfa/#backup-codes","title":"Backup Codes","text":"<ul> <li>On form input, use:  </li> </ul> <pre><code>$hashes = json_decode($user-&gt;mfa_backup_codes, true);\n\n[$ok, $remaining] = BackupCodeHelper::verifyAndRemoveCode($hashes, $input);\n\nif ($ok) {\n    $user-&gt;mfa_backup_codes = json_encode($remaining);\n    $user-&gt;save();\n}\n</code></pre>"},{"location":"mfa/#totp-authenticator-app","title":"TOTP (Authenticator App)","text":"<ul> <li>Use <code>TotpSetupHelper</code> for QR code and secret generation.</li> <li>Validation is handled by TOTP factor automatically.</li> </ul>"},{"location":"mfa/#sms-email","title":"SMS &amp; Email","text":"<ul> <li>SMS uses the configured SMS provider (see Lightpack SMS docs).</li> <li>Email uses the built-in mail system.</li> </ul>"},{"location":"mfa/#example-using-totp","title":"Example using TOTP","text":""},{"location":"mfa/#1-enrolling-totp","title":"1. Enrolling TOTP","text":"<pre><code>$secret = TotpSetupHelper::generateSecret();\n$user-&gt;mfa_totp_secret = $secret;\n$user-&gt;mfa_method = 'totp';\n$user-&gt;save();\n\n$qr = TotpSetupHelper::getQrUri($secret, $user-&gt;email);\n// Show $qr in frontend for scanning\n</code></pre>"},{"location":"mfa/#2-sending-and-validating-mfa","title":"2. Sending and Validating MFA","text":"<pre><code>$user-&gt;sendMfa(); // Sends challenge via chosen factor\n\nif ($user-&gt;validateMfa($inputCode)) {\n    // MFA successful\n} else {\n    // MFA failed\n}\n</code></pre>"},{"location":"mfa/#3-generating-and-using-backup-codes","title":"3. Generating and Using Backup Codes","text":"<pre><code>$codes = BackupCodeHelper::generateCodes();\n$hashes = BackupCodeHelper::hashCodes($codes);\n$user-&gt;mfa_backup_codes = json_encode($hashes);\n$user-&gt;save();\n// Show $codes to user (never show hashes)\n</code></pre>"},{"location":"mfa/#extending-with-custom-factors","title":"Extending with Custom Factors","text":"<p>Create a new factor:</p> <pre><code>namespace App\\Mfa\\Factor;\nuse Lightpack\\Mfa\\MfaInterface;\nuse Lightpack\\Auth\\Models\\AuthUser;\n\nclass MyPushMfa implements MfaInterface {\n    public function send(AuthUser $user): void {\n        // Send push notification\n    }\n    public function validate(AuthUser $user, ?string $input): bool {\n        // Validate push approval\n        return true;\n    }\n    public function getName(): string {\n        return 'push';\n    }\n}\n</code></pre> <p>Register in config:</p> <pre><code>'factors' =&gt; [\n    'push' =&gt; App\\Mfa\\Factor\\MyPushMfa::class,\n    // ...other factors\n]\n</code></pre>"},{"location":"mfa/#error-handling-security","title":"Error Handling &amp; Security","text":"<ul> <li>All secrets/codes are hashed or encrypted.</li> <li>Backup codes are one-time use.</li> <li>TOTP uses secure, random secrets.</li> <li>SMS/email codes are time-limited (implement expiry in your app logic).</li> <li>Always check return value of <code>validateMfa()</code>.</li> <li>Never log or expose secrets/codes.</li> </ul>"},{"location":"mfa/#best-practices-tips","title":"Best Practices &amp; Tips","text":"<ul> <li>Always offer backup codes for account recovery.</li> <li>Encourage TOTP as the most secure default.</li> <li>Use SMS/email as fallback, not primary, if possible.</li> <li>Rotate secrets/codes after use or on user request.</li> <li>Log failed attempts for monitoring.</li> </ul>"},{"location":"mfa/#faq-troubleshooting","title":"FAQ &amp; Troubleshooting","text":"<p>Q: How do I reset a user's MFA? A: Clear all MFA fields on the user model.</p> <p>Q: Can I require MFA for only some users? A: Use the <code>mfa_enabled</code> boolean field.</p> <p>Q: How do I support multiple factors per user? A: Extend your user model and UI view to allow selection/switching.</p> <p>Q: How do I test MFA? A: Use the 'null' factor or set predictable secrets/codes in dev.</p>"},{"location":"migrations/","title":"Migrations","text":"<p>Migrations provide version control for your database schema. Each migration is a PHP class that represents a set of database changes.</p> <p>Please note that only MySQL/MariaDB based migrations are supported.</p>"},{"location":"migrations/#creating-migrations","title":"Creating Migrations","text":"<p>To create a new migration file, fire this command from console:</p> <pre><code>php console create:migration create_table_products\n</code></pre> <p>This will create the migration file prefixed with current datetime in <code>database/migrations</code> folder. The migration class contains methods <code>up()</code> and <code>down()</code>.</p> <p>The <code>up()</code> method contains definition for required schema changes. Any reverse operations should go inside <code>down()</code> folder.</p> Method Called when Purpose Common contents <code>up()</code> When you apply or run a migration Build or evolve the schema\u2014create tables, add columns/indexes/constraints, insert seed data that must exist, rename things, etc. DDL or data-manipulating statements written in the migration DSL <code>down()</code> When you roll back or undo a migration Reverse whatever <code>up()</code> did so the database returns to its previous state The inverse DDL (drop tables, remove columns, delete seed rows, etc.) <p>In short: <code>up()</code> is the do part of a migration; <code>down()</code> is the undo.</p>"},{"location":"migrations/#running-migrations","title":"Running Migrations","text":"<p>To run your migration files:</p> <pre><code>php console migrate:up\n</code></pre> <p>This command will run the <code>up()</code> method in all the migration scripts defined inside database/migrations folder. </p> <p>To track the files that have been migrated, it will also create a <code>migrations</code> table in the database.</p>"},{"location":"migrations/#rollback-migrations","title":"Rollback Migrations","text":"<p>To rollback or undo all your migrations:</p> <pre><code>php console migrate:down\n</code></pre> <p>This will run the <code>down()</code> method in all the migration scripts inside database/migrations folder.</p> <p>To rollback a limited number of migrations, provide the <code>steps</code> flag:</p> <pre><code>php console migrate:down --steps=2\n</code></pre> <p>This will rollback last two batches of migrations if present.</p>"},{"location":"migrations/#defining-migrations","title":"Defining Migrations","text":"<p>The following documentation details about creating/modifying tables, columns, and indexes.</p>"},{"location":"migrations/#create-table","title":"Create Table","text":"<pre><code>public function up(): void\n{\n    $this-&gt;create('users', function(Table $table) {\n        $table-&gt;id();\n        $table-&gt;varchar('name');\n        $table-&gt;varchar('email');\n    });\n}\n\npublic function down(): void\n{\n    $this-&gt;drop('users');\n}\n</code></pre>"},{"location":"migrations/#rename-table","title":"Rename Table","text":"<pre><code>public function up(): void\n{\n    $this-&gt;rename('users', 'customers');\n}\n\npublic function down(): void\n{\n    $this-&gt;rename('customers', 'users');\n}\n</code></pre>"},{"location":"migrations/#alter-table","title":"Alter Table","text":"<p>You may alter an existing table definition as documented below.</p>"},{"location":"migrations/#add-new-columns","title":"Add New Columns","text":"<pre><code>public function up(): void\n{\n    $this-&gt;alter('users')-&gt;add(function(Table $table) {\n        $table-&gt;varchar('password');\n        $table-&gt;timestamps();\n    });\n}\n</code></pre>"},{"location":"migrations/#modify-existing-columns","title":"Modify Existing Columns","text":"<pre><code>public function up(): void\n{\n    $this-&gt;alter('users')-&gt;modify(function(Table $table) {\n        $table-&gt;varchar('name', 55);\n    });\n}\n</code></pre>"},{"location":"migrations/#drop-existing-columns","title":"Drop Existing Columns","text":"<pre><code>public function up(): void\n{\n    $this-&gt;alter('users')-&gt;modify(function(Table $table) {\n        $table-&gt;dropColumn('password');\n    });\n}\n</code></pre>"},{"location":"migrations/#table-columns","title":"Table Columns","text":"<p>This documentation summarizes all available column types, their configuration options, and usage patterns.</p>"},{"location":"migrations/#numeric-columns","title":"Numeric Columns","text":"<ul> <li>id(string $name = 'id'): BIGINT UNSIGNED AUTO_INCREMENT primary key</li> <li>int(string $name, int $length = 11): INT</li> <li>bigint(string $name): BIGINT</li> <li>smallint(string $name): SMALLINT</li> <li>tinyint(string $name): TINYINT</li> <li>decimal(string $name, int $precision = 10, int $scale = 2): DECIMAL(precision, scale)</li> </ul>"},{"location":"migrations/#stringtext-columns","title":"String/Text Columns","text":"<ul> <li>varchar(string $name, int $length = 255): VARCHAR(length)</li> <li>char(string $name, int $length = 255): CHAR(length)</li> <li>text(string $name): TEXT</li> <li>tinytext(string $name): TINYTEXT</li> <li>mediumtext(string $name): MEDIUMTEXT</li> <li>longtext(string $name): LONGTEXT</li> <li>enum(string $name, array $values): ENUM(values)</li> <li>json(string $name): JSON</li> </ul>"},{"location":"migrations/#datetime-columns","title":"Date/Time Columns","text":"<ul> <li>date(string $name): DATE</li> <li>time(string $name): TIME</li> <li>datetime(string $name): DATETIME</li> <li>timestamp(string $name): TIMESTAMP</li> <li>year(string $name): YEAR</li> <li>createdAt(): DATETIME, default CURRENT_TIMESTAMP</li> <li>updatedAt(): DATETIME, nullable, ON UPDATE CURRENT_TIMESTAMP</li> <li>deletedAt(): DATETIME, nullable</li> <li>timestamps(): Adds both createdAt and updatedAt</li> </ul>"},{"location":"migrations/#booleanbit-columns","title":"Boolean/Bit Columns","text":"<ul> <li>boolean(string $name, bool $default = false): TINYINT(1), default 0/1</li> </ul>"},{"location":"migrations/#special-columns","title":"Special Columns","text":"<ul> <li>ipAddress(string $name = 'ip_address'): VARCHAR(45) for IPv4/IPv6</li> <li>macAddress(string $name = 'mac_address'): VARCHAR(17)</li> <li>morphs(string $name): Adds <code>{name}_id</code> (BIGINT UNSIGNED) and <code>{name}_type</code> (VARCHAR(255)) for polymorphic relations</li> </ul>"},{"location":"migrations/#column-configuration-via-column-object","title":"Column Configuration (via Column object)","text":"<p>All column methods return a <code>Column</code> object, allowing further configuration: - type(string $type): Set SQL type manually - length(int $length): Set length for applicable types - default(mixed $value): Set default value - nullable(): Mark column as nullable - attribute(string $attr): Add SQL attribute (e.g., UNSIGNED, ZEROFILL) - increments(): Set AUTO_INCREMENT</p> <p>Example:</p> <pre><code>$table-&gt;varchar('username', 50)-&gt;unique()-&gt;nullable();\n$table-&gt;int('age')-&gt;default(0);\n$table-&gt;decimal('balance', 12, 2)-&gt;attribute('UNSIGNED');\n</code></pre>"},{"location":"migrations/#table-indexes","title":"Table Indexes","text":"<p>Supported Index Types</p> <ul> <li>Primary Key</li> <li>Unique Index</li> <li>Regular Index</li> <li>Fulltext Index</li> <li>Spatial Index</li> </ul>"},{"location":"migrations/#primary","title":"primary()","text":"<ul> <li>Defines a primary key (single or composite).</li> <li>primary(string|array $columns)</li> </ul> <pre><code>// single primary key\n$table-&gt;primary('id');\n\n// composite key\n$table-&gt;primary(['user_id', 'post_id']);\n</code></pre>"},{"location":"migrations/#dropprimary","title":"dropPrimary()","text":"<ul> <li>Drops the primary key constraint (not the column).</li> </ul> <pre><code>$table-&gt;dropPrimary();\n</code></pre>"},{"location":"migrations/#unique","title":"unique()","text":"<ul> <li>Adds a unique index to one or more columns.</li> <li><code>unique(string|array $columns, ?string $indexName = null)</code></li> <li>Supports custom unique index name.</li> </ul> <pre><code>$table-&gt;unique('email');\n$table-&gt;unique(['first', 'last'], 'name_unique');\n</code></pre>"},{"location":"migrations/#dropunique","title":"dropUnique()","text":"<ul> <li>Drops a unique index by name.</li> <li><code>dropUnique(string $indexName)</code></li> </ul> <pre><code>$table-&gt;dropUnique('email');\n$table-&gt;unique(['first', 'last'], 'name_unique');\n</code></pre>"},{"location":"migrations/#index","title":"index()","text":"<ul> <li>Adds a regular (non-unique) index.</li> <li><code>index(string|array $columns, ?string $indexName = null)</code></li> <li>Supports custom index name.</li> </ul> <pre><code>$table-&gt;index('created_at');\n$table-&gt;index(['user_id', 'status'], 'user_status_idx');\n</code></pre>"},{"location":"migrations/#dropindex","title":"dropIndex()","text":"<ul> <li>Drops a regular index by name.</li> <li><code>dropIndex(string $indexName)</code></li> </ul> <pre><code>$this-&gt;dropIndex('user_status_idx');\n</code></pre>"},{"location":"migrations/#fulltext","title":"fulltext()","text":"<ul> <li>Adds a FULLTEXT index for text search.</li> <li><code>fulltext(string|array $columns, ?string $indexName = null)</code></li> <li>Supports custom full text index name.</li> </ul> <pre><code>$table-&gt;fulltext('body');\n$table-&gt;fulltext(['title', 'body'], 'post_fulltext');\n</code></pre>"},{"location":"migrations/#dropfulltext","title":"dropFulltext()","text":"<ul> <li>Drops one or more FULLTEXT indexes by name.</li> <li><code>dropFulltext(string ...$indexName)</code></li> </ul> <pre><code>$table-&gt;dropFulltext('post_fulltext');\n</code></pre>"},{"location":"migrations/#spatial","title":"spatial()","text":"<ul> <li>Adds a SPATIAL index for GIS data.</li> <li><code>spatial(string|array $columns, ?string $indexName = null)</code></li> <li>Support passing custom spatial index name.</li> </ul> <pre><code>$table-&gt;spatial('location', 'loc_idx');\n</code></pre>"},{"location":"migrations/#dropspatial","title":"dropSpatial()","text":"<ul> <li>Drops a SPATIAL index by name.</li> <li><code>dropSpatial(string $indexName)</code></li> </ul> <pre><code>$this-&gt;dropSpatial('loc_idx');\n</code></pre>"},{"location":"migrations/#foreign-keys","title":"Foreign Keys","text":"<p>Foreign keys enforce referential integrity between tables, ensuring that a column (or set of columns) in one table matches the primary key or unique key in another table. Foreign keys can be defined during table creation or added/removed during schema alteration. The following document details the support for working with foreign keys.</p>"},{"location":"migrations/#foreignkey","title":"foreignKey()","text":"<ul> <li><code>foreignKey(string $column)</code></li> <li>Defines a foreign key on the specified column.</li> </ul> <pre><code>$table-&gt;foreignKey('user_id')\n    -&gt;references('id')\n    -&gt;on('users')\n    -&gt;onDelete('CASCADE') // CASCADE, SET NULL, RESTRICT\n    -&gt;onUpdate('CASCADE'); // CASCADE, SET NULL, RESTRICT\n</code></pre>"},{"location":"migrations/#dropforeign","title":"dropForeign()","text":"<ul> <li><code>dropForeign(string ...$constraintNames)</code></li> <li>Drop one or more foreign key constraints by name.</li> </ul> <pre><code>$table-&gt;dropForeign('users_user_id_foreign');\n</code></pre>"},{"location":"models/","title":"Models","text":""},{"location":"models/#introduction-to-orm-models","title":"Introduction to ORM Models","text":"<p>Lightpack ORM is an Active Record pattern implementation. Each model is a class directly corresponds to a single table in your database, and each instance of a model represents a single row within that table. The model not only holds data, but also encapsulates all the logic required to create, read, update, and delete (CRUD) records.</p> <p>Key Fundamentals of Active Record: - Class-to-Table Mapping: Each model class maps to a database table. For example, a <code>User</code> model maps to a <code>users</code> table. - Object-to-Row Mapping: Each model instance represents a row in the corresponding table. - CRUD Operations: Models provide methods to perform CRUD operations directly, such as <code>save()</code>, <code>find()</code>, <code>update()</code>, and <code>delete()</code>, without needing to write SQL manually.</p> <p>The following sections will explore how to define models, establish relationships, and utilize the full capabilities of the ORM system.</p> <p>Consider that you have a <code>products</code> table in your database.</p> <pre><code>Table: products\n-------------------------------------------------\nid, name, size, color, status\n-------------------------------------------------\n</code></pre> <p>Then you should define a <code>Product</code> model in <code>app/Models</code> folder.</p>"},{"location":"models/#defining-model","title":"Defining Model","text":"<p>Fire this command to generate a model from your terminal inside your project root.</p> <pre><code>php console create:model Product --table=products\n</code></pre> <p>This should have created <code>Product</code> model in <code>app/Models</code> folder.</p> <pre><code>class Product extends Model\n{\n    protected $table = 'products';\n\n    protected $primaryKey = 'id';\n\n    protected $timestamps = false;\n}\n</code></pre> <p>Defining your model in this manner gives you access to a number of utility methods to deal with records in your <code>products</code> table.</p>"},{"location":"models/#performing-crud","title":"Performing CRUD","text":"<p>Once the model class is defined, performing CRUD operations per single database record becomes very easy. You do not need to manually wire-up raw SQL queries for:</p> <ul> <li>(C) creating a new record, </li> <li>(R) reading an existing record, </li> <li>(U) update an existing record, </li> <li>(D) or delete an existing record.</li> </ul>"},{"location":"models/#create","title":"Create","text":"<p>Set properties on your new model and simply call the inherited method <code>insert()</code> to insert a new record.</p> <pre><code>// Create the instance\n$product = new Product;\n\n// Set product properties\n$product-&gt;name = 'ACME Shoes';\n$product-&gt;size = 10;\n$product-&gt;color = 'black'\n\n// Create new product\n$product-&gt;insert();\n</code></pre>"},{"location":"models/#last-insert-id","title":"Last Insert ID","text":"<p>If your table's primary key is an auto-incrementing field, you can get the last insert id:</p> <pre><code>$product-&gt;lastInsertId();\n</code></pre>"},{"location":"models/#manual-primary-key","title":"Manual Primary Key","text":"<p>If your table's primary key is a non auto-incrementing field, you must override the inherited model attribute <code>autoIncrements</code> to false.</p> <pre><code>class Product extends Model\n{\n    protected $autoIncrements = false;\n}\n</code></pre> <p>Now when calling <code>insert()</code> method, you must pass a unique primary key value for the new record to be created.</p> <pre><code>// Create the instance\n$product = new Product;\n\n// Set product properties\n$product-&gt;id = 'sku1000';\n$product-&gt;name = 'ACME Shoes';\n$product-&gt;size = 10;\n$product-&gt;color = 'black'\n\n// Create new product\n$product-&gt;insert();\n</code></pre>"},{"location":"models/#read","title":"Read","text":"<p>You can easily fetch a record by its ID when constructing the model. </p> <pre><code>$product = new Product(23);\n</code></pre> <p>Now you can access the column values as model properties.</p> <pre><code>echo $product-&gt;title;\necho $product-&gt;size;\necho $product-&gt;color;\n</code></pre>"},{"location":"models/#update","title":"Update","text":"<p>Use the <code>update()</code> method to update an existing record in the database table. You first need to instantiate the model using the primary key of the table.</p> <pre><code>// Get an existing product having id: 23\n$product = new Product(23);\n\n// Set product properties to update\n$product-&gt;name = 'ACME Footwear';\n$product-&gt;size = 11;\n$product-&gt;color = 'brown'\n\n// Update the product\n$product-&gt;update();\n</code></pre>"},{"location":"models/#delete","title":"Delete","text":"<p>Simply call the <code>delete()</code> passing it the id of the record to be deleted from database.</p> <pre><code>(new Product)-&gt;delete(23);\n</code></pre> <p>If you already have an existing instance of model, you can call <code>delete()</code> method there too.</p> <pre><code>$product = new Product(23);\n$product-&gt;delete(); // passing id not required\n</code></pre>"},{"location":"models/#timestamps","title":"Timestamps","text":"<p>Consider products table:</p> <pre><code>Table: products\n-------------------------------------------------\nid, name, price, created_at, updated_at\n-------------------------------------------------\n</code></pre> <p>Setting <code>$timestamps</code> property to <code>true</code> automatically sets values for created_at and updated_at columns in your table. So when you create a new product or update an existing product, you don't have to manually set values for these columns.</p> <p>In order for timestamps to work, the table must have created_at and updated_at columns both.</p>"},{"location":"models/#refetch","title":"Refetch","text":"<p>Sometimes, the data in your existing model instance can become outdated\u2014especially if changes are made to the database from somewhere else in your application. </p> <p>For an example, consider the scenario where the <code>timestamps</code> attribute in model class definition is set to true.</p> <pre><code>class Product extends Model\n{\n    protected $timestamps = true;\n}\n</code></pre> <p>In such case, performing an <code>insert()</code> or <code>update()</code> automatically sets created_at and updated_at columns. This happens as a side-effect of the framework's ORM implementation as convinience. </p> <pre><code>/**\n * created_at, updated_at column is set automatically\n */\n$product-&gt;insert(); \n</code></pre> <p>Now if you try this:</p> <pre><code>echo $product-&gt;created_at; // null\necho $product-&gt;updated_at; // null\n</code></pre> <p>To ensure you are working with the latest data for the current record from the database, you can call <code>refetch()</code> method.</p> <pre><code>$product = $product-&gt;refetch();\n</code></pre> <p><code>$product</code> will contain the latest data. If the record was deleted or the primary key isn\u2019t set, it will return <code>null</code>.</p>"},{"location":"models/#attribute-casting","title":"Attribute Casting","text":"<p>Attribute casting converts model attributes to a specific type (like integer, boolean, array, or date) when you access them, and back to a database-friendly format when you save them.</p>"},{"location":"models/#supported-cast-types","title":"Supported Cast Types","text":"Cast Type Description &amp; Example <code>int</code> / <code>integer</code> Converts to integer: <code>'123'</code> \u2192 <code>123</code> <code>float</code> / <code>double</code> Converts to float: <code>'123.45'</code> \u2192 <code>123.45</code> <code>string</code> Converts to string: <code>123</code> \u2192 <code>'123'</code> <code>bool</code> / <code>boolean</code> Converts to boolean: <code>'1'</code>, <code>1</code>, <code>'true'</code> \u2192 <code>true</code> <code>array</code> / <code>json</code> Converts JSON string to array and vice versa <code>date</code> Converts to <code>Y-m-d</code> string or from <code>DateTime</code> <code>datetime</code> Converts to <code>DateTime</code> object or from string <code>timestamp</code> Converts to Unix timestamp (int or string)"},{"location":"models/#example-usage","title":"Example Usage","text":"<p>Suppose your <code>User</code> model has a <code>settings</code> column that stores JSON, and a <code>created_at</code> column for timestamps. You can define casts like this:</p> <pre><code>class User extends Model\n{\n    protected $casts = [\n        'settings'   =&gt; 'array',\n        'created_at' =&gt; 'datetime',\n        'active'     =&gt; 'bool',\n        'score'      =&gt; 'int',\n    ];\n}\n</code></pre> <p>Now, whenever you access <code>$user-&gt;settings</code>, you\u2019ll get an array. <code>$user-&gt;created_at</code> will be a <code>DateTime</code> object, and so on.</p>"},{"location":"models/#how-casting-works","title":"How Casting Works","text":"<ul> <li>On retrieval: The value is converted to the specified type automatically.</li> <li>On save: The value is converted back (uncast) to a database-friendly format.</li> <li>Null values: Always remain <code>null</code>\u2014no conversion is performed.</li> <li>Unknown types: The value is returned as-is.</li> </ul>"},{"location":"models/#common-pitfalls","title":"Common Pitfalls","text":"<ul> <li>Make sure your database column type matches the cast (e.g., don\u2019t cast a string column as an array unless it stores JSON).</li> <li>Invalid input (like malformed JSON or dates) will throw exceptions\u2014handle these in your code if needed.</li> </ul>"},{"location":"models/#cloning-a-model","title":"Cloning a Model","text":"<p>There may be times when you want to create a new record in your database that\u2019s almost identical to an existing one\u2014without re-entering all the data. The <code>clone</code> method makes this easy: it creates a new model instance with the same attribute values as the original, but leaves out the primary key and timestamps, so you can safely save it as a new record.</p> <p>This is especially useful for duplicating templates, copying products, or quickly creating similar entries.</p> <p>How it works: - The new instance copies all attributes from the original, except for the primary key (<code>id</code>), <code>created_at</code>, and <code>updated_at</code> fields. - You can also specify additional fields to exclude if needed. - You can only clone an existing record (one that already exists in the database).</p> <p>Example: Let\u2019s say you want to duplicate a product but change its name:</p> <pre><code>$original = new Product(23); // Load an existing product\n$copy = $original-&gt;clone();  // Create a new instance with the same data\n\n$copy-&gt;name = 'New Product Name';\n$copy-&gt;insert(); // Save as a new product in the database\n</code></pre> <p>If you want to exclude more fields from being copied, just pass them as an array:</p> <pre><code>$copy = $original-&gt;clone(['description', 'price']);\n</code></pre> <p>If you try to clone a model that doesn\u2019t exist in the database, you\u2019ll get an error.</p>"},{"location":"models/#tracking-unsaved-changes","title":"Tracking Unsaved Changes","text":"<p>When working with models, you may want to know if you\u2019ve made changes that haven\u2019t been saved to the database yet. Lightpack models make this easy with two helpful methods:</p> Method What it does Example Output isDirty() Checks if the model (or a specific field) has unsaved changes true / false getDirty() Lists all fields that have unsaved changes ['name', 'email']"},{"location":"models/#why-is-this-useful","title":"Why is this useful?","text":"<ul> <li>Save only when needed: Avoid unnecessary database writes by saving only if something has changed.</li> <li>User feedback: Warn users if they try to leave a page with unsaved changes.</li> <li>Debugging: See exactly what\u2019s different before saving.</li> </ul>"},{"location":"models/#how-to-use","title":"How to use","text":"<p>Check if anything changed:</p> <pre><code>$user = User::find(1);\n$user-&gt;name = 'New Name';\n\nif ($user-&gt;isDirty()) {\n    // There are unsaved changes\n}\n</code></pre> <p>Check if a specific field changed:</p> <pre><code>if ($user-&gt;isDirty('name')) {\n    // The 'name' field was modified\n}\n</code></pre> <p>See which fields changed:</p> <pre><code>$dirty = $user-&gt;getDirty(); // e.g., ['name', 'email']\n</code></pre>"},{"location":"models/#typical-scenarios","title":"Typical scenarios","text":"<ul> <li>Prevent saving when nothing has changed.</li> <li>Warn users before they leave a form with unsaved edits.</li> <li>Highlight changed fields in a review step.</li> </ul>"},{"location":"models/#example-send-email-verification-when-email-changes","title":"Example: Send Email Verification When Email Changes","text":"<p>Suppose you want to automatically send an email verification request whenever a user updates their profile and changes their email address. With <code>isDirty('email')</code>, you can easily detect this:</p> <pre><code>$user = new User(23);\n$user-&gt;name = 'John Doe';\n\nif ($user-&gt;isDirty('email')) { // false\n    $user-&gt;email_verified_at = null;\n}\n\n// Update user changes\n$user-&gt;update();\n\nif($user-&gt;email_verified_at == null) {\n    // send verification mail\n}\n</code></pre> <p>In above example, only user's name was changed, so before saving the profile, <code>$user-&gt;isDirty('email')</code> check will be false.This way, you only send the verification request if the email was actually updated\u2014no need to compare values manually!</p> <p>Once the <code>insert()</code> or <code>update()</code> method is called on the model instance, the ORM clears all the dirty attributes. So <code>isDirty()</code> method returns false and <code>getDirty()</code> method returns empty array after model persistence.</p>"},{"location":"models/#query-builders","title":"Query Builders","text":"<p>Lightpack models are capable query builders too. </p> <p>To get a query builder on a model, call the static method <code>query()</code>:</p> <pre><code>$productQuery = Product::query();\n</code></pre> <p>Now you can access all the methods on query builders. Below are some example for using query builder on a model.</p> <p>Fetch all products</p> <pre><code>$products = Product::query()-&gt;all();\n</code></pre> <p>Fetch all active products</p> <pre><code>$products = Product::query()-&gt;where('active', '=', '1')-&gt;all();\n</code></pre> <p>Fetch products with matching ids</p> <pre><code>$products = Product::query()-&gt;whereIn('id', [1,2,3])-&gt;all();\n</code></pre> <p>Fetch all products with at least one order</p> <pre><code>$products = Product::query()-&gt;has('orders')-&gt;all();\n</code></pre> <p>The above is same as:</p> <pre><code>$products = Product::query()-&gt;has('orders', '&gt;', 0)-&gt;all();\n// or\n$products = Product::query()-&gt;has('orders', '&gt;=', 1)-&gt;all();\n</code></pre> <p>Fetch products with no orders</p> <pre><code>$products = Product::query()-&gt;has('orders', '=', 0)-&gt;all();\n</code></pre> <p>Fetch products with at least 2 orders</p> <pre><code>$products = Product::query()-&gt;has('orders', '&gt;', 1)-&gt;all();\n// or\n$products = Product::query()-&gt;has('orders', '&gt;=', 2)-&gt;all();\n</code></pre> <p>Fetch products with atmost 2 orders</p> <pre><code>$products = Product::query()-&gt;has('orders', '&lt;', 3)-&gt;all();\n// or\n$products = Product::query()-&gt;has('orders', '&lt;=', 2)-&gt;all();\n</code></pre> <p>Callbacks as query constraints</p> <p>You can even pass a callback as 4th parameter to <code>has()</code> method to add more constraints on relationship. For example, suppose you want to fetch products with atleast 2 paid orders.</p> <pre><code>$products = Product::query()-&gt;has('orders', '&gt;=', 2, function($q) {\n    $q-&gt;where('paid', '=', true);\n});\n</code></pre>"},{"location":"models/#query-filters","title":"Query Filters","text":"<p>Query filters provide a clean way to filter database records using model scopes. They allow you to encapsulate common query constraints and apply them dynamically.</p>"},{"location":"models/#defining-filter-scopes","title":"Defining Filter Scopes","text":"<p>Create filter scopes by adding methods prefixed with <code>scope</code> to your model:</p> <pre><code>use Lightpack\\Database\\Lucid\\Model;\n\nclass User extends Model\n{\n    protected $table = 'users';\n\n    protected function scopeStatus($query, $value)\n    {\n        $query-&gt;where('status', $value);\n    }\n\n    protected function scopeType($query, $value)\n    {\n        $query-&gt;where('type', $value);\n    }\n\n    protected function scopeRole($query, $value)\n    {\n        $query-&gt;where('role', $value);\n    }\n\n    protected function scopeSearch($query, $value)\n    {\n        $query-&gt;where('name', 'LIKE', \"%{$value}%\");\n    }\n}\n</code></pre>"},{"location":"models/#using-filters","title":"Using Filters","text":"<p>Apply filters using the static <code>filters()</code> method:</p> <pre><code>// Fetch all users\n$users = User::filters(['status' =&gt; 'active'])-&gt;all();\n\n// Fetch active users\n$users = User::filters(['status' =&gt; 'active'])-&gt;all();\n\n// Combine multiple filters\n$users = User::filters([\n    'status' =&gt; 'active',\n    'role' =&gt; 'admin',\n    'search' =&gt; 'john'\n])-&gt;all();\n</code></pre>"},{"location":"models/#type-hint-scope-parameters","title":"Type hint scope parameters","text":"<p>You can type hint <code>$query</code> and <code>$value</code> parameters for better code clarity:</p> <pre><code>class User extends Model\n{\n    protected function scopeTags(Query $query, array|string $value)\n    {\n        if (is_string($value)) {\n            $value = explode(',', $value);\n        }\n        $query-&gt;whereIn('tag', $value);\n    }\n}\n</code></pre> <pre><code>// Usage\n$users = User::filters([\n    'tags' =&gt; 'php,mysql,redis'\n])-&gt;all();\n</code></pre> <pre><code>// Or with array\n$users = User::filters([\n    'tags' =&gt; ['php', 'mysql', 'redis']\n])-&gt;all();\n</code></pre>"},{"location":"models/#global-scope","title":"Global Scope","text":"<p>Global scopes let you automatically apply common query conditions to all queries on a model\u2014ensuring consistent, safe, and DRY data access. This is especially powerful for multi-tenant applications, or any scenario where you want to transparently filter data for all operations.</p>"},{"location":"models/#what-is-a-global-scope","title":"What is a Global Scope?","text":"<p>A global scope is a rule that is always applied to every query for a model, whether you\u2019re fetching, updating, deleting, or counting records. This helps prevent accidental data leaks and reduces repetitive code.</p>"},{"location":"models/#how-to-define-a-global-scope","title":"How to Define a Global Scope","text":"<p>To add a global scope, override the inherited method <code>globalScope()</code> in your model. Any conditions you add to the <code>$query</code> will be automatically included in all queries for that model.</p> <p>Example: Restricting by Tenant</p> <pre><code>class TenantModel extends Model\n{\n    public function globalScope(Query $query)\n    {\n        // Only show records for tenant_id = 1\n        $query-&gt;where('tenant_id', 1);\n    }\n}\n</code></pre> <p>Now, any model inheriting from <code>TenantModel</code> will always include <code>WHERE tenant_id = 1</code> in its queries\u2014no matter what operation you perform.</p>"},{"location":"models/#why-is-this-powerful","title":"Why is this Powerful?","text":"<ul> <li>Security: Prevents users from accessing data outside their tenant.</li> <li>Consistency: No risk of forgetting to add the filter in a query.</li> <li>Simplicity: Write your code as if you\u2019re working with a single-tenant table.</li> </ul>"},{"location":"models/#real-world-example","title":"Real-World Example","text":"<p>Suppose you have a <code>users</code> table with a <code>tenant_id</code> column. By using a global scope, you can ensure that all queries only affect users belonging to the current tenant:</p> <pre><code>class User extends TenantModel\n{\n    protected $table = 'users';\n}\n</code></pre> <p>Now, all of these will only affect tenant 1:</p> <pre><code>User::query()-&gt;all();\nUser::query()-&gt;count();\nUser::query()-&gt;where('active', 1)-&gt;all();\nUser::query()-&gt;delete();\nUser::query()-&gt;update(['active' =&gt; 0]);\n</code></pre>"},{"location":"models/#best-practices","title":"Best Practices","text":"<ul> <li>Define global scopes for any rule that should always apply (tenancy, soft deletes, published status).</li> <li>Be careful: global scopes apply to all queries, including destructive ones like <code>delete()</code> and <code>update()</code>.</li> </ul>"},{"location":"models/#model-hooks","title":"Model Hooks","text":"<p>Lightpack Lucid models provide a set of protected lifecycle hook methods that allow you to inject custom logic before and after key persistence operations\u2014without global events, observers, or magic. These hooks allow to extend model behavior making your code organized and discoverable</p>"},{"location":"models/#available-hook-methods","title":"Available Hook Methods","text":"Hook When is it called? <code>beforeInsert()</code> Before <code>insert()</code> <code>afterInsert()</code> After <code>insert()</code> <code>beforeUpdate()</code> Before <code>update()</code> <code>afterUpdate()</code> After <code>update()</code> <code>beforeDelete()</code> Before <code>delete()</code> <code>afterDelete()</code> After <code>delete()</code>"},{"location":"models/#how-and-why-to-use-hooks","title":"How and Why to Use Hooks","text":"<ul> <li>Validation: Enforce business rules before DB changes</li> <li>Mutation: Mutate/transform data (e.g., hash, normalize)</li> <li>Side Effects: Trigger actions after DB changes (e.g., notifications, cache)</li> <li>Prevention: Abort operation by throwing exceptions</li> <li>Audit/Logging: Record changes or actions</li> </ul>"},{"location":"models/#practical-examples-for-each-hook","title":"Practical Examples for Each Hook","text":""},{"location":"models/#beforeinsert","title":"beforeInsert()","text":"<p>Called before inserting a new record:</p> <pre><code>protected function beforeInsert()\n{\n    // Example: Hash password before storing\n    if (!empty($this-&gt;password)) {\n        $this-&gt;password = password_hash($this-&gt;password, PASSWORD_DEFAULT);\n    }\n    // Example: Set created_by\n    $this-&gt;created_by = Auth::userId();\n}\n</code></pre>"},{"location":"models/#afterinsert","title":"afterInsert()","text":"<p>Called after inserting a new record:</p> <pre><code>protected function afterInsert()\n{\n    // Example: Send welcome email\n    Mailer::sendWelcome($this-&gt;email);\n    // Example: Log creation\n    Audit::log('Created user: ' . $this-&gt;id);\n}\n</code></pre>"},{"location":"models/#beforeupdate","title":"beforeUpdate()","text":"<p>Called before updating an existing record:</p> <pre><code>protected function beforeUpdate()\n{\n    // Example: Prevent email change\n    if ($this-&gt;isDirty('email')) {\n        throw new \\RuntimeException('Email cannot be changed.');\n    }\n    // Example: Update audit fields\n    $this-&gt;updated_by = Auth::userId();\n}\n</code></pre>"},{"location":"models/#afterupdate","title":"afterUpdate()","text":"<p>Called after updating an existing record:</p> <pre><code>protected function afterUpdate()\n{\n    // Example: Invalidate related cache\n    Cache::forget('user_' . $this-&gt;id);\n    // Example: Notify admin\n    Notification::admin('User updated: ' . $this-&gt;id);\n}\n</code></pre>"},{"location":"models/#beforedelete","title":"beforeDelete()","text":"<p>Called before deleting a record:</p> <pre><code>protected function beforeDelete()\n{\n    // Example: Prevent deletion if related orders exist\n    if ($this-&gt;orders()-&gt;count() &gt; 0) {\n        throw new \\RuntimeException('Cannot delete user with orders.');\n    }\n    // Example: Archive data\n    ArchiveService::archive($this-&gt;toArray());\n}\n</code></pre>"},{"location":"models/#afterdelete","title":"afterDelete()","text":"<p>Called after deleting a record:</p> <pre><code>protected function afterDelete()\n{\n    // Example: Remove from search index\n    SearchIndex::remove('users', $this-&gt;id);\n    // Example: Log deletion\n    Audit::log('Deleted user: ' . $this-&gt;id);\n}\n</code></pre>"},{"location":"models/#more-realistic-scenarios","title":"More Realistic Scenarios","text":"<ul> <li>beforeInsert: Generate a UUID PK for non-auto-increment models</li> <li>beforeUpdate: Prevent updates to immutable fields (e.g., SSN)</li> <li>afterInsert: Trigger onboarding workflow</li> <li>afterUpdate: Sync changes to external APIs</li> <li>beforeDelete: Clean up dependent child records (manual cascade)</li> <li>afterDelete: Notify other systems of deletion</li> </ul>"},{"location":"models/#best-practices-gotchas","title":"Best Practices &amp; Gotchas","text":"<ul> <li>Keep hooks focused: Only put logic relevant to that model and operation</li> <li>Throw exceptions to abort: Any exception will prevent the operation</li> <li>Avoid heavy side effects in hooks: For long-running tasks, consider queueing</li> <li>No global events: All logic must be per-model, explicit, and discoverable</li> <li>Avoid external dependencies if possible: Keep hooks self-contained</li> </ul>"},{"location":"models/#cast-into-array","title":"Cast Into Array","text":"<p>To convert loaded models into array, use <code>toArray()</code> method.</p> <pre><code>$product = new Product(23);\n$productArray = $product-&gt;toArray();\n</code></pre> <pre><code>$products = Product::query()-&gt;limit(10)-&gt;all();\n$productsArray = $products-&gt;toArray();\n</code></pre>"},{"location":"models/#hidden-attributes","title":"Hidden Attributes","text":"<p>Sometimes, you don\u2019t want certain model attributes to show up when converting your models to arrays or serializing them (for example, when returning JSON responses from an API). The <code>$hidden</code> property on your model lets you easily hide sensitive or irrelevant fields from output.</p>"},{"location":"models/#why-hide-attributes","title":"Why Hide Attributes?","text":"<ul> <li>Security: Prevent leaking sensitive data (like passwords, tokens, internal IDs).</li> <li>Clean Output: Remove fields that aren\u2019t needed by the client or API consumer.</li> <li>Consistency: Ensure only intended data is exposed in API responses or exports.</li> </ul>"},{"location":"models/#how-to-use_1","title":"How to Use","text":"<p>Just define the <code>$hidden</code> property as an array of attribute names in your model:</p> <pre><code>class User extends Model\n{\n    protected $hidden = [\n        'password',\n        'remember_token',\n        'internal_notes',\n    ];\n}\n</code></pre> <p>Now, when you call <code>toArray()</code> or serialize the model (e.g., for JSON), these fields will be automatically excluded:</p> <pre><code>$user = new User(23);\n$userArray = $user-&gt;toArray();\n// 'password', 'remember_token', and 'internal_notes' will NOT appear in $userArray\n</code></pre> <p>This also applies to collections:</p> <pre><code>$users = User::query()-&gt;all();\n$usersArray = $users-&gt;toArray(); // All hidden fields are excluded for every user\n</code></pre>"},{"location":"models/#best-practices_1","title":"Best Practices","text":"<ul> <li>Always hide sensitive fields like passwords and tokens.</li> <li>Only include what\u2019s necessary for your consumers\u2014less is more.</li> <li>Hidden attributes only affect serialization/array conversion\u2014they are still accessible in your code.</li> </ul>"},{"location":"modules/","title":"Modules","text":"<p>Modules provide an alternate code organization architecture that scales well with your ever increasing codebase. They are completely independent components that reside in their own folders.</p> <p>Lighpack provides out of the box support for modules \ud83d\udc7b</p> <p>For example, when developing an ecommerce app along with a blog for better SEO promotion, in the typical <code>MVC</code> fashion, you will end up having something similar code  structure:</p> <pre><code>lightpack\n    |--- app\n        |--- controllers\n            |--- TagController.php\n            |--- BlogController.php\n            |--- BrandController.php\n            |--- ProductController.php\n            |--- CategoryController.php\n        |--- models\n            |--- TagModel.php\n            |--- BlogModel.php\n            |--- BrandModel.php\n            |--- ProductModel.php\n            |--- CategoryModel.php\n        |--- views\n            |--- tag.php\n            |--- blog.php\n            |--- brand.php\n            |--- product.php\n            |--- category.php\n</code></pre> <p>There is no problem with above organization and infact the most recommended too. But some of you might soon realize that organizing codebase based on features probably  scales well and is easier to manage and distribute in the long run.</p> <p>The same above features will end up in a codebase structure like this in a <code>modules</code>  based approach.</p> <pre><code>lightpack\n    |--- modules\n        |--- Shop\n            |--- controllers\n                |--- BrandController.php\n                |--- ProductController.php\n                |--- CategoryController.php\n            |--- models\n                |--- BrandModel.php\n                |--- ProductModel.php\n                |--- CategoryModel.php\n            |--- views\n                |--- brand.php\n                |--- product.php\n                |--- category.php\n        |--- Blog\n            |--- controllers\n                |--- TagController.php\n                |--- BlogController.php\n            |--- models\n                |-- TagModel.php\n                |-- BlogModel.php\n            |--- views\n                |--- tag.php\n                |--- blog.php\n</code></pre> <p>As you can see, modules will start to make sense for really large codebases. So its upto you to decide how you would like to organize your codebase.</p> <p> You may start in the typical <code>MVC</code> fashion and once your project becomes too big demanding multiple of features, you may decide to move with <code>modules</code>. </p>"},{"location":"moment/","title":"Moment Utility","text":"<p>Lightpack\u2019s <code>Moment</code> is a simple, expressive, and timezone-aware date/time utility for PHP. It is designed for clarity, practical use, and covers the most common date/time operations with a clean, chainable API.</p>"},{"location":"moment/#key-features","title":"Key Features","text":"<ul> <li>Timezone support: Default is UTC, but you can set any valid timezone.</li> <li>Flexible formatting: Chain <code>format()</code> to set output format for all methods.</li> <li>Chainable configuration: All config methods return <code>$this</code> for fluent API.</li> <li>Safe error handling: Throws <code>InvalidArgumentException</code> for invalid timezones or date strings.</li> <li>Comprehensive: Covers today, tomorrow, yesterday, next/last weekday, month ends, travel, diff, human-friendly differences, and more.</li> </ul>"},{"location":"moment/#instantiation-timezone","title":"Instantiation &amp; Timezone","text":"<pre><code>use Lightpack\\Utils\\Moment;\n\n$moment = new Moment(); // Defaults to UTC\n$moment = new Moment('Asia/Kolkata'); // Custom timezone\n\n// Change timezone on the fly (chainable)\n$moment-&gt;setTimezone('Europe/Berlin');\n\n// Get current timezone\n$tz = $moment-&gt;getTimezone(); // e.g. 'Europe/Berlin'\n</code></pre>"},{"location":"moment/#formatting","title":"Formatting","text":"<ul> <li>Default output: <code>Y-m-d H:i:s</code></li> <li>Use <code>format()</code> to change output format (chainable)</li> </ul> <pre><code>$moment-&gt;format('d-M, Y H:ia')-&gt;now();\n$moment-&gt;format('Y/m/d')-&gt;today();\n</code></pre>"},{"location":"moment/#core-methods","title":"Core Methods","text":""},{"location":"moment/#now","title":"now","text":"<p>Returns current date/time (in set timezone).</p> <p>Parameters: - <code>?format</code> (string, optional): Output format. Defaults to the format set by <code>format()</code> or <code>Y-m-d H:i:s</code>.</p> <p>Examples:</p> <pre><code>$moment-&gt;now();\n$moment-&gt;now('d-M, Y');\n</code></pre>"},{"location":"moment/#today-tomorrow-yesterday","title":"today, tomorrow, yesterday","text":"<p>Returns the respective date string in the current timezone.</p> <p>Parameters: - <code>?format</code> (string, optional): Output format.</p> <p>Examples:</p> <pre><code>$moment-&gt;today();\n$moment-&gt;tomorrow('d-M, Y');\n$moment-&gt;yesterday();\n</code></pre>"},{"location":"moment/#next-last","title":"next, last","text":"<p>Returns the date string for the next or last occurrence of a weekday.</p> <p>Parameters: - <code>dayName</code> (string): Full or short weekday name (e.g., 'monday', 'mon'). - <code>?format</code> (string, optional): Output format.</p> <p>Examples:</p> <pre><code>$moment-&gt;next('monday');\n$moment-&gt;last('fri', 'Y-m-d');\n</code></pre>"},{"location":"moment/#thismonthend-nextmonthend-lastmonthend","title":"thisMonthEnd, nextMonthEnd, lastMonthEnd","text":"<p>Returns the last day of the current, next, or last month.</p> <p>Parameters: - <code>?format</code> (string, optional): Output format.</p> <p>Examples:</p> <pre><code>$moment-&gt;thisMonthEnd();\n$moment-&gt;nextMonthEnd('Y-m-d');\n$moment-&gt;lastMonthEnd();\n</code></pre>"},{"location":"moment/#travel","title":"travel","text":"<p>Returns a date/time string after applying a modifier to the current date/time.</p> <p>Parameters: - <code>modifier</code> (string): Any string accepted by <code>DateTime::modify()</code> (e.g., '+5 days', '-2 hours', 'noon', 'last day of next month'). - <code>?format</code> (string, optional): Output format.</p> <p>Examples:</p> <pre><code>$moment-&gt;travel('+5 days');\n$moment-&gt;travel('last day of this month', 'd-M, Y');\n</code></pre>"},{"location":"moment/#diff","title":"diff","text":"<p>Returns a <code>DateInterval</code> object for the absolute difference between two datetimes.</p> <p>Parameters: - <code>datetime1</code> (string) - <code>datetime2</code> (string)</p> <p>Examples:</p> <pre><code>$diff = $moment-&gt;diff('2021-07-23 14:25:45', '2019-03-14 08:23:12');\n$diff-&gt;y; // years\n$diff-&gt;m; // months\n$diff-&gt;d; // days\n$diff-&gt;h; // hours\n$diff-&gt;i; // minutes\n$diff-&gt;s; // seconds\n</code></pre>"},{"location":"moment/#daysbetween","title":"daysBetween","text":"<p>Returns the number of days between two dates (absolute).</p> <p>Parameters: - <code>datetime1</code> (string) - <code>datetime2</code> (string)</p> <p>Examples:</p> <pre><code>$days = $moment-&gt;daysBetween('2021-07-23', '2021-05-18');\n</code></pre>"},{"location":"moment/#fromnow","title":"fromNow","text":"<p>Returns a human-friendly difference string (e.g., 'just now', '5 minutes ago', '2 weeks ago').</p> <p>Parameters: - <code>datetime</code> (string, optional): Date/time string to compare to now. Defaults to <code>'now'</code>.</p> <p>Examples:</p> <pre><code>$moment-&gt;fromNow('2021-07-20 11:30:45');\n// Output: 'x days ago', etc.\n</code></pre>"},{"location":"moment/#create","title":"create","text":"<p>Returns a <code>DateTime</code> object in the current timezone. Throws on invalid input.</p> <p>Parameters: - <code>datetime</code> (string, optional): Date/time string. Defaults to <code>'now'</code>.</p> <p>Examples:</p> <pre><code>$dt = $moment-&gt;create();\n$dt = $moment-&gt;create('2021-07-23');\n$dt = $moment-&gt;create('2021-07-23 10:00:00');\n\n// Use all native DateTime methods:\n$moment-&gt;create()-&gt;modify('+2 hours')-&gt;format('Y-m-d H:i:s');\n</code></pre>"},{"location":"moment/#practical-examples","title":"Practical Examples","text":""},{"location":"moment/#chainable-formatting-timezone","title":"Chainable Formatting &amp; Timezone","text":"<pre><code>$moment-&gt;format('Y-m-d')-&gt;setTimezone('Asia/Kolkata')-&gt;now();\n</code></pre>"},{"location":"moment/#get-the-next-friday-in-custom-format","title":"Get the next Friday in custom format","text":"<pre><code>$moment-&gt;next('friday', 'd/m/Y');\n</code></pre>"},{"location":"moment/#get-human-friendly-difference","title":"Get human-friendly difference","text":"<pre><code>$moment-&gt;fromNow('2023-06-15 10:00:00'); // e.g. 'a year ago'\n</code></pre>"},{"location":"moment/#calculate-days-between-two-dates","title":"Calculate days between two dates","text":"<pre><code>$days = $moment-&gt;daysBetween('2024-01-01', '2024-01-31'); // 30\n</code></pre>"},{"location":"moment/#error-handling","title":"Error Handling","text":"<pre><code>try {\n    $moment-&gt;setTimezone('Invalid/Zone');\n} catch (\\InvalidArgumentException $e) {\n    // Handle invalid timezone\n}\n\ntry {\n    $moment-&gt;create('invalid-date');\n} catch (\\InvalidArgumentException $e) {\n    // Handle invalid date string\n}\n</code></pre>"},{"location":"mutex-lock/","title":"Lock Utility","text":"<p>The Lock utility provides a simple way to implement mutex locks in your application. It's ideal for ensuring that certain operations run exclusively. It uses Lightpack's Cache system with these key features:</p> <ul> <li>Atomic operations for reliability</li> <li>Automatic expiration via TTL</li> <li>Works with any cache driver</li> <li>No external dependencies</li> </ul> <p>You may create an instance of Lock class:</p> <pre><code>$lock = new Lightpack\\Utils\\Lock;\n</code></pre> <p>Or simply call the utility function <code>lock()</code> which returns Lock class instance. </p> <p>The two most important methods it exposes is: <code>acquire()</code> and <code>release()</code>.</p>"},{"location":"mutex-lock/#basic-usage","title":"Basic Usage","text":"<pre><code>// Try to acquire a lock\nif (lock()-&gt;acquire('daily-report')) {\n    try {\n        // generate daily report\n    } finally {\n        // Always release the lock\n        lock()-&gt;release('daily-report');\n    }\n}\n</code></pre>"},{"location":"mutex-lock/#lock-duration","title":"Lock Duration","text":"<p>By default, locks expire after 60 seconds. You can specify a custom duration:</p> <pre><code>// Lock for 5 minutes\nif (lock()-&gt;acquire('backup-process', 300)) {\n    // ...\n}\n</code></pre>"},{"location":"mutex-lock/#practical-scenarios","title":"Practical Scenarios","text":""},{"location":"mutex-lock/#1-scheduled-tasks","title":"1. Scheduled Tasks","text":"<p>Prevent multiple instances of a scheduled task from running simultaneously:</p> <pre><code>class DailyReportJob\n{\n    public function run()\n    {\n        // Only one instance can run at a time\n        if (lock()-&gt;acquire('daily-report') == false) {\n            echo \"Report generation already in progress\\n\";\n            return;\n        }\n\n        try {\n            // Your report generation logic here\n        } finally {\n            lock()-&gt;release('daily-report');\n        }\n    }\n}\n</code></pre>"},{"location":"mutex-lock/#2-restricting-multiple-payment-attempts","title":"2. Restricting multiple payment attempts","text":"<p>Implement a simple concurrency limit for API endpoints:</p> <pre><code>class PaymentController\n{\n    public function processPayment($orderId)\n    {\n        $lockKey = \"order:{$orderId}:payment\";\n\n        if (lock()-&gt;acquire($lockKey, 30) == false) {\n            throw new Exception('Payment already in progress');\n        }\n\n        try {\n            // Process payment\n        } finally {\n            lock()-&gt;release($lockKey);\n        }\n    }\n}\n</code></pre>"},{"location":"mutex-lock/#3-cache-regeneration","title":"3. Cache Regeneration","text":"<p>Prevent cache stampede when multiple requests try to regenerate expired cache:</p> <pre><code>class ProductCache\n{\n    public function getProduct($id)\n    {\n        $data = cache()-&gt;get(\"product:{$id}\");\n\n        if ($data) {\n            return $data;\n        }\n\n        // Prevent multiple regenerations\n        if (lock()-&gt;acquire(\"rebuild:product:{$id}\", 10) == false) {\n            // Wait and try getting from cache again\n            sleep(1);\n            return $this-&gt;cache-&gt;get(\"product:{$id}\");\n        }\n\n        try {\n            $data = $this-&gt;fetchProductData($id);\n            cache()-&gt;set(\"product:{$id}\", $data, 3600);\n            return $data;\n        } finally {\n            lock()-&gt;release(\"rebuild:product:{$id}\");\n        }\n    }\n}\n</code></pre>"},{"location":"mutex-lock/#best-practices","title":"Best Practices","text":"<ol> <li>Always Release Locks</li> <li>Use try/finally to ensure locks are released</li> <li> <p>Set appropriate TTL to auto-expire stale locks</p> </li> <li> <p>Lock Naming</p> </li> <li>Use descriptive lock names</li> <li>Add prefixes for different contexts</li> <li> <p>Include relevant IDs in lock names</p> </li> <li> <p>Lock Duration</p> </li> <li>Set TTL slightly longer than expected operation time</li> <li>Consider network latency and processing time</li> <li> <p>Don't set extremely long durations</p> </li> <li> <p>Error Handling</p> </li> <li>Always handle lock acquisition failure gracefully</li> <li>Have a fallback plan when locks can't be acquired</li> <li>Log lock-related issues for monitoring</li> </ol>"},{"location":"orm-introduction/","title":"Lucid ORM","text":"<p><code>Lucid ORM</code> is Lightpack's highly performant and sleek object relational mapper to help you with some of the most common tasks when dealing with relational databases.</p>"},{"location":"orm-introduction/#tradeoffs","title":"Tradeoffs","text":"<p>When it comes to data access patterns, there is a lot of debate about ORMs in any programming  community. Some even consider it an <code>anti-pattern</code>. Some hate it because it may introduce  possible <code>leaky-abstraction</code> and <code>cost performance</code>. Some even think that an  ORM makes simple things easy and difficult things dead difficult.</p> <p>And then there is a whole new concept of thinking about your business objects called Domain Driven Design that promotes thinking in terms of domain models.</p> <p>In that sense, Lightpack has no opinion about whether you should use or reject the concept of ORM at all. That being said, Lighpack does come with a dead simple abstraction  which you might like for its simplicity and performance.</p>"},{"location":"orm-introduction/#performance","title":"Performance","text":"<p>Lucid ORM is fast because of two major aspects in its design:</p> <ul> <li>It has a very small layer of abstraction.</li> <li>It doesn't use inflectors at run-time to make intelligent guesses about table names, relations, and primary keys. </li> </ul>"},{"location":"orm-introduction/#models","title":"Models","text":"<p>Lucid ORM provides support for models classes that represent records in your database table. It also provides few more capabilities that often come handy when dealing with relational databases.</p> <ul> <li>Before/After hooks</li> <li>Timestamps support</li> <li>Query builder access</li> </ul> <p>Learn more about models here.</p>"},{"location":"orm-introduction/#relationships","title":"Relationships","text":"<p>Lucid ORM is a simplified <code>Active Record</code> pattern implementation that also supports relationships for the most common use-case scenarios.</p> <p>Following relationships are supported:</p> <ul> <li>1:1 (One-to-one)</li> <li>1:N (One-to-many)</li> <li>N:N (Many-to-many)</li> </ul> <p>Learn more about relationships here.</p>"},{"location":"orm-introduction/#eager-loading","title":"Eager Loading","text":"<p>Lucid ORM supports eager loading for associated models to avoid the <code>N+1</code> query performance issue. </p> <p>Learn more about relationships here.</p>"},{"location":"otp-utils/","title":"OTP Utilities","text":"<p>Lightpack\u2019s <code>Otp</code> utility provides a fluent, flexible API for generating one-time passwords (OTPs) and codes for authentication, verification, or any scenario where you need a secure, random code.</p>"},{"location":"otp-utils/#overview","title":"Overview","text":"<ul> <li>Fluent API: Chain methods to configure code length, type, and charset.</li> <li>Types Supported: Numeric, alphabetic, alphanumeric, or custom charset.</li> <li>Length: 1\u201332 characters (defaults to 6 if invalid).</li> </ul>"},{"location":"otp-utils/#basic-usage","title":"Basic Usage","text":"<pre><code>use Lightpack\\Utils\\Otp;\n\n$otp = new Otp();\n$code = $otp-&gt;generate(); // 6-digit numeric code by default\n</code></pre>"},{"location":"otp-utils/#fluent-configuration","title":"Fluent Configuration","text":""},{"location":"otp-utils/#set-code-length","title":"Set Code Length","text":"<pre><code>$otp-&gt;length(4); // 4 characters\n</code></pre>"},{"location":"otp-utils/#set-code-type","title":"Set Code Type","text":"<ul> <li>Numeric: Only digits 0\u20139</li> <li>Alpha: Uppercase A\u2013Z</li> <li>Alnum: Uppercase A\u2013Z and digits 0\u20139</li> <li>Custom: Any charset you provide</li> </ul> <pre><code>$otp-&gt;type('numeric'); // Default, e.g. 123456\n$otp-&gt;type('alpha');   // e.g. ABCDEF\n$otp-&gt;type('alnum');   // e.g. 1A2B3C\n$otp-&gt;type('custom')-&gt;charset('XYZ123'); // e.g. 1Z2XY\n</code></pre>"},{"location":"otp-utils/#full-example","title":"Full Example","text":"<pre><code>$otp = (new Otp)\n    -&gt;length(8)\n    -&gt;type('alnum');\n\n$code = $otp-&gt;generate(); // e.g. 1A2B3C4D\n</code></pre>"},{"location":"otp-utils/#custom-charset","title":"Custom Charset","text":"<p>You can fully control the character set:</p> <pre><code>$otp = (new Otp)\n    -&gt;length(5)\n    -&gt;type('custom')\n    -&gt;charset('ABC123');\n\n$code = $otp-&gt;generate(); // e.g. 1B2CA\n</code></pre>"},{"location":"otp-utils/#edge-cases-defaults","title":"Edge Cases &amp; Defaults","text":"<ul> <li>If you set an invalid length (&lt;1 or &gt;32), the OTP will default to 6 characters.</li> <li>If you set a custom type but do not provide a charset, it defaults to uppercase letters and digits.</li> </ul>"},{"location":"password/","title":"Password Utilities","text":"<p>Lightpack provides a robust utility for password hashing, verification, random password generation, and strength checking. This helps you securely store user passwords and enforce good password practices in your application.</p>"},{"location":"password/#overview","title":"Overview","text":"<ul> <li>Hashing: Securely hash user passwords for storage (never store plain text passwords).</li> <li>Verification: Check if a user-supplied password matches a stored hash.</li> <li>Random Generation: Generate strong random passwords for users or system use.</li> <li>Strength Checking: Assess password strength according to best practices.</li> </ul> <p>You can get an instance of the utility via:</p> <pre><code>use Lightpack\\Utils\\Password;\n\n$password = new Password();\n</code></pre> <p>Or use the <code>password()</code> utility function.</p> <pre><code>$hash = password()-&gt;hash('secret');\n</code></pre>"},{"location":"password/#hashing-passwords","title":"Hashing Passwords","text":"<p>Hash a plain-text password for storage:</p> <pre><code>$hash = $password-&gt;hash('secret');\n// Store $hash in your database\n</code></pre> <ul> <li>Uses PHP's <code>password_hash()</code> with the best available algorithm.</li> <li>Output is a one-way, cryptographically secure hash.</li> </ul> <p>Tip: Never store or log plain-text passwords.</p>"},{"location":"password/#verifying-passwords","title":"Verifying Passwords","text":"<p>Check if a user-supplied password matches a stored hash:</p> <pre><code>if ($password-&gt;verify('user-input', $hashFromDb)) {\n    // Password is correct\n} else {\n    // Incorrect password\n}\n</code></pre> <ul> <li>Uses <code>password_verify()</code> under the hood.</li> <li>Safe against timing attacks.</li> </ul>"},{"location":"password/#generating-random-passwords","title":"Generating Random Passwords","text":"<p>Generate a random password string of a given length (default: 8, minimum: 6):</p> <pre><code>$random = $password-&gt;generate();      // 8 characters\n$random16 = $password-&gt;generate(16);  // 16 characters\n</code></pre> <ul> <li>Always includes at least one uppercase, one lowercase, one number, and one special character.</li> <li>Throws an exception if length is less than 6.</li> </ul> <p>Tip: Use this for \"reset password\" flows or to suggest strong passwords to users.</p>"},{"location":"password/#checking-password-strength","title":"Checking Password Strength","text":"<p>Assess the strength of a password:</p> <pre><code>$strength = $password-&gt;strength('A123#abc'); // 'strong', 'medium', or 'weak'\n</code></pre> <p>Rules: 1. At least 8 characters 2. At least one uppercase letter 3. At least one lowercase letter 4. At least one number 5. At least one special character</p> <p>Returns: - <code>'weak'</code> (meets 1-2 rules) - <code>'medium'</code> (meets 3-4 rules) - <code>'strong'</code> (meets all 5 rules)</p> <p>Tip: Use this to enforce password policies or provide feedback to users.</p>"},{"location":"password/#edge-cases-notes","title":"Edge Cases &amp; Notes","text":"<ul> <li><code>generate()</code> will always return a password meeting all strength rules (if length &gt;= 8).</li> <li>If you pass a length &lt; 6 to <code>generate()</code>, an exception is thrown.</li> <li>Hashing and verification use PHP's built-in password functions for maximum security.</li> <li>All features are covered by comprehensive tests.</li> </ul>"},{"location":"pdf/","title":"Lightpack PDF Service","text":"<p>A robust, extensible PDF generation API for Lightpack applications, featuring driver-based architecture, seamless storage integration, and full HTTP response support.</p>"},{"location":"pdf/#features","title":"Features","text":"<ul> <li>Driver-based architecture (Dompdf supported, extensible)</li> <li>Render HTML or templates to PDF</li> <li>Set metadata (title, author, subject, keywords)</li> <li>Add pages, embed images, Unicode support</li> <li>Output as download, stream, or save to storage</li> <li>Advanced driver access for custom features</li> </ul>"},{"location":"pdf/#quick-start","title":"Quick Start","text":""},{"location":"pdf/#1-install-dompdf","title":"1. Install Dompdf","text":"<pre><code>composer require dompdf/dompdf\n</code></pre>"},{"location":"pdf/#2-configure-pdf-provider","title":"2. Configure PDF Provider","text":"<p>View the available configuration option in your Lightpack <code>config/pdf.php</code> file.</p>"},{"location":"pdf/#3-basic-usage","title":"3. Basic Usage","text":"<pre><code>$pdf = app('pdf');\n$pdf-&gt;setTitle('Invoice')\n    -&gt;setAuthor('Lightpack')\n    -&gt;html('&lt;h1&gt;Invoice #123&lt;/h1&gt;');\n\n// Download\n$pdf-&gt;download('invoice.pdf');\n\n// Stream inline\n$pdf-&gt;stream('invoice.pdf');\n\n// Save to configured storage\n$pdf-&gt;save('invoices/invoice-123.pdf');\n</code></pre>"},{"location":"pdf/#api-reference","title":"API Reference","text":""},{"location":"pdf/#set-metadata","title":"Set Metadata","text":"<pre><code>$pdf-&gt;setMeta([\n    'title' =&gt; 'Report',\n    'author' =&gt; 'Admin',\n    'subject' =&gt; 'Monthly',\n    'keywords' =&gt; 'report, monthly, pdf',\n]);\n</code></pre>"},{"location":"pdf/#render-from-html-string-or-view-template","title":"Render from HTML string or view template","text":"<pre><code>$pdf-&gt;html('&lt;h1&gt;Hello&lt;/h1&gt;');\n$pdf-&gt;template('invoice', ['order' =&gt; $order]);\n</code></pre>"},{"location":"pdf/#add-pages","title":"Add Pages","text":"<pre><code>$pdf-&gt;addPage();\n</code></pre>"},{"location":"pdf/#download-as-attachment","title":"Download as Attachment","text":"<pre><code>return $pdf-&gt;download('myfile.pdf');\n</code></pre>"},{"location":"pdf/#stream-inline","title":"Stream Inline","text":"<pre><code>return $pdf-&gt;stream('myfile.pdf');\n</code></pre>"},{"location":"pdf/#save-to-storage","title":"Save to Storage","text":"<pre><code>$pdf-&gt;save('reports/2025-05-15/report.pdf');\n</code></pre>"},{"location":"pdf/#advanced-access-driver-instance","title":"Advanced: Access Driver Instance","text":"<pre><code>$driver = $pdf-&gt;getDriver();\n$dompdf = $driver-&gt;getInstance();\n$dompdf-&gt;setPaper('A4', 'landscape');\n</code></pre>"},{"location":"pdf/#storage-integration","title":"Storage Integration","text":"<ul> <li>The <code>save()</code> method uses the Lightpack <code>storage</code> service.</li> <li>Works with local disk or S3.</li> </ul> <pre><code>$pdf-&gt;save('public/invoices/invoice-123.pdf');\n$url = app('storage')-&gt;url('public/invoices/invoice-123.pdf');\n</code></pre>"},{"location":"process/","title":"Process Documentation","text":"<p>Lightpack's Process component provides a clean interface for executing and managing system processes. It offers features like process execution, output streaming, timeout management, and error handling.</p>"},{"location":"process/#basic-usage","title":"Basic Usage","text":""},{"location":"process/#simple-command-execution","title":"Simple Command Execution","text":"<pre><code>use Lightpack\\Utils\\Process;\n\n$process = new Process();\n\n// Execute a simple command\n$process-&gt;execute('ls -la');\n\n// Get command output\necho $process-&gt;getOutput();\n\n// Check for errors\nif ($process-&gt;failed()) {\n    echo $process-&gt;getError();\n    echo 'Exit code: ' . $process-&gt;getExitCode();\n}\n</code></pre>"},{"location":"process/#array-command-syntax","title":"Array Command Syntax","text":"<pre><code>$process = new Process();\n\n// Execute command with array arguments (safer)\n$process-&gt;execute(['git', 'clone', 'https://github.com/user/repo.git']);\n\n// Check execution status\nif ($process-&gt;failed()) {\n    throw new RuntimeException('Git clone failed: ' . $process-&gt;getError());\n}\n</code></pre>"},{"location":"process/#process-configuration","title":"Process Configuration","text":""},{"location":"process/#working-directory","title":"Working Directory","text":"<pre><code>$process = new Process();\n\n// Set working directory\n$process-&gt;setDirectory('/path/to/directory')\n    -&gt;execute('git status');\n\n// Get current working directory\n$workDir = $process-&gt;getDirectory();\n</code></pre>"},{"location":"process/#timeout-configuration","title":"Timeout Configuration","text":"<pre><code>$process = new Process();\n\n// Set timeout in seconds (default: 60)\n$process-&gt;setTimeout(120)\n    -&gt;execute('long-running-command');\n\n// Handle timeout exception\ntry {\n    $process-&gt;setTimeout(5)\n        -&gt;execute('sleep 10');\n} catch (RuntimeException $e) {\n    echo 'Process timed out';\n}\n</code></pre>"},{"location":"process/#output-handling","title":"Output Handling","text":""},{"location":"process/#basic-output-retrieval","title":"Basic Output Retrieval","text":"<pre><code>$process = new Process();\n$process-&gt;execute('echo \"Hello World\"');\n\n// Get command output\n$output = $process-&gt;getOutput();  // stdout\n$error = $process-&gt;getError();    // stderr\n$code = $process-&gt;getExitCode();  // exit code\n</code></pre>"},{"location":"process/#streaming-output","title":"Streaming Output","text":"<pre><code>$process = new Process();\n\n// Process output line by line\n$process-&gt;execute('long-running-command', function(string $line, string $type) {\n    if ($type === 'stdout') {\n        echo \"Output: $line\";\n    } else {\n        echo \"Error: $line\";\n    }\n});\n</code></pre>"},{"location":"process/#progress-monitoring","title":"Progress Monitoring","text":"<pre><code>$process = new Process();\n\n// Monitor command progress\n$process-&gt;execute('tar -czf archive.tar.gz directory/', function($line, $type) {\n    if ($type === 'stdout') {\n        // Update progress bar or log\n    }\n});\n</code></pre>"},{"location":"process/#error-handling","title":"Error Handling","text":""},{"location":"process/#basic-error-handling","title":"Basic Error Handling","text":"<pre><code>$process = new Process();\n\ntry {\n    $process-&gt;execute('invalid-command');\n} catch (RuntimeException $e) {\n    echo 'Process failed: ' . $e-&gt;getMessage();\n    echo 'Error output: ' . $process-&gt;getError();\n    echo 'Exit code: ' . $process-&gt;getExitCode();\n}\n</code></pre>"},{"location":"process/#status-checking","title":"Status Checking","text":"<pre><code>$process = new Process();\n$process-&gt;execute('command');\n\n// Check process status\nif ($process-&gt;isRunning()) {\n    echo 'Process is still running';\n}\n\nif ($process-&gt;failed()) {\n    echo 'Process failed with exit code: ' . $process-&gt;getExitCode();\n    echo 'Error output: ' . $process-&gt;getError();\n}\n</code></pre>"},{"location":"process/#practical-examples","title":"Practical Examples","text":"<p>These examples provide more insights into using process utility along with best practices. You should read them to gain a better understanding of practical use case scenarios of process utility.</p> <ol> <li> <p>Command Safety    ```php    class CommandExecutor    {        public function runCommand(array $command): string        {            $process = new Process();</p> <pre><code>   // Always use array syntax for command arguments\n   $process-&gt;execute($command);\n\n   if ($process-&gt;failed()) {\n       throw new RuntimeException(\n           \"Command failed: \" . $process-&gt;getError()\n       );\n   }\n\n   return $process-&gt;getOutput();\n</code></pre> <p>}    }    ```</p> </li> <li> <p>Resource Management    ```php    class LongRunningTask    {        public function execute()        {            $process = new Process();</p> <pre><code>   // Set appropriate timeout\n   $process-&gt;setTimeout(3600);  // 1 hour\n\n   // Use callback for memory efficiency\n   $process-&gt;execute('large-data-processor', function($line, $type) {\n       if ($type === 'stdout') {\n           $this-&gt;processLine($line);\n       } else {\n           logger()-&gt;error($line);\n       }\n   });\n</code></pre> <p>}    }    ```</p> </li> <li> <p>Environment Setup    ```php    class DeploymentProcess    {        public function deploy()        {            $process = new Process();</p> <pre><code>   // Set working directory\n   $process-&gt;setDirectory('/path/to/project')\n       -&gt;execute(['git', 'pull', 'origin', 'main']);\n\n   if ($process-&gt;failed()) {\n       $this-&gt;handleDeploymentFailure($process-&gt;getError());\n       return;\n   }\n\n   $this-&gt;runPostDeployTasks();\n</code></pre> <p>}    }    ```</p> </li> <li> <p>Output Processing    ```php    class LogProcessor    {        public function processLogs(string $logFile)        {            $process = new Process();</p> <pre><code>   // Process large log files efficiently\n   $process-&gt;execute(['tail', '-f', $logFile], function($line, $type) {\n       if ($type === 'stdout') {\n           $this-&gt;parseLine($line);\n       }\n   });\n</code></pre> <p>}</p> <p>private function parseLine(string $line)    {        // Process each line    }    }    ```</p> </li> <li> <p>Error Recovery    ```php    class ResilientProcess    {        public function executeWithRetry(array $command, int $maxAttempts = 3)        {            $process = new Process();            $attempts = 0;</p> <pre><code>   while ($attempts &lt; $maxAttempts) {\n       try {\n           $process-&gt;execute($command);\n\n           if (!$process-&gt;failed()) {\n               return $process-&gt;getOutput();\n           }\n       } catch (RuntimeException $e) {\n           $attempts++;\n           if ($attempts === $maxAttempts) {\n               throw $e;\n           }\n           sleep(pow(2, $attempts));  // Exponential backoff\n       }\n   }\n</code></pre> <p>}    }    ```</p> </li> </ol>"},{"location":"providers/","title":"Providers","text":"<p>Suppose in one of your controllers you want to send an email and for that you create a Mailer library that requires some initial setup before you start sending mails.</p> <pre><code>class ReportController\n{\n    public function sendReport()\n    {\n        // Configure mailer service provider\n        $mailer = new Mailer('smtp.example.org', 25);\n        $mailer-&gt;setUsername('your username');\n        $mailer-&gt;setPassword('your password');\n\n        // Send mail\n        $mailer-&gt;sendMessage([\n            'to'      =&gt; 'analyst@example.com',\n            'from'    =&gt; 'admin@example.com',\n            'body'     =&gt; 'Here is your report',\n            'subject' =&gt; 'Latest financial report',\n        ]);\n    }\n}\n</code></pre> <p>What is wrong with the above code? Nothing if it actually works.</p> <p>But imagine there a number of controller methods where you use this Mailer service class. This will soon become a nightmare to maintain such code because you will keep configuring Mailer instance before sending mails. Right?</p> <p>What if you could configure your Mailer service once and keep using that instance wherever you wanted in your application?</p> <p>Although there are a couple of possible solutions to do that, <code>Lightpack</code> supports the concept of provider which are classes to configure your services.</p> <p>Providers are classes where you register your services in IoC container for easy access.</p>"},{"location":"providers/#creating-provider","title":"Creating Provider","text":"<p>From your terminal you can fire this command to create a <code>Mailerprovider</code>.</p> <pre><code>php console create:provider MailerProvider\n</code></pre> <p>This should have generated <code>MailerProvider</code> class in <code>app/Providers</code> directory. </p> <p>Inside that class you will find a <code>register()</code> method:</p> <pre><code>public function register(Container $container)\n{\n    $container-&gt;register('mailer', function ($container) {\n        //\n    });\n}\n</code></pre> <p>In this method you can configure <code>Mailer</code> service as shown:</p> <pre><code>public function register(Container $container)\n{\n    $container-&gt;register('mailer', function ($container) {\n\n        $mailer = new Mailer('smtp.example.org', 25);\n        $mailer-&gt;setUsername('your username');\n        $mailer-&gt;setPassword('your password');\n\n        return $mailer;\n\n    });\n}\n</code></pre>"},{"location":"providers/#configuring-provider","title":"Configuring Provider","text":"<p>You need to register the provider class in order to access the service.</p> <p>Open <code>config/providers.php</code> file and just add your provider class at the end of the providers array.</p> <pre><code>&lt;?php\n\n/**\n * ------------------------------------------------------------\n * List service providers here.\n * ------------------------------------------------------------\n */\n\nreturn [\n    'providers' =&gt; [\n        App\\Providers\\MailerProvider::class,\n    ],\n];\n</code></pre>"},{"location":"providers/#using-provider","title":"Using Provider","text":"<p>Now you can access this service using the alias mailer by calling <code>app('mailer')</code> function in your controller.</p> <pre><code>class ReportController\n{\n    public function sendReport()\n    {\n        app('mailer')-&gt;sendMessage([\n            'to'      =&gt; 'analyst@example.com',\n            'from'    =&gt; 'admin@example.com',\n            'body'     =&gt; 'Here is your report',\n            'subject' =&gt; 'Latest financial report',\n        ]);\n    }\n}\n</code></pre> <p>As you can see that in providers you bind services in container, so you should read more about containers in Lightpack.</p>"},{"location":"queue/","title":"Lightpack Background Jobs: Complete Guide","text":"<p>Ideally, a time consuming job should be performed behind the scenes out of the main HTTP request context. For example, sending email to a user blocks the application untill the processing finishes and this may provide a bad experience to your application users. </p> <p>What if you could perform time consuming tasks, such as sending emails, in the background without blocking the actual request? </p> <p>Welcome to background job processing.</p> <p>While there are highly capable solutions available like RabbitMQ, ZeroMQ, ActiveMQ, RocketMQ, and many others, <code>Lightpack</code> provides background jobs processing capabilities that is super easy to use and understand. </p> <p>Although <code>Lightpack</code> will solve background jobs processing needs for most of the applications, it never aims to be a full-fledged message queue broker like those mentioned above.</p> <p>Lightpack Jobs provides robust, extensible, and developer-friendly background job processing for PHP apps. Supports MySQL/MariaDB, Redis, synchronous, and null engines out of the box.</p>"},{"location":"queue/#supported-engines","title":"Supported Engines","text":"<ul> <li>Database: MySQL/MariaDB-backed persistent queue</li> <li>Redis: High-performance, production-grade queue (sorted sets, atomic ops, delayed jobs)</li> <li>Sync: Executes jobs immediately (for synchronous execution)</li> <li>Null: Discards jobs (for tests/dev)</li> </ul> <p>View <code>config/jobs.php</code> for desired job queue related configurations.</p>"},{"location":"queue/#jobs-table-migration-database-engine","title":"Jobs Table Migration (Database Engine)","text":"<p>If using the database engine, you need a <code>jobs</code> table. </p> <p>Create the migration:</p> <pre><code>php console create_table_jobs\n</code></pre> <p>Update the migration logic:</p> <pre><code>return new class extends Migration\n{\n    public function up(): void\n    {\n        $this-&gt;create('jobs', function (Table $table) {\n            $table-&gt;id();\n            $table-&gt;varchar('handler', 255);\n            $table-&gt;varchar('queue', 55)-&gt;index();\n            $table-&gt;text('payload');\n            $table-&gt;varchar('status', 55)-&gt;index();\n            $table-&gt;column('attempts')-&gt;type('int');\n            $table-&gt;column('exception')-&gt;type('longtext')-&gt;nullable();\n            $table-&gt;createdAt();\n            $table-&gt;datetime('scheduled_at')-&gt;default('CURRENT_TIMESTAMP')-&gt;index();\n            $table-&gt;datetime('failed_at')-&gt;nullable();\n        });\n    }\n\n    public function down(): void\n    {\n        $this-&gt;drop('jobs');\n    }\n};\n</code></pre> <p>Run the migration:</p> <pre><code>php console migrate:up\n</code></pre>"},{"location":"queue/#creating-jobs","title":"Creating Jobs","text":"<p>Jobs are PHP classes extending <code>Lightpack\\Jobs\\Job</code> and implementing a <code>run()</code> method. </p> <p>To create a new job class, fire this command in your terminal from project root:</p> <pre><code>php console create:job SendMail\n</code></pre> <p>This should have created a <code>SendMail.php</code> class file in <code>app/Jobs</code> folder. You can implement your job logic in the <code>run()</code> method.</p> <pre><code>use Lightpack\\Jobs\\Job;\n\nclass SendMail extends Job {\n    public function run() {\n        // Your job logic, e.g. send email using $this-&gt;payload\n    }\n}\n</code></pre>"},{"location":"queue/#dispatching-jobs","title":"Dispatching Jobs","text":"<p>Once you have implemented your job class, you can dispatch them by simply invoking its <code>dispatch()</code> method:</p> <pre><code>(new SendMail)-&gt;dispatch();\n</code></pre> <p>You can optionally pass it an array as payload:</p> <pre><code>$payload = [\n    'to' =&gt; 'bob@example.com',\n    'message' =&gt; 'Hello Bob'\n];\n\n(new SendMail)-&gt;dispatch($payload);\n</code></pre>"},{"location":"queue/#advanced-job-features","title":"Advanced Job Features","text":"<ul> <li>Queue: Set <code>$queue</code> property (default: 'default')</li> <li>Delay: Set <code>$delay</code> property (strtotime string, e.g. '+30 seconds')</li> <li>Attempts: Set <code>$attempts</code> property (default: 1)</li> <li>Retry After: Set <code>$retryAfter</code> property (strtotime string, e.g. '+1 minute')</li> </ul> <p>Example:</p> <pre><code>class SendMail extends Job {\n    protected $queue = 'emails';\n    protected $delay = '+1 minute';\n    protected $attempts = 3;\n    protected $retryAfter = '+10 seconds';\n}\n</code></pre>"},{"location":"queue/#queue","title":"Queue","text":"<p>You can specify a queue for a job by setting the <code>$queue</code> property:</p> <pre><code>class SendMail\n{\n    protected $queue = 'emails';\n}\n</code></pre>"},{"location":"queue/#delay","title":"Delay","text":"<p>You can delay job processing by a specified amount of time by setting the <code>$delay</code> property:</p> <pre><code>class SendMail\n{\n    protected $delay = '+30 seconds';\n}\n</code></pre>"},{"location":"queue/#attempts","title":"Attempts","text":"<p>You can specify the number of attempts a job should be retried by setting the <code>$attempts</code> property:</p> <pre><code>class SendMail\n{\n    protected $attempts = 3;\n}\n</code></pre>"},{"location":"queue/#retry-after","title":"Retry After","text":"<p>You can specify the time after which a failed job should be retried by setting the <code>$retryAfter</code> property:</p> <pre><code>class SendMail\n{\n    protected $retryAfter = '+1 minute';\n}\n</code></pre>"},{"location":"queue/#processing-jobs","title":"Processing Jobs","text":"<p>Once you have dispatched your job its time to run them. Fire this command from the terminal in your project root:</p> <pre><code>php console process:jobs\n</code></pre> <p>This will hang your terminal prompt and will wait for any jobs to process. If a job is processed successfully or faile, you should see a terminal message accordingly.</p>"},{"location":"queue/#worker-options","title":"Worker Options","text":"<ul> <li><code>--sleep=N</code> (default 5): Seconds to sleep between polling</li> <li><code>--queues=emails,default</code>: Comma-separated queue names</li> <li><code>--cooldown=N</code>: Max seconds to run before exiting</li> </ul> <p>Example:</p> <pre><code>php console process:jobs --sleep=2 --queues=emails,default --cooldown=600\n</code></pre>"},{"location":"queue/#signal-handling","title":"Signal Handling","text":"<p>The worker supports UNIX signals for graceful shutdown and reload.</p>"},{"location":"queue/#custom-hooks","title":"Custom Hooks","text":"<p>To run custom logic after a job succeeds or fails (after all retries are exhausted), implement <code>onSuccess()</code> and/or <code>onFailure()</code> in your job class:</p> <pre><code>class SendMail extends Job {\n    public function run() {\n        // ... job logic ...\n    }\n\n    public function onSuccess() {\n        // Called after successful processing\n    }\n\n    public function onFailure() {\n        // Called after all attempts fail\n    }\n}\n</code></pre> <p>The framework will call these methods automatically if they exist.</p>"},{"location":"queue/#production","title":"Production","text":"<p>In  production environment, you should run and monitor job processing by using a process monitoring solution like supervisor.</p> <p>First, you will have to install <code>supervisor</code>:</p> <pre><code>sudo apt-get install supervisor\n</code></pre> <p>Let us assume that your project root path is <code>/var/www/lightpack-app</code>.</p> <p>Create a file named <code>lightpack-worker.conf</code> in <code>/etc/supervisor/conf.d</code> directory with following contents:</p> <pre><code>[program:lightshop-worker]\nprocess_name=%(program_name)s_%(process_num)02d\ncommand=php /var/www/lightpack-app/console process:jobs\nautostart=true\nautorestart=true\nstopasgroup=true\nuser=www-data\nnumprocs=4\nredirect_stderr=true\nstdout_logfile=/var/www/lightpack-app/worker.log\n</code></pre> <p>Finally, fire these commands to start supervisor:</p> <pre><code>sudo supervisorctl reread\nsudo supervisorctl update\nsudo supervisorctl start lightshop-worker:*\n</code></pre>"},{"location":"rate-limiter/","title":"Rate Limiting","text":"<p>Rate limiting (throttling) helps control access rates to any resource - from HTTP routes to API calls to background jobs. Lightpack provides a simple, efficient utility for rate limiting actions\u2014such as login attempts, API requests, or any operation you want to restrict to a certain number of times within a time window.. Use cases include:</p> <ul> <li>API request throttling</li> <li>Login attempt limits</li> <li>Job processing controls</li> <li>Resource usage limits</li> <li>Database write throttling</li> </ul> <p>The rate limiter uses Lightpack's Cache system, supporting multiple drivers: - Database (default) - Redis - File - Array (for testing) - Null (for disabled limiting)</p> <p>The configured cache driver becomes the backend for rate limiter. You do not need to seperately configure the rate limiter.</p>"},{"location":"rate-limiter/#usage","title":"Usage","text":"<p>You may create an instance of <code>Limiter</code> class:</p> <pre><code>$limiter = new Lightpack\\Utils\\Limiter;\n</code></pre> <p>Or simply call the utility function <code>limiter()</code> which returns Limiter class instance.</p> <p>Call the <code>attempt()</code> method of Limiter class instance to rate limit a block of code or an operation to be executed.</p> <p><code>attempt(string $key, int $max, int $seconds)</code></p> <ul> <li>The first argument is a unique key (e.g., user ID, IP address, or action).</li> <li>The second argument is the max allowed attempts.</li> <li>The third argument is the window (in seconds).</li> </ul> <p>Example: Rate limit user login to max 5 attempts per 60 seconds</p> <pre><code>$loginAllowed = limiter()-&gt;attempt('login:user:123', 5, 60);\n</code></pre> <pre><code>if($loginAllowed) {\n    // Allowed: perform the action\n} else {\n    // Rate limit exceeded: block or notify\n}\n</code></pre> <p>Key Generation</p> <p>Keys can be anything unique to what you're limiting:</p> <pre><code>// Examples\n'ip:127.0.0.1'           // IP-based\n'user:123'               // User-based\n'api:endpoint:/users'     // API endpoint\n'upload:user:123'        // Resource usage\n'jobs:processor:1'       // Job processing\n</code></pre>"},{"location":"rate-limiter/#checking-attempts","title":"Checking Attempts","text":"<p>You can check how many attempts have been made in the current window:</p> <pre><code>$hits = $limiter-&gt;getHits('login:' . $userId); // returns int|null\n</code></pre>"},{"location":"rate-limiter/#how-it-works","title":"How It Works","text":"<ul> <li>On the first attempt, the window is started and the hit count is set to 1.</li> <li>Each subsequent allowed attempt increments the count, but the window's TTL is preserved.</li> <li>If the max is reached, <code>attempt()</code> returns <code>false</code> until the window expires.</li> <li>Once expired, the count resets automatically.</li> </ul>"},{"location":"rate-limiter/#examples","title":"Examples","text":"<pre><code>// Allow 3 requests per 10 seconds from an IP\nif ($limiter-&gt;attempt(request()-&gt;ip(), 3, 10)) {\n    // process request\n} else {\n    // too many requests\n}\n\n</code></pre>"},{"location":"rate-limiter/#http-rate-limiting","title":"HTTP Rate Limiting","text":"<p>You can rate limit HTTP routes using the rate limit filter</p> <pre><code>// Basic\nroute()\n    -&gt;get('/api', ApiController::class)\n    -&gt;filter(['limit:60,1']);\n\n// Group limits\nroute()-&gt;group(['filter' =&gt; ['limit:1000,60']], function() {\n    route()-&gt;get('/api/users', 'UserController::class');\n    route()-&gt;get('/api/posts', 'PostController::class');\n});\n\n// With other filters\nroute()\n    -&gt;post('/upload', UploadController::class)\n    -&gt;filter(['auth', 'limit:10,60']);\n</code></pre> <p>When rate limited, clients receive:</p> <pre><code>HTTP/1.1 429 Too Many Requests\nX-RateLimit-Limit: 60\nX-RateLimit-Remaining: 0\nX-RateLimit-Reset: 1616721340\nRetry-After: 60\n\nToo many requests. Please try again in 1 minute.\n</code></pre>"},{"location":"rbac/","title":"Lightpack RBAC (Role-Based Access Control)","text":"<p>A minimal, efficient, and modular Role-Based Access Control (RBAC) implementation for the Lightpack PHP framework.</p>"},{"location":"rbac/#features","title":"Features","text":"<ul> <li>RbacTrait for User Models: Add roles and permissions to any model using a single trait.</li> <li>ORM-Centric: All relationships return query or collection objects for full chaining and efficiency.</li> <li>Pivot Table Management: Assign and remove roles/permissions using expressive, ORM-native methods.</li> <li>Integrated Filtering: Filter users by role or permission with scope methods (<code>scopeRole</code>, <code>scopePermission</code>).</li> <li>Highly Readable API: Methods like <code>can</code>, <code>hasRole</code>, etc., are clear and intuitive.</li> <li>Modular: RBAC is opt-in. No pollution of the base user model.</li> </ul>"},{"location":"rbac/#database-schema","title":"Database Schema","text":"<p>Tables created by the included migration: - <code>roles</code>: Stores all roles. - <code>permissions</code>: Stores all permissions. - <code>user_role</code>: Pivot table linking users and roles. - <code>role_permission</code>: Pivot table linking roles and permissions.</p>"},{"location":"rbac/#migration","title":"Migration","text":"<p>Run this command to generate a migration file:</p> <pre><code>php console create:migration create_table_roles_permissions\n</code></pre> <p>Use the following code for the up() and down() methods:</p> <pre><code>public function up(): void\n{\n    $this-&gt;create('roles', function (Table $table) {\n        $table-&gt;id();\n        $table-&gt;varchar('name', 100)-&gt;unique();\n        $table-&gt;varchar('label', 150)-&gt;nullable();\n        $table-&gt;timestamps();\n    });\n\n    $this-&gt;create('permissions', function (Table $table) {\n        $table-&gt;id();\n        $table-&gt;varchar('name', 100)-&gt;unique();\n        $table-&gt;varchar('label', 150)-&gt;nullable();\n        $table-&gt;timestamps();\n    });\n\n    $this-&gt;create('user_role', function (Table $table) {\n        $table-&gt;column('user_id')-&gt;type('bigint');\n        $table-&gt;column('role_id')-&gt;type('bigint');\n        $table-&gt;unique(['user_id', 'role_id']);\n        $table-&gt;foreignKey('user_id')-&gt;references('id')-&gt;on('users');\n        $table-&gt;foreignKey('role_id')-&gt;references('id')-&gt;on('roles');\n    });\n\n    $this-&gt;create('role_permission', function (Table $table) {\n        $table-&gt;column('role_id')-&gt;type('bigint');\n        $table-&gt;column('permission_id')-&gt;type('bigint');\n        $table-&gt;unique(['role_id', 'permission_id']);\n        $table-&gt;foreignKey('role_id')-&gt;references('id')-&gt;on('roles');\n        $table-&gt;foreignKey('permission_id')-&gt;references('id')-&gt;on('permissions');\n    });\n}\n\npublic function down(): void\n{\n    $this-&gt;drop('role_permission');\n    $this-&gt;drop('user_role');\n    $this-&gt;drop('permissions');\n    $this-&gt;drop('roles');\n}\n</code></pre>"},{"location":"rbac/#usage","title":"Usage","text":"<p>Add RbacTrait to Your User Model:</p> <pre><code>class User extends Model {\n    use RbacTrait;\n}\n</code></pre>"},{"location":"rbac/#assignremove-roles","title":"Assign/Remove Roles","text":"<p>```php    // Attach a role by ID    $user-&gt;roles()-&gt;atatch($roleId); </p> <p>// Remove a role by ID    $user-&gt;roles()-&gt;detach($roleId);     ```</p>"},{"location":"rbac/#check-roles-permissions","title":"Check Roles &amp; Permissions","text":"<p>```php    // true/false by role name or ID    $user-&gt;hasRole('admin'); </p> <p>// true/false by permission name or ID    $user-&gt;can('edit_post'); </p> <p>// true/false    $user-&gt;cannot('delete_post'); </p> <p>// true if user has 'superadmin' role    $user-&gt;isSuperAdmin();     ```</p>"},{"location":"rbac/#fetch-all-roles-or-permissions","title":"Fetch All Roles or Permissions","text":"<pre><code>// Collection of Role models\n$user-&gt;roles; \n\n// Collection of Permission models (via roles)\n$user-&gt;permissions; \n</code></pre>"},{"location":"rbac/#filter-users-by-role-or-permission","title":"Filter Users by Role or Permission","text":"<pre><code>// By role name\n$admins = User::filters(['role' =&gt; 'admin'])-&gt;all();\n\n// By role ID\n$editors = User::filters(['role' =&gt; 2])-&gt;all();\n\n// By permission name\n$canEdit = User::filters(['permission' =&gt; 'edit_post'])-&gt;all();\n\n// By permission ID\n$canDelete = User::filters(['permission' =&gt; 11])-&gt;all();\n\n// By role and permission both\n$filtered = User::filters(['role' =&gt; 'admin', 'permission' =&gt; 'edit_post'])-&gt;all();\n</code></pre>"},{"location":"rbac/#fetch-role-permissions","title":"Fetch Role Permissions","text":"<pre><code>$role = new Role(23);\n\n// Collection of permissions assigned to this role\n$role-&gt;permissions();\n</code></pre>"},{"location":"relationships/","title":"ORM Relationships","text":""},{"location":"relationships/#introduction","title":"Introduction","text":"<p>ORMs turn the abstract relationships of your database into natural, intuitive code. By mapping database associations to model methods, you unlock the full power of relational data\u2014without the pain of raw SQL joins.</p> <p>To set the context let's understand the diagram above. It shows a simplified version of an order screen on the left and associated table entities on the right. The order UI shows information about the associated <code>order</code>, <code>customer</code>, <code>order items</code>, and <code>payment</code> details.</p>"},{"location":"relationships/#data-modelling","title":"Data Modelling","text":"<p>Although the order UI shows all the information together on the screen, when modelling the database schema, you would consider normalized forms with:</p> <ul> <li>tables named <code>order</code>, <code>customer</code>, <code>product</code>, <code>order_item</code>, and <code>payment</code>. </li> <li>a foreign key column <code>customer_id</code> in the <code>order</code> table.</li> <li>a foreign key column <code>order_id</code> in the <code>payment</code> table.</li> <li>two foreign key columns <code>order_id</code> and <code>product_id</code> in the <code>order_item</code> table.</li> </ul> <p>Note: to uniquely identify the order and its related items, we need a table named <code>order_item</code> which stores references to the <code>order_id</code> and <code>product_id</code>. Such a table is often called a pivot or junction or bridge table.</p>"},{"location":"relationships/#entity-associations","title":"Entity Associations","text":"<p>When relating data models (entities) together, we may think in terms of associations or relationships. For example:</p> <ul> <li>A <code>customer</code> has many <code>order</code>.</li> <li>An <code>order</code> belongs to one <code>customer</code>.</li> <li>An <code>order</code> has one <code>payment</code>.</li> <li>A <code>payment</code> belongs to one <code>order</code>.</li> <li>A <code>product</code> has many <code>order</code>.</li> <li>An <code>order</code> has many <code>product</code>. </li> </ul> <p>In Relation Databases, we introduce 4 main types of associations:</p> <ul> <li>One to One</li> <li>One to Many</li> <li>Many to One</li> <li>Many to Many</li> </ul> <p></p>"},{"location":"relationships/#association-types","title":"Association Types","text":""},{"location":"relationships/#one-to-one-11","title":"One to One (1:1)","text":"<p>A One to One relationship means that each record in Table A is linked to one and only one record in Table B, and vice versa. </p> <p>Think of it as a passport and a person: each person has one unique passport, and each passport belongs to one person.</p> <p>Order Example: - Each <code>order</code> has one <code>payment</code> record. - Each <code>payment</code> belongs to one <code>order</code>.</p> <p>In Schema: - <code>payment</code> table has a unique <code>order_id</code> column (foreign key).</p>"},{"location":"relationships/#one-to-many-1n","title":"One to Many (1:N)","text":"<p>A One to Many relationship means that a single record in Table A can be related to many records in Table B, but each record in Table B relates back to only one record in Table A. </p> <p>Imagine a customer placing multiple orders: one customer, many orders.</p> <p>Order Example: - A <code>customer</code> can have many <code>orders</code>. - Each <code>order</code> belongs to one <code>customer</code>.</p> <p>Schema: - <code>order</code> table has a <code>customer_id</code> column (foreign key).</p>"},{"location":"relationships/#many-to-one-n1","title":"Many to One (N:1)","text":"<p>A Many to One relationship is simply the inverse of One to Many. Many records in Table A relate to a single record in Table B. </p> <p>Think of students and schools: Many students can attend the same school, but each student is enrolled in only one school.</p> <p>Order Example: - Many <code>order_item</code> rows belong to one <code>order</code>.</p> <p>Schema: - <code>order_item</code> table has an <code>order_id</code> column (foreign key).</p>"},{"location":"relationships/#many-to-many-nm","title":"Many to Many (N:M)","text":"<p>A Many to Many relationship means that multiple records in Table A can relate to multiple records in Table B. This is typically implemented using a junction (pivot) table. </p> <p>Think of products and orders: an order can have many products, and a product can appear in many orders.</p> <p>Order Example: - An <code>order</code> can have many <code>products</code> (through <code>order_item</code>). - A <code>product</code> can belong to many <code>orders</code> (through <code>order_item</code>).</p> <p>Schema: - <code>order_item</code> table has both <code>order_id</code> and <code>product_id</code> columns (foreign keys).</p> <p>Summary: - One to One: Each order has one payment. - One to Many: One customer, many orders. - Many to One: Many order items, one order. - Many to Many: Many products in many orders, connected by order items.</p>"},{"location":"relationships/#relationship-methods","title":"Relationship Methods","text":"<p>Now that you\u2019ve seen how relationships are structured at the database level, let\u2019s translate these concepts into the world of ORMs. While the database focuses on tables, foreign keys, and junction tables, an ORM lets you work with your data as rich, interconnected objects\u2014making your code more expressive, maintainable, and closer to how you think about your domain.</p> <p>In an ORM, each type of database relationship is represented by a specific method or association on your model classes. Instead of writing SQL joins, you define these relationships once, and then access related data as if you were simply navigating object properties.</p>"},{"location":"relationships/#has-one","title":"Has One","text":"<p>Use the relationship method <code>hasOne()</code> to define one to one relationhsip between order and payment entity.</p> <pre><code>class Order extends Model\n{\n    public function payment()\n    {\n        return $this-&gt;hasOne(Payment::class, 'order_id');\n    }\n}\n</code></pre> <p>Now to get the associated payment for an order, simply use the name of the payment() method on Order instance.</p> <pre><code>/**\n * Find order with id: 23\n */\n$order = new Order(23);\n\n/**\n * Get the associated payment\n */\n$order-&gt;payment;\n</code></pre> <p>Behind the scenes, the ORM intercepts the call to <code>$order-&gt;payment</code> and resolves the associated Payment instance.</p>"},{"location":"relationships/#belongs-to","title":"Belongs To","text":"<p>Use the relationship method belongsTo() to define the inverse of the hasOne() relationship.</p> <pre><code>class Payment extends Model\n{\n    public function order()\n    {\n        return $this-&gt;belongsTo(Order::class, 'order_id');\n    }\n}\n</code></pre> <p>Now this makes it possible to fetch the <code>Order</code> instance that the <code>Payment</code> belongs to.</p> <pre><code>/**\n * Find the payment with id: 101\n */\n$payment = new Payment(101);\n\n/**\n* Get the associated order\n*/\n$payment-&gt;order;\n</code></pre>"},{"location":"relationships/#has-many","title":"Has Many","text":"<p>Use the relationship method <code>hasMany()</code> to define a one to many relationship between the customer and order entities.</p> <pre><code>class Customer extends Model\n{\n    public function orders()\n    {\n        return $this-&gt;hasMany(Order::class, 'customer_id');\n    }\n}\n</code></pre> <p>Now, to get all orders placed by a customer, simply use the name of the orders() method on a Customer instance.</p> <pre><code>/**\n * Find the customer with id: 7\n */\n$customer = new Customer(7);\n\n/**\n * Get all orders for this customer\n */\n$orders = $customer-&gt;orders;\n</code></pre> <p>Behind the scenes, the ORM intercepts the call to <code>$customer-&gt;orders</code> and returns a collection of Order instances related to that customer.</p> <p>Inverse of Has Many</p> <p>You should not be surprised to know that <code>belongsTo()</code> also represents the inverse of <code>hasMany()</code>.</p> <pre><code>class Order extends Model\n{\n    public function customer()\n    {\n        return $this-&gt;belongsTo(Customer::class, 'customer_id');\n    }\n}\n</code></pre> <p>Now, you can fetch the <code>Customer</code> instance for a given <code>Order</code>:</p> <pre><code>/**\n * Find the order with id: 42\n */\n$order = new Order(42);\n\n/**\n * Get the customer who placed this order\n */\n$customer = $order-&gt;customer;\n</code></pre>"},{"location":"relationships/#many-to-many","title":"Many to Many","text":"<p>Use the relationship method <code>pivot()</code> to define a many to many relationship between the order and product entities, using a pivot table (like <code>order_item</code>).</p> <pre><code>class Order extends Model\n{\n    public function products()\n    {\n        return $this-&gt;pivot(Product::class, 'order_item', 'order_id', 'product_id');\n    }\n}\n</code></pre> <p>Now, to get all products in a given order, simply use the name of the products() method on an Order instance.</p> <pre><code>/**\n * Find the order with id: 12\n */\n$order = new Order(12);\n\n/**\n * Get all products in this order\n */\n$products = $order-&gt;products;\n</code></pre> <p>Behind the scenes, the ORM joins the <code>orders</code>, <code>order_item</code>, and <code>products</code> tables to return all related Product instances for the order.</p> <p>Inverse of Many to Many</p> <p>Essentailly many to many relationship works both ways, so use the same relationship method on the Product model to access all orders that include a given product. </p> <pre><code>class Product extends Model\n{\n    public function orders()\n    {\n        return $this-&gt;pivot(Order::class, 'order_item', 'product_id', 'order_id');\n    }\n}\n</code></pre> <p>Now, you can fetch all orders that include a specific product:</p> <pre><code>/**\n * Find the product with id: 99\n */\n$product = new Product(99);\n\n/**\n * Get all orders that include this product\n */\n$orders = $product-&gt;orders;\n</code></pre>"},{"location":"relationships/#attach-pivot-records","title":"Attach Pivot Records","text":"<p>To insert a pivot record, use <code>attach()</code> method.  * It creates new records to the pivot table, * ignores duplicates, * also supports inserting data for extra columns.</p> <p>Let's take User and Role models for example.</p> <pre><code>class User extends Model\n{\n    /**\n     * A user has many roles assigned.\n     */ \n    public function roles()\n    {\n        return $this-&gt;pivot(Role::class, 'user_role', 'user_id', 'role_id');\n    }\n}\n</code></pre> <p>Now to assign new roles to the user:</p> <pre><code>$user = new User(23);\n\n// Attach a role to the user\n$user-&gt;roles()-&gt;attach(1);\n\n// Attach multiple roles together\n$user-&gt;roles()-&gt;attach([1, 2]);\n\n// Pass additional attributes in pivot table\n$user-&gt;roles()-&gt;attach([1, 2], [\n    'assigned_by' =&gt; $adminId,\n    'assigned_at' =&gt; now(),\n]);\n</code></pre>"},{"location":"relationships/#detach-pivot-records","title":"Detach Pivot Records","text":"<p>To delete a pivot record, use <code>detach()</code> method. It removes records in the pivot table, supporting extra columns as additional where filters.</p> <pre><code>$user = new User(23);\n\n// Remove role 1 for the user\n$user-&gt;roles()-&gt;detach(1);\n\n// Remove multiple roles together\n$user-&gt;roles()-&gt;detach([1, 2]);\n\n// Remove roles 2 and 3 only if assigned_by matches\n$user-&gt;roles()-&gt;detach([2, 3], ['assigned_by' =&gt; $adminId]);\n</code></pre>"},{"location":"relationships/#sync-pivot-records","title":"Sync Pivot Records","text":"<p>To update pivot records, use <code>sync()</code> method. What is syncing pivot records?</p> <ul> <li>When you attach a new role to a user, it creates a new pivot record in the <code>user_role</code> table. It ignores passed duplicate IDs</li> <li>When you detach a role from a user, it deletes the pivot record from the <code>user_role</code> table.</li> <li>But when you sync roles to a user, it will ensure that the user will have only the roles that are passed to the <code>sync()</code> method.</li> <li>It also supports passing extra columns.</li> </ul> <pre><code>$user = new User(23);\n\n// Assign roles 1, 2, 3 to user, removing any others\n$user-&gt;roles()-&gt;sync([1, 2, 3]);\n\n// Sync with extra data (e.g., assigned_at timestamp)\n$user-&gt;roles()-&gt;sync([1, 2], ['assigned_at' =&gt; now()]);\n</code></pre> <p>Note that all <code>sync</code> operations are wrapped in a transaction: - If any part fails, the whole operation is rolled back. - Prevents partial updates and race conditions.</p>"},{"location":"relationships/#through-relationships","title":"Through Relationships","text":""},{"location":"relationships/#has-one_1","title":"Has One","text":"<p>The <code>hasOneThrough()</code> relationship method lets you access a single, distant related record through an intermediate model. This is ideal for cases where you want to \u201creach through\u201d one model to get a single related record from another.</p> <p>Consider this example:</p> <ul> <li>A patient has one appointment</li> <li>Each appointment has one doctor</li> <li>A patient has one doctor through their appointment</li> <li>patient \u2192 appointment \u2192 doctor</li> </ul> <p>This pattern allows you to fetch the doctor for a patient, even though the doctor is not directly linked to the patient, but is associated through the patient\u2019s appointment.</p> <p>Example: Patient, Appointment, Doctor</p> <pre><code>class Patient extends Model\n{\n    // Each patient has one doctor through their appointment\n    public function doctor()\n    {\n        return $this-&gt;hasOneThrough(Doctor::class, Appointment::class, 'patient_id', 'doctor_id');\n    }\n}\n</code></pre> <p>Now you can easily fetch the doctor for a patient:</p> <pre><code>$patient = new Patient(1);\n$doctor = $patient-&gt;doctor;\n</code></pre> <p>Behind the scenes, Lightpack ORM joins the <code>patients</code>, <code>appointments</code>, and <code>doctors</code> tables to fetch the doctor for the patient\u2019s appointment\u2014no manual SQL or nested queries required.</p>"},{"location":"relationships/#has-many_1","title":"Has Many","text":"<p>The <code>hasManyThrough()</code> relationship method lets you access related records that are connected by an intermediate model. This is perfect for scenarios where you want to \u201creach through\u201d one model to get to another.</p> <p>Consider this example:</p> <ul> <li>An author has many books</li> <li>Each book has many reviews</li> <li>An author has many reviews through their books</li> <li>author \u2192 books \u2192 reviews</li> </ul> <p>This means you can fetch all reviews for an author, even though reviews are not directly linked to the author, but come through the author\u2019s books.</p> <pre><code>class Author extends Model\n{\n    // One author has many reviews through books\n    public function reviews()\n    {\n        return $this-&gt;hasManyThrough(Review::class, Book::class, 'author_id', 'book_id');\n    }\n}\n</code></pre> <p>Now you can easily fetch associated reviews, </p> <pre><code>$author = new Author(1);\n$reviews = $author-&gt;reviews;\n</code></pre> <p>Behind the scenes, Lightpack ORM joins the <code>authors</code>, <code>books</code>, and <code>reviews</code> tables to fetch all reviews for books written by that author\u2014no manual SQL or nested loops required.</p>"},{"location":"relationships/#polymorphic-relationships","title":"Polymorphic Relationships","text":""},{"location":"relationships/#introduction_1","title":"Introduction","text":"<p>Polymorphic relationships are a powerful feature that let a single model relate to more than one type of parent model\u2014using a unified, elegant approach. In Lightpack ORM, this is implemented with confidence and clarity, so you can tackle real-world use cases like comments, media attachments, or user avatars without convoluted table structures.</p> <p></p> <p>Polymorphic Table Schema Example</p> <p>Your polymorphic child table (e.g., <code>comments</code>) must have columns named exactly <code>morph_id</code> and <code>morph_type</code>:</p> <pre><code>CREATE TABLE comments (\n    id INT PRIMARY KEY AUTO_INCREMENT,\n    morph_id INT NOT NULL,\n    morph_type VARCHAR(64) NOT NULL,\n    body TEXT,\n    created_at DATETIME,\n    updated_at DATETIME\n);\n</code></pre> <p>This enforced naming approach makes your migrations and queries consistent, readable, and future-proof.</p> <p>Column Naming Convention: Lightpack requires you to name your polymorphic columns as <code>morph_id</code> and <code>morph_type</code>\u2014no exceptions. This is a deliberate design choice. To avoid awkward column names like <code>commentable_id</code>, <code>articleable_id</code>, or <code>imageable_id</code>, Lightpack keeps it simple and predictable. Your schema is always easy to interpret, and your code stays clean.</p> <p>When (Not) to Use Polymorphic Relations</p> <p>Polymorphic relations are a pragmatic solution for flexible data models, but they come with tradeoffs: - No DB-enforced FKs: Integrity is enforced in application code only. - Migration complexity: Changing parent types later requires careful data handling. - Query performance: Can be less efficient than standard FKs for some workloads.</p> <p>Bottom line: If you require absolute referential integrity, avoid polymorphic relations\u2014split your tables or redesign your schema. But if you need flexibility and can enforce integrity at the application level, Lightpack\u2019s polymorphic support is robust, expressive, and easy to use.</p> <p>Referential Integrity Warning: Polymorphic relationships are not enforced by database-level foreign keys. The integrity is maintained by your application and ORM alone. If you need strict referential integrity, avoid polymorphic patterns\u2014split your tables or redesign your schema. Use polymorphic relations only when flexibility outweighs the need for DB-enforced constraints.</p> <p>Polymorphic relationships in Lightpack are designed to make your codebase more maintainable, not more confusing. Use them wisely, and you\u2019ll unlock elegant solutions to complex data modeling challenges. Lets explore the polymorphic relationship methods available:</p> <pre><code>morphOne()\nmorphMany()\nmorphTo()\n</code></pre>"},{"location":"relationships/#morph-one","title":"Morph One","text":"<p>For a one-to-one polymorphic relationship, such as a User having a single Avatar, use the <code>morphOne()</code> method to fetch related avatar model:</p> <pre><code>class User extends Model\n{\n    public function avatar()\n    {\n        return $this-&gt;morphOne(Avatar::class);\n    }\n}\n</code></pre> <p>Usage:</p> <pre><code>$user = new User(42);\n$avatar = $user-&gt;avatar;\n</code></pre>"},{"location":"relationships/#morph-many","title":"Morph Many","text":"<p>If you want each Post, Photo, or Video to have many comments, use the <code>morphMany()</code> method to fetch related comments model collection.</p> <pre><code>class Post extends Model\n{\n    public function comments()\n    {\n        return $this-&gt;morphMany(Comment::class);\n    }\n}\n\nclass Photo extends Model\n{\n    public function comments()\n    {\n        return $this-&gt;morphMany(Comment::class);\n    }\n}\n\nclass Video extends Model\n{\n    public function comments()\n    {\n        return $this-&gt;morphMany(Comment::class);\n    }\n}\n</code></pre> <p>Usage:</p> <pre><code>$video = new Video(7);\n$comments = $video-&gt;comments; // All comments for this video\n</code></pre>"},{"location":"relationships/#morph-inverse","title":"Morph Inverse","text":"<p>Use the method <code>morphTo()</code> to define the polymorphic inverse relation to fetch related parent model. </p> <p>Suppose you want to fetch parent Post, Photo, or Video model for the Comment model:</p> <pre><code>class Comment extends Model\n{\n    public function parent()\n    {\n        return $this-&gt;morphTo([\n            Post::class,\n            Photo::class,\n            Video::class,\n        ]);\n    }\n}\n</code></pre> <p>Now, given a comment, you can access its parent\u2014no matter the type:</p> <pre><code>$comment = new Comment(101);\n$parent = $comment-&gt;parent; // Could be a Post, Photo, or Video instance\n</code></pre>"},{"location":"relationships/#querying-relationships","title":"Querying Relationships","text":"<p>Understanding how to access and work with relationships is fundamental to getting the most out of your ORM. Lightpack ORM makes it intuitive to fetch related data, whether you want a single associated record or a whole collection of related models. This section will guide you through the mechanics, best practices, and the semantics of querying relationships. So let's reconsider the relation where an  organization has many departments.</p> <pre><code>class Organization extends Model\n{\n    public function departments()\n    {\n        return $this-&gt;hasMany(Department::class, 'organization_id');\n    }\n}\n</code></pre>"},{"location":"relationships/#accessing-relationships-property-vs-method","title":"Accessing Relationships: Property vs. Method","text":"<p>You can access a relationship in two ways:</p> <ol> <li> <p>As a dynamic property: <code>php     $org = new Organization(1);     $departments = $org-&gt;departments; // Property access</code>     When you access a relationship as a property, the ORM automatically runs the underlying query and returns the related data. This is the most common and convenient way to fetch associated models.</p> </li> <li> <p>As a method call: <code>php     $query = $org-&gt;departments(); // Method access</code>     When you call the relationship as a method, you get the underlying query builder. This allows you to further customize the query before executing it:</p> <p><code>php $activeDepartments = $org-&gt;departments()-&gt;where('status', 'active')-&gt;all();</code></p> </li> </ol>"},{"location":"relationships/#what-happens-behind-the-scenes","title":"What Happens Behind the Scenes?","text":"<ul> <li> <p>Property Access:</p> <ul> <li>The first time you access a relationship as a property (e.g., <code>$org-&gt;departments</code>), the ORM calls your relationship method, executes the query, and caches the result on the model instance. Subsequent accesses return the cached result.</li> <li>If the relationship returns multiple models (like <code>hasMany</code>), you receive a Collection of models. </li> <li>If the relationship returns a single model (like <code>hasOne</code> or <code>belongsTo</code>), you get a single model instance or <code>null</code>.</li> </ul> </li> <li> <p>Method Access:</p> <ul> <li>Calling the relationship as a method (e.g., <code>$org-&gt;departments()</code>) returns the query builder object. You can chain additional constraints, then call query methods like <code>all()</code>, <code>one()</code>, <code>count()</code>, etc., to execute the query and fetch results.</li> <li>This is ideal when you want to apply dynamic scopes or advanced queries on the relationship.</li> </ul> </li> </ul>"},{"location":"relationships/#collections-working-with-multiple-related-models","title":"Collections: Working with Multiple Related Models","text":"<p>When a relationship returns multiple models (such as with <code>hasMany</code>, <code>belongsToMany</code>, or <code>morphMany</code>), the result is a Collection object. This collection behaves much like an array, but is enhanced with a rich set of methods for filtering, mapping, reducing, and more. For example:</p> <pre><code>$departments = $org-&gt;departments; // Collection of Department models\n\n// Get the names of all departments\n$names = $departments-&gt;column('name');\n\n// Filter only active departments\n$active = $departments-&gt;filter(function($dept) {\n    return $dept-&gt;status === 'active';\n});\n</code></pre> <p>Collections make it easy to work with groups of related models in a fluent, expressive way. You\u2019ll find a full guide to collections in a dedicated section of this documentation.</p>"},{"location":"relationships/#best-practices-and-semantics","title":"Best Practices and Semantics","text":"<ul> <li>Use property access for simple, direct retrieval of related data.</li> <li>Use method access when you need to customize the query.</li> <li>Remember caching: Property access caches the result for the current model instance.</li> <li>Understand return types: Relationships that return many models give you a Collection; those that return one give you a model instance or <code>null</code>.</li> <li>Be intention-revealing: Name your relationship methods for clarity and business meaning.</li> </ul> <p>By understanding the difference between property and method access, and how collections work, you\u2019ll write more expressive, efficient, and maintainable code with Lightpack ORM. For a deep dive into collections and their powerful capabilities, see the Collections documentation.</p>"},{"location":"relationships/#semantic-relationship-methods","title":"Semantic Relationship Methods","text":"<p>Semantic relationship methods empower you to define model relationships that are not only technically correct, but also meaningful and intention-revealing. Instead of limiting your models to generic accessors like <code>departments()</code>, you can define expressive methods such as <code>activeDepartments()</code>, <code>hrDepartments()</code>, or <code>recentlyCreatedDepartments()</code>. This approach makes your codebase more readable, maintainable, and aligned with real business logic.</p>"},{"location":"relationships/#why-semantic-methods","title":"Why Semantic Methods?","text":"<ul> <li>Clarity: Your model methods communicate why you\u2019re fetching certain related data, not just how.</li> <li>Maintainability: Changes to business logic (e.g., what counts as \u201cactive\u201d) are isolated to a single place.</li> <li>Expressiveness: Your code reads like natural language, making it easier for new developers to understand intent.</li> </ul>"},{"location":"relationships/#example-organization-and-departments","title":"Example: Organization and Departments","text":"<p>Suppose you have an <code>Organization</code> model and a related <code>Department</code> model. Each organization can have many departments, but you want to easily fetch only the active ones, or only those in the HR domain.</p>"},{"location":"relationships/#standard-relationship","title":"Standard Relationship","text":"<pre><code>class Organization extends Model\n{\n    // All departments for this organization\n    public function departments()\n    {\n        return $this-&gt;hasMany(Department::class);\n    }\n}\n</code></pre>"},{"location":"relationships/#semantic-filtered-relationships","title":"Semantic (Filtered) Relationships","text":"<pre><code>class Organization extends Model\n{\n    // Only active departments\n    public function activeDepartments()\n    {\n        return $this-&gt;hasMany(Department::class)-&gt;where('status', 'active');\n    }\n\n    // Only HR departments\n    public function hrDepartments()\n    {\n        return $this-&gt;hasMany(Department::class)-&gt;where('type', 'hr');\n    }\n\n    // Departments created in the last 30 days\n    public function recentlyCreatedDepartments()\n    {\n        return $this-&gt;hasMany(Department::class)\n                    -&gt;where('created_at', '&gt;=', now()-&gt;subDays(30));\n    }\n}\n</code></pre>"},{"location":"relationships/#usage","title":"Usage","text":"<pre><code>$org = new Organization(1);\n\n// Get all departments\n$departments = $org-&gt;departments;\n\n// Get only active departments\n$active = $org-&gt;activeDepartments;\n\n// Get only HR departments\n$hr = $org-&gt;hrDepartments;\n\n// Get recently created departments\n$recent = $org-&gt;recentlyCreatedDepartments;\n</code></pre>"},{"location":"relationships/#best-practices","title":"Best Practices","text":"<ul> <li>Name methods for intent: Use clear, business-driven names like <code>activeDepartments()</code> or <code>financeDepartments()</code>.</li> <li>Centralize logic: Place filtering logic in the relationship method, not scattered throughout your codebase.</li> <li>Document your methods: Briefly describe what each semantic relationship returns.</li> </ul>"},{"location":"relationships/#when-to-use-semantic-relationships","title":"When to Use Semantic Relationships","text":"<ul> <li>When you have common queries that filter or scope related data.</li> <li>When business logic or access rules change over time.</li> <li>When you want your code to be self-documenting and intention-revealing.</li> </ul> <p>Semantic relationship methods are a powerful way to make your models expressive, maintainable, and aligned with your domain. By naming relationships for what they mean, not just what they are, you create a codebase that\u2019s easier to read, reason about, and extend.</p> <p>How does this work behind the scenes?</p> <p>Each relationship method returns a query builder. This means you can chain and apply any filtering, sorting, or limiting logic directly within your relationship method. When you access a property like <code>$organization-&gt;activeDepartments</code>, the ORM executes the query as defined in your method\u2014including all your custom conditions\u2014and returns the result. This is why you can define as many semantic, filtered relationships as your application needs.</p>"},{"location":"repository/","title":"Repository","text":"<p>When dealing with multiple rows or multiple table together, you should prefer respository pattern oriented approach.</p>"},{"location":"request/","title":"Request","text":"<p>The <code>Lightpack\\Http\\Request</code> class provides a comprehensive API for accessing and interacting with incoming HTTP requests.</p> <p>Lightpack automatically configures an instance of <code>Request</code> in the IoC container. You can access it anywhere in your project using the <code>request()</code> helper.</p>"},{"location":"request/#url-and-path-methods","title":"URL and Path Methods","text":"<p>Assuming your application is installed in the <code>app</code> folder within the web root, and the request URL is <code>http://localhost/app/users/editors?status=active</code>, the following methods are available:</p> <pre><code>// Returns: /app/users/editors?status=active\nrequest()-&gt;uri();\n\n// Returns: /app/users/editors\nrequest()-&gt;fullpath();\n\n// Returns: /users/editors\nrequest()-&gt;path();\n\n// Returns: /app\nrequest()-&gt;basepath();\n\n// Returns: http://localhost/app/users/editors\nrequest()-&gt;url();\n\n// Returns: http://localhost/app/users/editors?status=active\nrequest()-&gt;fullUrl();\n</code></pre>"},{"location":"request/#path-segments","title":"Path Segments","text":"<pre><code>// Returns: ['users', 'editors']\nrequest()-&gt;segments();\n\n// Returns: 'users'\nrequest()-&gt;segments(0);\n\n// Returns: 'editors'\nrequest()-&gt;segments(1);\n</code></pre>"},{"location":"request/#http-methods-and-verbs","title":"HTTP Methods and Verbs","text":"<pre><code>// Returns the HTTP method as a string (e.g., 'GET', 'POST', etc.)\nrequest()-&gt;method();\n\n// Returns true if HTTP method is GET\nrequest()-&gt;isGet();\n\n// Returns true if HTTP method is POST\nrequest()-&gt;isPost();\n\n// Returns true if HTTP method is PUT\nrequest()-&gt;isPut();\n\n// Returns true if HTTP method is PATCH\nrequest()-&gt;isPatch();\n\n// Returns true if HTTP method is DELETE\nrequest()-&gt;isDelete();\n\n// Returns true if the HTTP method was spoofed via _method\nrequest()-&gt;isSpoofed();\n\n// Returns an array of all supported HTTP verbs\nrequest()-&gt;verbs();\n</code></pre> <p>Note: Method spoofing allows you to use PUT, PATCH, or DELETE via a POST request with a hidden <code>_method</code> field.</p>"},{"location":"request/#input-and-query-data","title":"Input and Query Data","text":""},{"location":"request/#merged-input","title":"Merged Input","text":"<p>The <code>input()</code> method intelligently merges input from query string, POST data, JSON body, or parsed body depending on the HTTP method and content type.</p> <pre><code>// Get a specific input value\nrequest()-&gt;input('key');\n\n// Get a specific input value with a default\nrequest()-&gt;input('key', 'default');\n\n// Get all input data as an array\nrequest()-&gt;input();\n</code></pre>"},{"location":"request/#query-string","title":"Query String","text":"<pre><code>// Get a specific query parameter\nrequest()-&gt;query('status');\n\n// Get all query parameters as an array\nrequest()-&gt;query();\n</code></pre>"},{"location":"request/#raw-and-parsed-body","title":"Raw and Parsed Body","text":"<pre><code>// Get the raw request body as a string\nrequest()-&gt;getRawBody();\n\n// Get the parsed body (for PUT/PATCH/DELETE with form data)\nrequest()-&gt;getParsedBody();\n\n// Get a specific parsed body value with a default\nrequest()-&gt;getParsedBody('key', 'default');\n</code></pre>"},{"location":"request/#json-requests","title":"JSON Requests","text":"<pre><code>// Returns true if the request Content-Type is application/json\nrequest()-&gt;isJson();\n\n// Returns true if the client expects a JSON response (Accept: application/json)\nrequest()-&gt;expectsJson();\n</code></pre> <p>Deprecated: <code>json()</code> is an alias for <code>input()</code> and is deprecated. Use <code>input()</code> instead.</p>"},{"location":"request/#ajax-requests","title":"AJAX Requests","text":"<pre><code>// Returns true if the request was made via AJAX (X-Requested-With: XMLHttpRequest)\nrequest()-&gt;isAjax();\n</code></pre>"},{"location":"request/#security-and-protocol","title":"Security and Protocol","text":"<pre><code>// Returns true if the request is over HTTPS\nrequest()-&gt;isSecure();\n\n// Returns the scheme (http or https)\nrequest()-&gt;scheme();\n\n// Returns the HTTP protocol version (e.g., 'HTTP/1.1')\nrequest()-&gt;protocol();\n\n// Returns the Content-Type of the request\nrequest()-&gt;format();\n</code></pre>"},{"location":"request/#host-and-port","title":"Host and Port","text":"<pre><code>// Returns the host name (without port)\nrequest()-&gt;host();\n\n// Returns the port number (if available)\nrequest()-&gt;port();\n\n// Returns the host with port (e.g., 'localhost:8080')\nrequest()-&gt;hostWithPort();\n</code></pre>"},{"location":"request/#headers","title":"Headers","text":"<pre><code>// Get a specific header value\nrequest()-&gt;header('User-Agent');\n\n// Get all headers as an associative array\nrequest()-&gt;headers();\n\n// Check if a header exists\nrequest()-&gt;hasHeader('Authorization');\n\n// Get the User-Agent string\nrequest()-&gt;userAgent();\n\n// Get the Bearer token from the Authorization header\nrequest()-&gt;bearerToken();\n</code></pre>"},{"location":"request/#csrf-token","title":"CSRF Token","text":"<pre><code>// Get the CSRF token from header or input\nrequest()-&gt;csrfToken();\n</code></pre>"},{"location":"request/#referer","title":"Referer","text":"<pre><code>// Get the referer URL, if present\nrequest()-&gt;referer();\n</code></pre>"},{"location":"request/#route-information","title":"Route Information","text":"<pre><code>// Get the matched route instance (if available)\nrequest()-&gt;route();\n\n// Get all route parameters as an array\nrequest()-&gt;params(null);\n\n// Get a specific route parameter (with optional default)\nrequest()-&gt;params('userId', 0);\n</code></pre>"},{"location":"request/#url-signature-validation","title":"URL Signature Validation","text":"<pre><code>// Throws an exception if the URL signature is invalid\nrequest()-&gt;validateUrlSignature();\n\n// Returns true if the URL signature is valid\nrequest()-&gt;hasValidSignature();\n\n// Returns true if the URL signature is invalid\nrequest()-&gt;hasInValidSignature();\n</code></pre>"},{"location":"request/#client-ip-address","title":"Client IP Address","text":"<pre><code>// Get the client's IP address\nrequest()-&gt;ip();\n</code></pre>"},{"location":"request/#file-uploads","title":"File Uploads","text":"<p>Lightpack provides a robust API for handling file uploads via the <code>request()-&gt;file()</code> and <code>request()-&gt;hasFile()</code> methods. </p> <p>Uploaded file are represented by the <code>UploadedFile</code> class.</p>"},{"location":"request/#single-file","title":"Single File","text":"<pre><code>&lt;input name=\"photo\"&gt;\n</code></pre> <pre><code>// Retrieve the uploaded file by key\n$file = request()-&gt;file('photo');\n\n// Check if a file was uploaded for the given key\nrequest()-&gt;hasFile('photo');\n</code></pre> <pre><code>$file = request()-&gt;file('avatar');\n\n// Check if file upload failed\nif ($file-&gt;hasError()) {\n    //\n}\n</code></pre>"},{"location":"request/#multiple-files","title":"Multiple Files","text":"<pre><code>&lt;input name=\"photos[]\" type=\"file\" multiple&gt;\n</code></pre> <pre><code>$photos = request()-&gt;file('photos'); \n\nforeach ($photos as $photo) {\n    if (!$photo-&gt;hasError()) {\n        // Handle each uploaded file\n    }\n}\n</code></pre>"},{"location":"request/#uploadedfile-methods","title":"UploadedFile Methods","text":"<p>Each <code>UploadedFile</code> instance provides:</p> <ul> <li><code>getName()</code>: Original filename</li> <li><code>getSize()</code>: File size in bytes</li> <li><code>getType()</code>: MIME type (e.g., <code>image/jpeg</code>)</li> <li><code>getExtension()</code>: File extension (e.g., <code>jpg</code>)</li> <li><code>getTmpName()</code>: Temporary path on disk</li> <li><code>hasError()</code>: Returns <code>true</code> if there was an upload error</li> <li><code>getError()</code>: Returns the error code (see PHP file upload errors)</li> <li><code>isEmpty()</code>: Returns <code>true</code> if file is empty</li> <li><code>isImage()</code>: Returns <code>true</code> if file is an image</li> <li><code>getDimensions()</code>: Returns <code>['width' =&gt; ..., 'height' =&gt; ...]</code> for images</li> <li><code>getWidth()</code>, <code>getHeight()</code>: Image dimensions (0 if not an image)</li> </ul>"},{"location":"request/#storing-uploaded-files","title":"Storing Uploaded Files","text":"<p>Lightpack abstracts the storage of uploaded files to utilize the configured Storage service.</p>"},{"location":"request/#store-in-arbitrary-location","title":"Store in Arbitrary Location","text":"<pre><code>$path = $file-&gt;store('some/directory');\n</code></pre>"},{"location":"request/#store-in-public-uploads","title":"Store in Public Uploads","text":"<pre><code>$path = $file-&gt;storePublic('avatars');\n</code></pre> <ul> <li>Stores in <code>uploads/public/avatars/</code> (web-accessible).</li> </ul>"},{"location":"request/#store-in-private-uploads","title":"Store in Private Uploads","text":"<pre><code>$path = $file-&gt;storePrivate('documents');\n</code></pre> <ul> <li>Stores in <code>uploads/private/documents/</code> (not web-accessible by default).</li> </ul>"},{"location":"request/#storage-options","title":"Storage Options","text":"<p>You can customize storage via the <code>$options</code> array:</p> <ul> <li><code>'name'</code>: Custom filename (string or callable)</li> <li><code>'unique'</code>: Generate a unique filename (bool)</li> <li><code>'preserve_name'</code>: Keep original name as prefix when unique (bool)</li> </ul> <p>Example:</p> <pre><code>$path = $file-&gt;storePublic('avatars', [\n    'unique' =&gt; true,\n    'preserve_name' =&gt; true,\n]);\n</code></pre>"},{"location":"request/#troubleshooting","title":"Troubleshooting","text":"<ul> <li><code>request()-&gt;file('key')</code> returns <code>null</code> if no file was uploaded.</li> <li>For multiple files, always check <code>is_array()</code> before looping.</li> <li>Always check <code>hasError()</code> to avoid processing failed uploads.</li> <li>Use <code>storePublic</code> for files that should be accessible via URL, and <code>storePrivate</code> for protected files.</li> </ul>"},{"location":"request/#http-headers","title":"HTTP Headers","text":"<p>Lightpack provides a clean API for accessing request headers through the <code>request()</code> helper.</p>"},{"location":"request/#retrieving-a-single-header","title":"Retrieving a Single Header","text":"<pre><code>// Get a specific header value (case-insensitive)\n$userAgent = request()-&gt;header('User-Agent');\n$auth = request()-&gt;header('Authorization');\n$custom = request()-&gt;header('X-Custom-Header', 'default-value');\n</code></pre> <ul> <li>Header names are case-insensitive and normalized internally.</li> <li>If the header is not present, the default value is returned (or <code>null</code> if not specified).</li> </ul>"},{"location":"request/#checking-for-a-header","title":"Checking for a Header","text":"<pre><code>if (request()-&gt;hasHeader('X-Requested-With')) {\n    // Handle AJAX request\n}\n</code></pre>"},{"location":"request/#retrieving-all-headers","title":"Retrieving All Headers","text":"<pre><code>$headers = request()-&gt;headers(); // Returns an associative array of all headers\nforeach ($headers as $name =&gt; $value) {\n    // Process each header\n}\n</code></pre>"},{"location":"request/#common-header-patterns","title":"Common Header Patterns","text":""},{"location":"request/#authorization-bearer-token","title":"Authorization / Bearer Token","text":"<pre><code>$token = request()-&gt;bearerToken();\nif ($token) {\n    // Use the Bearer token for authentication\n}\n</code></pre>"},{"location":"request/#csrf-token_1","title":"CSRF Token","text":"<pre><code>$csrf = request()-&gt;csrfToken();\n</code></pre>"},{"location":"request/#user-agent","title":"User-Agent","text":"<pre><code>$ua = request()-&gt;userAgent();\n</code></pre>"},{"location":"request/#forwarded-headers","title":"Forwarded Headers","text":"<p>Lightpack automatically parses common proxy headers:</p> <ul> <li><code>X-Forwarded-For</code> (client IP)</li> <li><code>X-Forwarded-Proto</code> (scheme)</li> <li><code>X-Forwarded-Host</code> (host)</li> <li><code>X-Forwarded-Port</code> (port)</li> </ul> <p>These are used internally by <code>request()-&gt;ip()</code>, <code>request()-&gt;scheme()</code>, etc., but you can also access them directly:</p> <pre><code>$proto = request()-&gt;header('X-Forwarded-Proto');\n</code></pre>"},{"location":"request/#notes","title":"Notes","text":"<ul> <li>All header methods are case-insensitive.</li> <li>For custom headers, always use the normalized name (e.g., <code>X-Custom-Header</code>).</li> </ul>"},{"location":"response/","title":"Response","text":"<p>The <code>Lightpack\\Http\\Response</code> class provides a comprehensive, fluent API for generating HTTP responses in your application. It supports status codes, headers, content types, file downloads, streaming, security, caching, advanced output, and more.</p> <p>An instance is automatically available via the <code>response()</code> helper.</p>"},{"location":"response/#status-type-message-and-body","title":"Status, Type, Message, and Body","text":"<ul> <li>Set Status Code: <code>php   response()-&gt;setStatus(404);</code></li> <li>Sets both the code and the standard status message, unless overridden.</li> <li> <p>Default: <code>200</code> (OK)</p> </li> <li> <p>Get Status Code: <code>php   $code = response()-&gt;getStatus();</code></p> </li> <li> <p>Set/Override Status Message: <code>php   response()-&gt;setMessage('Not Found');</code></p> </li> <li> <p>Default: Standard HTTP message for the code (e.g., <code>OK</code> for 200).</p> </li> <li> <p>Get Status Message: <code>php   $msg = response()-&gt;getMessage();</code></p> </li> <li> <p>Set Content Type: <code>php   response()-&gt;setType('application/json');</code></p> </li> <li>Default: <code>text/html</code></li> <li> <p>Charset is always set to UTF-8.</p> </li> <li> <p>Get Content Type: <code>php   $type = response()-&gt;getType();</code></p> </li> <li> <p>Set Response Body: <code>php   response()-&gt;setBody('Hello World');</code></p> </li> <li> <p>Get Response Body: <code>php   $body = response()-&gt;getBody();</code></p> </li> </ul>"},{"location":"response/#header-management","title":"Header Management","text":"<ul> <li> <p>Set a Header: <code>php   response()-&gt;setHeader('X-Frame-Options', 'SAMEORIGIN');</code></p> </li> <li> <p>Set Multiple Headers: <code>php   response()-&gt;setHeaders([       'Server' =&gt; 'Apache',       'X-Frame-Options' =&gt; 'SAMEORIGIN',   ]);</code></p> </li> <li> <p>Get All Headers: <code>php   $headers = response()-&gt;getHeaders();</code></p> </li> <li> <p>Get a Header by Name: <code>php   $value = response()-&gt;getHeader('X-Frame-Options');</code></p> </li> <li> <p>Check if Header Exists: <code>php   if (response()-&gt;hasHeader('Content-Type')) { ... }</code></p> </li> </ul>"},{"location":"response/#sending-the-response","title":"Sending the Response","text":"<ul> <li>Send the response to the client: <code>php   response()-&gt;send();</code></li> </ul>"},{"location":"response/#method-chaining","title":"Method Chaining","text":"<p>All setters return <code>$this</code> for fluent chaining:</p> <pre><code>response()\n    -&gt;setStatus(201)\n    -&gt;setType('application/json')\n    -&gt;setHeader('X-Resource', 'created')\n    -&gt;json(['id' =&gt; 5])\n    -&gt;send();\n</code></pre>"},{"location":"response/#json-xml-and-plain-text-responses","title":"JSON, XML, and Plain Text Responses","text":"<ul> <li>JSON Response: <code>php   response()-&gt;json(['success' =&gt; true]);</code></li> <li>Sets Content-Type to <code>application/json</code> and encodes the data.</li> <li> <p>Throws exception if encoding fails.</p> </li> <li> <p>XML Response: <code>php   response()-&gt;xml('&lt;root&gt;&lt;name&gt;Bob&lt;/name&gt;&lt;/root&gt;');</code></p> </li> <li> <p>Sets Content-Type to <code>text/xml</code>.</p> </li> <li> <p>Plain Text Response: <code>php   response()-&gt;text('Hello World');</code></p> </li> <li>Sets Content-Type to <code>text/plain</code>.</li> </ul>"},{"location":"response/#file-downloads-and-streaming","title":"File Downloads and Streaming","text":"<ul> <li> <p>Download a locally stored file: <code>php   response()-&gt;download('/path/to/file.pdf');   response()-&gt;download('/path/to/file.pdf', 'custom.pdf');   response()-&gt;download('/path/to/file.pdf', null, ['X-Header' =&gt; 'Value']);</code></p> </li> <li> <p>Sets appropriate headers for download.</p> </li> <li>Automatically detects MIME type.</li> <li> <p>Reads file into memory (not recommended for large files).</p> </li> <li> <p>Stream a File Download (Memory Efficient):   ```php   response()-&gt;downloadStream('/path/to/large.zip');</p> </li> </ul> <p>// Stream in 2MB chunks   response()-&gt;downloadStream('/path/to/large.zip', 'archive.zip', [], 210241024);    ```</p> <ul> <li>Streams file in chunks to client.</li> <li> <p>Use for large files to avoid memory issues.</p> </li> <li> <p>Display a File Inline in Browser: <code>php   response()-&gt;file('/path/to/image.jpg');</code></p> </li> <li> <p>Like <code>download()</code>, but sets <code>Content-Disposition: inline</code>.</p> </li> <li> <p>Stream a File Inline: <code>php   response()-&gt;fileStream('/path/to/large-video.mp4');</code></p> </li> <li> <p>Streams large files for in-browser display.</p> </li> <li> <p>Best Practice: Always use streaming methods for files larger than a few megabytes.</p> </li> </ul>"},{"location":"response/#streaming-responses","title":"Streaming Responses","text":"<p>Lightpack\u2019s <code>Response</code> class provides several ways to stream data to the client in a memory-efficient, real-time manner. This is essential for large files, live data, CSV exports, and server-sent events (SSE).</p>"},{"location":"response/#1-arbitrary-content-streaming-stream","title":"1. Arbitrary Content Streaming (<code>stream()</code>)","text":"<p>Use <code>stream()</code> to send custom output in real time, such as: - Large dynamically-generated content - Server-Sent Events (SSE) - Progress updates - Long-running reports</p> <p>Example: Real-time progress output</p> <pre><code>response()-&gt;stream(function() {\n    for ($i = 1; $i &lt;= 10; $i++) {\n        echo \"Progress: $i/10\\n\";\n        flush(); // Push output to client immediately\n        sleep(1);\n    }\n});\n</code></pre> <p>Example: Server-Sent Events (SSE)</p> <pre><code>response()\n    -&gt;setHeader('Content-Type', 'text/event-stream')\n    -&gt;stream(function() {\n        for ($i = 0; $i &lt; 5; $i++) {\n            echo \"data: Message $i\\n\\n\";\n            ob_flush(); flush();\n            sleep(2);\n        }\n    });\n</code></pre> <p>getStreamCallback(): - Use <code>getStreamCallback()</code> to retrieve the currently set stream callback function. - This is useful for testing, introspection, or advanced middleware that needs to inspect or manipulate the streaming logic before sending the response.</p> <p>Example: Inspecting the stream callback</p> <pre><code>$response = response()-&gt;stream(function() {\n    echo 'Streaming...';\n});\n\n$callback = $response-&gt;getStreamCallback();\nif (is_callable($callback)) {\n    // You can inspect, wrap, or call the callback as needed\n}\n</code></pre> <p>Notes: - Always call <code>flush()</code> or <code>ob_flush()</code> to ensure data is sent immediately. - Use <code>setHeader()</code> to set appropriate content types (e.g., <code>text/event-stream</code> for SSE). - The callback receives no arguments; use closures to capture needed variables. - Streaming disables the normal response body (<code>setBody()</code> is ignored if a stream is set).</p>"},{"location":"response/#2-file-streaming-for-downloads-downloadstream","title":"2. File Streaming for Downloads (<code>downloadStream()</code>)","text":"<p>Use <code>downloadStream()</code> for memory-efficient, chunked file downloads:</p> <p>Example: Download a large file in 2MB chunks</p> <pre><code>response()-&gt;downloadStream('/path/to/huge.zip', 'backup.zip', [], 2 * 1024 * 1024);\n</code></pre> <ul> <li>Automatically sets headers for file download.</li> <li>Reads and outputs the file in chunks (default 1MB, configurable).</li> <li>Avoids loading the entire file into memory.</li> <li>Throws an exception if the file does not exist.</li> </ul> <p>Best Practice: Use for files larger than a few megabytes.</p>"},{"location":"response/#3-file-streaming-for-inline-display-filestream","title":"3. File Streaming for Inline Display (<code>fileStream()</code>)","text":"<p>Use <code>fileStream()</code> to stream large files for direct display in the browser (e.g., videos, PDFs):</p> <p>Example: Stream a video inline</p> <pre><code>response()-&gt;fileStream('/media/bigvideo.mp4');\n</code></pre> <ul> <li>Sets <code>Content-Disposition: inline</code> so the browser displays the file.</li> <li>Uses chunked output for memory efficiency.</li> </ul>"},{"location":"response/#4-csv-streaming-streamcsv","title":"4. CSV Streaming (<code>streamCsv()</code>)","text":"<p>Use <code>streamCsv()</code> to efficiently export large datasets as CSV downloads:</p> <p>Example: Export users as CSV</p> <pre><code>response()-&gt;streamCsv(function() {\n    echo \"id,name\\n\";\n    foreach ($users as $user) {\n        echo $user-&gt;id . ',' . $user-&gt;name . \"\\n\";\n    }\n}, 'users.csv');\n</code></pre> <ul> <li>Sets <code>Content-Type: text/csv</code> and download headers.</li> <li>The callback writes CSV rows directly to output.</li> <li>Ideal for exporting large or streaming datasets.</li> </ul>"},{"location":"response/#5-streaming-gotchas-and-best-practices","title":"5. Streaming Gotchas and Best Practices","text":"<ul> <li>Headers: All headers must be set before returning the response. Once output starts, headers cannot be changed.</li> <li>Buffering: Use <code>flush()</code> or <code>ob_flush()</code> to push output.</li> <li>Connection Handling: If the client disconnects, the stream callback should handle it (see <code>connection_status()</code> in PHP).</li> <li>Error Handling: For file streams, exceptions are thrown if the file is missing. For custom streams, handle errors in your callback.</li> <li>Memory Usage: Streaming is essential for large files or datasets\u2014never read large files into memory with <code>setBody()</code> or <code>download()</code>.</li> <li>Chaining: All streaming methods are chainable with other response configuration methods.</li> </ul>"},{"location":"response/#working-with-redirects","title":"Working with Redirects","text":""},{"location":"response/#what-is-an-http-redirect","title":"What is an HTTP Redirect?","text":"<p>An HTTP redirect tells the browser to immediately load a different URL. This is done by sending a special status code (usually 302) and a <code>Location</code> header in the response. Redirects are commonly used after form submissions, login/logout, or when a resource has moved.</p> <p>In Lightpack, redirects are handled by the <code>Redirect</code> class, accessible via the <code>redirect()</code> helper. This provides a clear, expressive, and testable API for all common redirect scenarios.</p>"},{"location":"response/#common-redirect-methods","title":"Common Redirect Methods","text":""},{"location":"response/#redirect-tourl","title":"redirect()-&gt;to($url)","text":"<p>Redirect to any absolute or relative URL.</p> <p>Example: After login, send user to dashboard</p> <pre><code>public function login()\n{\n    // ... authentication logic ...\n    return redirect()-&gt;to('/dashboard');\n}\n</code></pre> <ul> <li>Sets status code 302 and <code>Location: /dashboard</code> header.</li> <li>Works with both absolute and relative URLs.</li> </ul>"},{"location":"response/#redirect-routename-params","title":"redirect()-&gt;route($name, ...$params)","text":"<p>Redirect to a named route, passing route parameters as needed.</p> <p>Example: After profile update, redirect to profile page</p> <pre><code>public function update($userId)\n{\n    // ... update logic ...\n    return redirect()-&gt;route('profile', $userId);\n}\n</code></pre> <ul> <li>Resolves the route name and parameters to a URL.</li> <li>Ensures your redirects stay in sync with route changes.</li> </ul>"},{"location":"response/#redirect-back","title":"redirect()-&gt;back()","text":"<p>Redirect back to the previous page (using URL stored in session, or <code>/</code> if unavailable).</p> <p>Example: After failed form validation, return user to previous page</p> <pre><code>public function save()\n{\n    if (! $this-&gt;validate()) {\n        // ... maybe set flash message ...\n        return redirect()-&gt;back();\n    }\n    // ...\n}\n</code></pre> <ul> <li>Uses session to remember the last visited URL.</li> <li>Essential for post/redirect/get patterns.</li> </ul>"},{"location":"response/#redirect-intended","title":"redirect()-&gt;intended()","text":"<p>Redirect to the \u201cintended\u201d URL stored in session (commonly used after login), or <code>/</code> if not set.</p> <p>Example: After login, send user to originally requested page</p> <pre><code>public function login()\n{\n    // ... authentication logic ...\n    return redirect()-&gt;intended();\n}\n</code></pre> <ul> <li>Stores the intended URL before redirecting unauthenticated users.</li> <li>After login, users are returned to where they originally wanted to go.</li> </ul>"},{"location":"response/#redirect-refresh","title":"redirect()-&gt;refresh()","text":"<p>Redirect to the current URL (refresh the page).</p> <p>Example: After a POST, refresh the page to show updated data</p> <pre><code>public function post()\n{\n    // ... save logic ...\n    return redirect()-&gt;refresh();\n}\n</code></pre> <ul> <li>Useful for preventing duplicate form submissions.</li> </ul>"},{"location":"response/#common-patterns-and-pitfalls","title":"Common Patterns and Pitfalls","text":"<ul> <li>Always return the redirect from your controller: <code>php   return redirect()-&gt;to('/login');</code></li> <li>Chain additional headers or configuration: <code>php   return redirect()-&gt;to('/login')-&gt;setHeader('X-Reason', 'auth-required');</code></li> <li>Flash messages: Set flash data before redirecting to show messages after redirect.</li> <li>Session integration: <code>back()</code> and <code>intended()</code> rely on session data\u2014ensure sessions are enabled.</li> <li>Prefer <code>redirect()</code> over manual Location headers: It\u2019s safer, more expressive, and integrates with Lightpack\u2019s routing/session system.</li> <li>Advanced: For custom needs, use <code>setRedirectUrl()</code> and <code>getRedirectUrl()</code> on any response, but the <code>Redirect</code> class covers all standard use cases.</li> </ul>"},{"location":"response/#view-rendering","title":"View Rendering","text":"<ul> <li>Render a Template: <code>php   response()-&gt;view('emails/welcome', ['name' =&gt; 'Alice']);</code></li> <li>Renders an HTML template as the response body.</li> <li>The second parameter allows passing an array of data to be available to view templates.</li> <li>Each array data key becomes a variable available to the view file.</li> </ul>"},{"location":"response/#security-headers","title":"Security Headers","text":"<ul> <li>Apply Secure Defaults: <code>php   response()-&gt;secure();</code></li> <li>Adds recommended security headers:<ul> <li><code>X-Content-Type-Options: nosniff</code></li> <li><code>X-Frame-Options: SAMEORIGIN</code></li> <li><code>X-XSS-Protection: 1; mode=block</code></li> <li><code>Referrer-Policy: strict-origin-when-cross-origin</code></li> <li>Adds HSTS if HTTPS is detected.</li> </ul> </li> <li>You can also pass custom headers to override or add:     <code>php     response()-&gt;secure(['X-Frame-Options' =&gt; 'DENY']);</code></li> </ul>"},{"location":"response/#caching-and-last-modified","title":"Caching and Last-Modified","text":"<ul> <li>Enable HTTP Caching: <code>php   response()-&gt;cache(3600); // 1 hour   response()-&gt;cache(3600, ['public' =&gt; false, 'immutable' =&gt; true]);</code></li> <li>Sets <code>Cache-Control</code>, <code>Expires</code>, and <code>Pragma</code> headers.</li> <li><code>public</code> (default true): Allow shared caches; <code>private</code>: only for user.</li> <li> <p><code>immutable</code>: Content won\u2019t change during cache lifetime.</p> </li> <li> <p>Disable Caching: <code>php   response()-&gt;noCache();</code></p> </li> <li> <p>Sets appropriate headers to prevent all caching.</p> </li> <li> <p>Set Last-Modified Header: <code>php   response()-&gt;setLastModified(time());   response()-&gt;setLastModified('2024-07-17 12:00:00');   response()-&gt;setLastModified(new DateTime());</code></p> </li> <li>Accepts timestamp, date string, or DateTime object.</li> </ul>"},{"location":"response/#summary-table-of-methods","title":"Summary Table of Methods","text":"Method Purpose setStatus(int) Set HTTP status code getStatus() Get HTTP status code setMessage(string) Set HTTP status message getMessage() Get HTTP status message setType(string) Set Content-Type getType() Get Content-Type setHeader(name, value) Set a header setHeaders(array) Set multiple headers getHeaders() Get all headers getHeader(name) Get a header value hasHeader(name) Check if header is set setBody(string) Set response body getBody() Get response body send() Send headers and body setTestMode(bool) Prevent exit() (for tests) json(data) Set JSON response xml(string) Set XML response text(string) Set plain text response download(path, ...) Download a file downloadStream(path, ...) Stream file download (large files) file(path, ...) Display a file inline fileStream(path, ...) Stream file inline (large files) stream(callable) Stream custom output getStreamCallback() Get stream callback view(file, data) Render and set a template streamCsv(callable, name) Stream CSV file for download secure([headers]) Add security headers cache(maxAge, [options]) Enable HTTP caching noCache() Disable HTTP caching setLastModified(time) Set Last-Modified header setRedirectUrl(url) Set a logical redirect URL getRedirectUrl() Get the logical redirect URL"},{"location":"routing/","title":"Routing","text":"<p>Lightpack\u2019s routing system lets you map incoming HTTP request URLs to appropriate controllers and actions with clarity and flexibility. This guide covers all routing features available to app developers\u2014so you can build delightful, robust APIs and web apps.</p>"},{"location":"routing/#quick-start","title":"Quick Start","text":"<pre><code>// Basic GET route\nroute()-&gt;get('/products', ProductController::class); // maps to index()\n\n// Specify action\nroute()-&gt;get('/products', ProductController::class, 'list');\n\n// Route with parameter\nroute()-&gt;get('/products/:id', ProductController::class, 'show');\n</code></pre>"},{"location":"routing/#route-files","title":"Route Files","text":"<p>Define routes in the <code>routes</code> folder:</p> <pre><code>routes/\n  \u251c\u2500\u2500 web.php   // for web routes\n  \u2514\u2500\u2500 api.php   // for API routes\n</code></pre>"},{"location":"routing/#route-methods","title":"Route Methods","text":"<p>Lightpack supports all HTTP verbs and flexible grouping: - <code>route()-&gt;get()</code> - <code>route()-&gt;post()</code> - <code>route()-&gt;put()</code> - <code>route()-&gt;patch()</code> - <code>route()-&gt;delete()</code> - <code>route()-&gt;options()</code> - <code>route()-&gt;any()</code> (registers for all verbs) - <code>route()-&gt;map()</code> (registers for multiple verbs) - <code>route()-&gt;group()</code> (for prefix/filter/host grouping)</p> <p>Examples:</p> <pre><code>route()-&gt;post('/products', ProductController::class, 'store');\nroute()-&gt;map(['GET', 'POST'], '/contact', ContactController::class, 'handle');\nroute()-&gt;any('/ping', HealthController::class);\n</code></pre>"},{"location":"routing/#route-parameters","title":"Route Parameters","text":"<p>Define dynamic segments with <code>:param</code> syntax:</p> <pre><code>route()-&gt;get('/users/:id', UserController::class, 'show');\n</code></pre> <ul> <li>Parameters are passed as arguments to your controller action.</li> </ul> <p>Optional parameters:</p> <pre><code>route()-&gt;get('/users/:id/photos/:photo?', UserController::class, 'photo');\n</code></pre> <ul> <li><code>?</code> makes the last parameter optional (will be <code>null</code> if not present).</li> </ul>"},{"location":"routing/#custom-regex-placeholders","title":"Custom Regex &amp; Placeholders","text":"<p>Use built-in placeholders or custom regex for flexible matching: - <code>:any</code> \u2192 <code>.*</code> - <code>:num</code> \u2192 <code>[0-9]+</code> - <code>:seg</code> \u2192 <code>[^/]+</code> - <code>:slug</code> \u2192 <code>[a-zA-Z0-9-]+</code> - <code>:alpha</code> \u2192 <code>[a-zA-Z]+</code> - <code>:alnum</code> \u2192 <code>[a-zA-Z0-9]+</code></p> <p>Example:</p> <pre><code>route()-&gt;get('/posts/:slug', PostController::class)-&gt;pattern(['slug' =&gt; ':slug']);\n</code></pre> <p>Custom regex:</p> <pre><code>route()-&gt;get('/users/:id', UserController::class)-&gt;pattern(['id' =&gt; '([0-9]{4})']);\n</code></pre>"},{"location":"routing/#route-naming-url-generation","title":"Route Naming &amp; URL Generation","text":"<p>Name routes for easy URL generation:</p> <pre><code>route()-&gt;get('/products/:id', ProductController::class)-&gt;name('product.show');\n</code></pre> <p>Generate URLs using the <code>url()</code> helper:</p> <pre><code>url()-&gt;route('product.show', 42); // /products/42\n</code></pre>"},{"location":"routing/#route-filters","title":"Route Filters","text":"<p>Attach filters (middleware) to routes or groups:</p> <pre><code>route()-&gt;get('/admin', AdminController::class)-&gt;filter('auth');\nroute()-&gt;post('/users', UserController::class)-&gt;filter(['auth', 'csrf']);\n</code></pre> <ul> <li>Filters can be strings or arrays; they accumulate and are unique per route.</li> <li>See filters docs for details.</li> </ul>"},{"location":"routing/#route-groups","title":"Route Groups","text":"<p>Group routes by prefix, filters, or host:</p> <pre><code>// Prefix group\nroute()-&gt;group(['prefix' =&gt; '/api/v1'], function() {\n    route()-&gt;get('/users', UserController::class);\n});\n\n// Filter group\nroute()-&gt;group(['filter' =&gt; ['auth']], function() {\n    route()-&gt;post('/posts', PostController::class);\n});\n\n// Host-based group\nroute()-&gt;group(['host' =&gt; 'admin.example.com'], function() {\n    route()-&gt;get('/dashboard', AdminController::class);\n});\n</code></pre> <ul> <li>Groups can be nested; options are merged (prefixes/filters/hosts accumulate).</li> </ul>"},{"location":"routing/#multi-verb-routes","title":"Multi-Verb Routes","text":"<p>Register a route for multiple HTTP verbs with <code>map()</code> or all verbs with <code>any()</code>:</p> <pre><code>// GET and POST\nroute()-&gt;map(['GET', 'POST'], '/feedback', FeedbackController::class, 'submit');\n\n// All verbs\nroute()-&gt;any('/status', StatusController::class);\n</code></pre>"},{"location":"routing/#best-practices-gotchas","title":"Best Practices &amp; Gotchas","text":"<ul> <li>Order matters: Register more specific routes before generic ones.</li> <li>Unique route names: Avoid duplicate names for reliable URL generation.</li> <li>Filter accumulation: Filters from groups and routes are merged and deduplicated.</li> <li>Group nesting: Prefixes and filters accumulate in nested groups.</li> <li>Optional params: Use <code>:param?</code> for optional last segment; missing param are <code>null</code>.</li> <li>Host-based routes: Use <code>host</code> option for subdomain or domain-specific routes.</li> <li>404s: If no route matches, Lightpack throws a <code>RouteNotFoundException</code>.</li> </ul>"},{"location":"schedule/","title":"Lightpack Scheduler","text":"<p>Lightpack provides support for scheduling jobs and commands in your applications. The scheduler lets you automate recurring tasks\u2014like sending emails, cleaning up data, or running custom scripts\u2014using familiar cron expressions, a fluent API, and full testability.</p> <p>Scheduling is essential for:</p> <ul> <li>Automated maintenance (cleanup, backups, pruning)</li> <li>Sending periodic notifications or emails</li> <li>Running reports or analytics</li> <li>Integrating with external services at intervals</li> <li>Any recurring or timed workflow</li> </ul> <p>At the heart of the scheduler is the cron expression\u2014a 5-part string describing when a task should run:</p> <pre><code>* * * * *\n| | | | |\n| | | | +----- Day of week (0-6, Sunday=0)\n| | | +------- Month (1-12)\n| | +--------- Day of month (1-31)\n| +----------- Hour (0-23)\n+------------- Minute (0-59)\n</code></pre> <ul> <li><code>* * * * *</code> = every minute</li> <li><code>0 * * * *</code> = every hour, at minute 0</li> <li><code>0 0 * * *</code> = every day at midnight</li> </ul> <p>You can use ranges (<code>1-5</code>), steps (<code>*/15</code>), lists (<code>1,15,30</code>), and wildcards (<code>*</code>).</p>"},{"location":"schedule/#running-the-scheduler","title":"Running the Scheduler","text":"<p>To actually execute your scheduled jobs and commands, you need to run the scheduler at regular intervals. Lightpack provides a built-in console command for this purpose:</p> <pre><code>php console schedule:events\n</code></pre> <p>This command is handled by the <code>ScheduleEvents</code> class and will execute all jobs and commands that are due at the current time.</p> <p>Production Setup:</p> <p>In thr production environment, you should set up a system cron job to call this command every minute:</p> <pre><code>* * * * * php /path/to/lightpack schedule:run\n</code></pre> <p>This ensures your scheduled events are checked and executed on time.</p>"},{"location":"schedule/#defining-schedules","title":"Defining Schedules","text":"<p>You should define all the schedules in <code>schedules/schedules.php</code> file.</p> <pre><code>// Schedule a job to run every day at midnight\nschedule()-&gt;job('SendDailyReport')-&gt;daily();\n\n// Schedule a command to run every hour\nschedule()-&gt;command('CleanupCommand')-&gt;hourly();\n\n// Schedules a command with arguments\nschedule()-&gt;command('MyCommandClass', ['--force' =&gt; true]); \n</code></pre>"},{"location":"schedule/#setting-when-events-run","title":"Setting When Events Run","text":"<p>Using Cron Expressions Directly</p> <pre><code>schedule()-&gt;job('BackupJob')-&gt;cron('0 3 * * *'); // Every day at 3:00 AM\n</code></pre> <p>Using Fluent Helpers</p> <ul> <li><code>daily()</code> \u2014 every day at midnight</li> <li><code>hourly()</code> \u2014 every hour at minute 0</li> <li><code>weekly()</code> \u2014 every Sunday at midnight</li> <li><code>monthly()</code> \u2014 first day of month at midnight</li> <li><code>everyMinutes(15)</code> \u2014 every 15 minutes</li> <li><code>mondays()</code>, <code>tuesdays()</code>, ..., <code>sundays()</code> \u2014 at midnight on that day</li> <li><code>at('17:30')</code> \u2014 run at a specific time (combine with day helpers)</li> </ul>"},{"location":"schedule/#examples","title":"Examples","text":"<p>Every Friday at 5:00 PM</p> <pre><code>schedule()-&gt;job('SendNewsletter')-&gt;fridays()-&gt;at('17:00');\n</code></pre> <p>15th of each month at 9:00 AM</p> <pre><code>schedule()-&gt;job('SendNewsletter')-&gt;monthlyOn(15, '09:00')\n</code></pre> <p>Run a Job Every 15 Minutes</p> <pre><code>schedule()-&gt;job('SyncJob')-&gt;everyMinutes(15);\n</code></pre> <p>Run a Command Every Monday at 9:15 AM</p> <pre><code>schedule()-&gt;command('WeeklySummary')-&gt;mondays()-&gt;at('9:15');\n</code></pre> <p>Run on the 1st and 15th of Each Month at 8:00 AM</p> <pre><code>schedule()-&gt;job('BiMonthlyJob')-&gt;cron('0 8 1,15 * *');\n</code></pre>"},{"location":"secrets/","title":"Lightpack Secrets","text":"<p>Lightpack Secrets is a robust, framework-level solution for managing sensitive credentials (API keys, tokens, passwords, and more) with end-to-end encryption, explicit APIs, and full developer control.</p>"},{"location":"secrets/#why-use-lightpack-secrets","title":"Why Use Lightpack Secrets?","text":"<ul> <li>Protect sensitive credentials: Prevent accidental leaks and unauthorized access.</li> <li>Zero plaintext at rest: All secrets are always encrypted in the database.</li> <li>Multi-tenant ready: Secrets can be scoped to users, apps, or organizations.</li> <li>Framework-native: Direct support</li> </ul>"},{"location":"secrets/#encryption-key-management","title":"Encryption &amp; Key Management","text":"<ul> <li>AES-256-CBC encryption with random IV per secret (non-deterministic ciphertext).</li> <li>Master key is required and must be set in your config/env as <code>app.secrets_key</code>.</li> <li>Key never stored in DB\u2014only in your environment/config.</li> <li>No backdoor: If you lose the key, all secrets are irretrievable.</li> <li>Key rotation: Built-in method to re-encrypt all secrets with a new key (see below).</li> </ul>"},{"location":"secrets/#data-model-secrets-table","title":"Data Model: <code>secrets</code> Table","text":"Column Type Notes id int PK, auto-increment key string Unique secret key (per group/owner) value text Encrypted secret value (JSON-encoded) group string (default: 'global') Logical grouping owner_id int (nullable) User/org ID created_at timestamp Creation time updated_at timestamp Last update time UNIQUE KEY (<code>key</code>, <code>group</code>, <code>owner_id</code>)"},{"location":"secrets/#migration","title":"Migration","text":"<p>Run this command to generate a migration file:</p> <pre><code>php console create:migration create_table_secrets\n</code></pre> <p>Use the following code for the <code>up()</code> and <code>down()</code> methods:</p> <pre><code>public function up(): void\n{\n    $this-&gt;create('secrets', function (Table $table) {\n        $table-&gt;id();\n        $table-&gt;varchar('key', 150);\n        $table-&gt;text('value'); // Encrypted\n        $table-&gt;varchar('group', 150)-&gt;default('global');\n        $table-&gt;column('owner_id')-&gt;type('bigint')-&gt;attribute('unsigned')-&gt;nullable();\n        $table-&gt;timestamps();\n        $table-&gt;unique(['key', 'group', 'owner_id']);\n    });\n}\n\npublic function down(): void\n{\n    $this-&gt;drop('secrets');\n}\n</code></pre>"},{"location":"secrets/#configuration","title":"Configuration","text":"<ul> <li>Set your secrets key in your config or <code>.env</code>:   <code>env   SECRETS_KEY=your-32-byte-random-string</code></li> <li>The key must be 32 bytes for AES-256.</li> <li>Never commit secrets keys to version control.</li> </ul>"},{"location":"secrets/#core-api-via-model-trait","title":"Core API (via Model Trait)","text":"<p>On any model using <code>SecretsTrait</code>:</p> <pre><code>class User extends Model\n{\n    use Lightpack\\Secrets\\SecretsTrait;\n}\n</code></pre> <pre><code>$user-&gt;secrets()-&gt;set('api_token', 'secret-value');\n$user-&gt;secrets()-&gt;get('api_token');\n$user-&gt;secrets()-&gt;delete('api_token');\n</code></pre>"},{"location":"secrets/#globalapp-settings","title":"Global/App Settings","text":"<p>Instantiate via container or you can type hint Secrets as your controller's method dependency.</p>"},{"location":"secrets/#set-a-secret","title":"Set a Secret","text":"<pre><code>app('secrets')\n    -&gt;group('users')\n    -&gt;owner(42)\n    -&gt;set('api_token', 'secret-value');\n</code></pre>"},{"location":"secrets/#get-a-secret","title":"Get a Secret","text":"<pre><code>$token = app('secrets')\n    -&gt;group('users')\n    -&gt;owner(42)\n    -&gt;get('api_token');\n</code></pre>"},{"location":"secrets/#delete-a-secret","title":"Delete a Secret","text":"<pre><code>app('secrets')\n    -&gt;group('users')\n    -&gt;owner(42)\n    -&gt;delete('api_token');\n</code></pre>"},{"location":"secrets/#change-groupowner-scope","title":"Change Group/Owner Scope","text":"<pre><code>app('secrets')\n    -&gt;group('global')\n    -&gt;owner(null)\n    -&gt;set('service_key', 'xyz');\n</code></pre>"},{"location":"secrets/#key-rotation-re-encrypt-all-secrets","title":"Key Rotation (Re-encrypt All Secrets)","text":"<p>Lightpack supports secrets rotation by exposing <code>rotateKey()</code> method:</p> <pre><code>$oldKey = get_env('OLD_SECRETS_KEY');\n$newKey = get_env('NEW_SECRETS_KEY');\n\n// Rotate secrets in batch size of 100 (optional)\n$result = app('secrets')-&gt;rotateKey($oldKey, $newKey, 100); \n\n// $result = ['success' =&gt; &lt;count&gt;, 'fail' =&gt; &lt;count&gt;]\n// log the result for inspection\n</code></pre> <ul> <li>Efficient: Processes secrets in batches (default: 500, configurable).</li> <li>Safe: Only updates secrets that decrypt successfully; failures are reported.</li> <li>Flexible: Use in CLI, web, or migration context\u2014your choice.</li> </ul>"},{"location":"secrets/#key-rotation-checklist","title":"Key Rotation Checklist","text":"<ul> <li>Backup both old and new keys in a secure password manager or vault before rotating.</li> <li>Test rotation in staging before production.</li> <li>Update your config/env to use the new key after rotation.</li> <li>Never delete the old key until you confirm all secrets are accessible with the new key.</li> </ul>"},{"location":"secrets/#advanced-usage","title":"Advanced Usage","text":"<ul> <li>Batch size for rotation: Tune the batch size for your environment (memory vs. speed).</li> <li>Type safety: Secrets are JSON-encoded, so you can store arrays, objects, or scalars.</li> <li>Integration: Use in CLI scripts, web admin panels, or migrations as needed.</li> </ul>"},{"location":"secrets/#security-model","title":"Security Model","text":"<ul> <li>No caching: Secrets are always fetched from DB and decrypted on demand for maximum security.</li> <li>No plaintext at rest: All values are encrypted.</li> <li>No fallback: If the key is lost, secrets are unrecoverable.</li> <li>No accidental logging: Never log or expose decrypted secrets.</li> </ul>"},{"location":"seeder/","title":"Seeding","text":"<p>Manually populating database with test data while developing the application can be cumbersome. This is where database seeders help a lot. Seeders are classes that contain logic for populating the database with sufficient test data. </p> <p><code>Lightpack</code> provides a simple approach for populating test data with the help of database seeders.</p> <p>Suppose you have a products table with following columns:</p> products id title description"},{"location":"seeder/#creating-seeder","title":"Creating Seeder","text":"<p>Fire this command from the root of your project:</p> <pre><code>php console create:seeder ProductsSeeder\n</code></pre> <p>This should have created a seeder class named <code>ProductsSeeder</code> in <code>database/seeders</code> directory. </p> <p>This class has a method named <code>seed()</code> where you can write the logic for populating <code>products</code> table with test data.</p> <p>For example, here we populate 25 fake products as shown:</p> <pre><code>public function seed()\n{\n    foreach(range(1, 25) as $index) {\n        $product = new Product;\n        $product-&gt;title = \"Product {$index}\";\n        $product-&gt;description = \"Product description {$index}\";\n        $product-&gt;save();\n    }\n}\n</code></pre> <p>Here in each loop, we populate a new product using the <code>Product</code> model class.</p>"},{"location":"seeder/#calling-seeders","title":"Calling Seeders","text":"<p><code>Lightpack</code> ships with a <code>database/seeders/DatabaseSeeder.php</code> class file where you can execute the seeders you have created in the order you find appropriate.</p> <p>For example, suppose we have two seeders for <code>brands</code> and <code>products</code> and you wish to seed <code>brands</code> first and then <code>products</code>. You can do so by calling seeders inside the <code>seed()</code> method of <code>DatabaseSeeder</code> class. in that order.</p> <p>For example:</p> <pre><code>public function seed()\n{\n    (new BrandsSeeder)-&gt;seed();\n    (new ProductsSeeder)-&gt;seed();\n}\n</code></pre>"},{"location":"seeder/#executing-seeders","title":"Executing Seeders","text":"<p>As a final step, you need to execute all your seeders. For that, simply execute the following console command:</p> <pre><code>php console db:seed\n</code></pre>"},{"location":"seeder/#model-factory","title":"Model Factory","text":"<p>In any robust application, realistic data is the foundation for meaningful development, testing, and demonstration. But handcrafting this data\u2014or relying on repetitive, hardcoded examples\u2014quickly becomes tedious and brittle as your project grows. This is where model factories come in: they empower you to generate rich, dynamic, and scalable datasets that mirror real-world scenarios with minimal effort.</p> <p>Whether you\u2019re populating a development environment, stress-testing features, or preparing impressive demos, model factories transform seeding from a chore into a powerful tool for quality and innovation.</p> <p>Read the details about Lightpack's support for model factories in the Factory document.</p>"},{"location":"sessions/","title":"Sessions","text":"<p>Lightpack provides the <code>session()</code> function to work with sessions in a consistent, secure, and flexible way. The session system supports multiple storage drivers, dot notation for nested data, CSRF and agent validation, and more.</p>"},{"location":"sessions/#quick-start","title":"Quick Start","text":"<p>To use sessions, just call the global <code>session()</code> helper:</p> <pre><code>session()-&gt;set('user_id', 42);\n$userId = session()-&gt;get('user_id');\n</code></pre>"},{"location":"sessions/#supported-methods","title":"Supported Methods","text":"<pre><code>session()-&gt;set()\nsession()-&gt;get()\nsession()-&gt;has()\nsession()-&gt;delete()\nsession()-&gt;flash()\nsession()-&gt;regenerate()\nsession()-&gt;destroy()\nsession()-&gt;token()\nsession()-&gt;hasInvalidToken()\nsession()-&gt;hasInvalidAgent()\nsession()-&gt;verifyAgent()\nsession()-&gt;setUserAgent()\n</code></pre>"},{"location":"sessions/#features-usage","title":"Features &amp; Usage","text":""},{"location":"sessions/#setting-session-data","title":"Setting Session Data","text":"<p>Set a value (including arrays/objects) for a key:</p> <pre><code>session()-&gt;set('key', $value);\n</code></pre> <p>Supports dot notation for nested data:</p> <pre><code>session()-&gt;set('user.profile.name', 'Alice');\n</code></pre>"},{"location":"sessions/#getting-session-data","title":"Getting Session Data","text":"<p>Get a value by key:</p> <pre><code>session()-&gt;get('key');\n</code></pre> <p>Get a nested value:</p> <pre><code>session()-&gt;get('user.profile.name');\n</code></pre> <p>Provide a default if the key isn\u2019t found:</p> <pre><code>session()-&gt;get('key', 'default');\n</code></pre> <p>Get all session data:</p> <pre><code>session()-&gt;get();\n</code></pre>"},{"location":"sessions/#checking-existence","title":"Checking Existence","text":"<p>Check if a key (or nested key) exists:</p> <pre><code>session()-&gt;has('key');\nsession()-&gt;has('user.profile.name');\n</code></pre>"},{"location":"sessions/#deleting-session-data","title":"Deleting Session Data","text":"<p>Delete a key (or nested key):</p> <pre><code>session()-&gt;delete('key');\nsession()-&gt;delete('user.profile.name');\n</code></pre>"},{"location":"sessions/#flash-data","title":"Flash Data","text":"<p>Flash data persists only for the next request (great for messages):</p> <pre><code>session()-&gt;flash('notice', 'Profile updated!'); // Set flash data\n$notice = session()-&gt;flash('notice'); // Get and remove flash data\n</code></pre>"},{"location":"sessions/#regenerating-session-id","title":"Regenerating Session ID","text":"<p>Regenerate the session ID (for security after login, etc):</p> <pre><code>session()-&gt;regenerate();\n</code></pre> <ul> <li>Note: Also deletes the CSRF token.</li> </ul>"},{"location":"sessions/#destroying-the-session","title":"Destroying the Session","text":"<p>Completely destroy the session and all its data:</p> <pre><code>session()-&gt;destroy();\n</code></pre>"},{"location":"sessions/#security-features","title":"Security Features","text":""},{"location":"sessions/#csrf-token","title":"CSRF Token","text":"<p>Generate or retrieve a CSRF token:</p> <pre><code>$token = session()-&gt;token();\n</code></pre> <p>Check if the CSRF token is invalid (e.g., after form submission):</p> <pre><code>if(session()-&gt;hasInvalidToken()) {\n    // Block the request!\n}\n</code></pre>"},{"location":"sessions/#user-agent-validation","title":"User Agent Validation","text":"<p>Store and verify the user agent string to help prevent session hijacking:</p> <pre><code>// Manually set agent\nsession()-&gt;setUserAgent('AppleWebKit/KHTML'); \n\nif(session()-&gt;hasInvalidAgent()) {\n    // Block the request!\n}\n</code></pre>"},{"location":"sessions/#advanced-features","title":"Advanced Features","text":""},{"location":"sessions/#dot-notation-for-nested-data","title":"Dot Notation for Nested Data","text":"<p>You can set, get, check, or delete deeply nested session data using dot notation:</p> <pre><code>session()-&gt;set('cart.items.0.product_id', 123);\n$productId = session()-&gt;get('cart.items.0.product_id');\nsession()-&gt;delete('cart.items.0.product_id');\nsession()-&gt;has('cart.items.0.product_id');\n</code></pre>"},{"location":"sessions/#driver-system","title":"Driver System","text":"<p>Lightpack sessions support multiple drivers, each with different storage backends:</p> <ul> <li>DefaultDriver: Uses PHP\u2019s native <code>$_SESSION</code> (file-based).</li> <li>ArrayDriver: Stores data in-memory (great for tests).</li> <li>CacheDriver: Stores session in a cache backend.</li> <li>RedisDriver: Uses Redis for scalable, distributed sessions.</li> <li>EncryptedDriver: Encrypts session values at rest.</li> </ul> <p>You can configure the driver in your app\u2019s config.</p>"},{"location":"sessions/#edge-cases-notes","title":"Edge Cases &amp; Notes","text":"<ul> <li>Session keys can be any string. Use dot notation for nested arrays.</li> <li>Flash data is removed after it is read.</li> <li>Regenerating deletes the CSRF token for safety.</li> <li>If you use a custom driver, it must implement the <code>DriverInterface</code>.</li> <li>Session ID and cookie settings (name, lifetime, security flags) are configurable.</li> <li>EncryptedDriver requires a <code>Crypto</code> instance and will serialize/deserialize values automatically.</li> <li>ArrayDriver is not persistent and should only be used for testing.</li> <li>CacheDriver and RedisDriver handle session IDs and cookies internally, and support TTL (expiry).</li> </ul>"},{"location":"sessions/#configuration","title":"Configuration","text":"<p>Session settings (driver, name, lifetime, security, etc.) are controlled in your app\u2019s config file, typically <code>config/session.php</code>.</p>"},{"location":"settings/","title":"Lightpack Settings","text":"<p>Modern web applications need dynamic, database-driven settings to power everything from feature toggles and branding to user preferences and operational parameters.</p>"},{"location":"settings/#why-database-driven-settings","title":"Why Database-Driven Settings?","text":"<ul> <li>Instant updates: Change app behavior without code deploys.</li> <li>Multi-tenant support: Each user, organization, product, or any model can have their own settings.</li> <li>Feature toggles: Enable/disable features on the fly.</li> <li>Central management: Manage all settings from an admin UI or API.</li> <li>Polymorphic: Settings can be attached to any model, not just users or orgs.</li> </ul>"},{"location":"settings/#data-model","title":"Data Model","text":"<p>settings table</p> Column Type Notes id int PK, auto-increment key string(150) Setting key (not necessarily unique globally) value text Serialized or plain value key_type string(25) (optional) for type hints (int, bool, json, etc.) group string(150) Logical namespace (e.g., 'global', 'users', etc.) owner bigint The owner id within the group (nullable for global) updated_at timestamp Last update time <p>Indexes: - Composite index on (<code>group</code>, <code>owner</code>, <code>key</code>) for efficient lookups.</p>"},{"location":"settings/#migration","title":"Migration","text":"<p>Run this command to generate a migration file:</p> <pre><code>php console create:migration create_table_settings\n</code></pre> <p>Use the following code for the <code>up()</code> and <code>down()</code> methods:</p> <pre><code>public function up(): void\n{\n    $this-&gt;create('settings', function (Table $table) {\n        $table-&gt;id();\n        $table-&gt;varchar('key', 150);\n        $table-&gt;varchar('key_type', 25)-&gt;nullable();\n        $table-&gt;text('value');\n        $table-&gt;varchar('group', 150)-&gt;default('global');\n        $table-&gt;column('owner_id')-&gt;type('bigint')-&gt;attribute('unsigned')-&gt;nullable();\n        $table-&gt;timestamps();\n        $table-&gt;index(['group', 'owner_id', 'key']);\n    });\n}\n\npublic function down(): void\n{\n    $this-&gt;drop('settings');\n}\n</code></pre>"},{"location":"settings/#configuration","title":"Configuration","text":"<p>Look into <code>config/settings.php</code> file for configuration related options:</p> <pre><code>'settings' =&gt; [\n    // Enable or disable caching for settings\n    'cache' =&gt; true,\n\n    // Cache TTL (time to live) in seconds (e.g., 3600 = 1 hour)\n    'ttl' =&gt; 3600,\n],\n</code></pre>"},{"location":"settings/#core-api-via-model-trait","title":"Core API (via Model Trait)","text":"<p>On any model using <code>SettingsTrait</code>:</p> <pre><code>class User extends Model\n{\n    use Lightpack\\Settings\\SettingsTrait;\n}\n</code></pre> <pre><code>$user-&gt;settings()-&gt;set('key', 'value');\n$value = $user-&gt;settings()-&gt;get('key', 'default');\n$all = $user-&gt;settings()-&gt;all();\n$user-&gt;settings()-&gt;forget('key');\n</code></pre>"},{"location":"settings/#globalapp-settings","title":"Global/App Settings","text":"<p>Instantiate via container or you can type hint Settings as your controller's method dependency.</p> <pre><code>app('settings')\n    -&gt;group('global')\n    -&gt;owner(null)\n    -&gt;set('site_name', 'Lightpack Demo');\n</code></pre> <pre><code>$name = app('settings')\n    -&gt;group('global')\n    -&gt;owner(null)\n    -&gt;get('site_name', 'Default Name');\n</code></pre>"},{"location":"settings/#ownertenantmodel-specific","title":"Owner/Tenant/Model specific","text":"<pre><code>app('settings')\n    -&gt;group('users')\n    -&gt;owner($userId)\n    -&gt;set('theme', 'dark');\n</code></pre> <pre><code>app('settings')\n    -&gt;group('products')\n    -&gt;owner($productId)\n    -&gt;set('tax_rate', 0.18);\n</code></pre> <p>Or, better using the trait on the model:</p> <pre><code>$user = new User(23);\n$user-&gt;settings()-&gt;set('theme', 'dark');\n</code></pre> <pre><code>$product = new Product(100);\n$product-&gt;settings()-&gt;set('tax_rate', 0.18);\n</code></pre>"},{"location":"settings/#design-principles","title":"Design Principles","text":"<ul> <li>Explicit API: No global helpers or magic loading\u2014always opt-in via trait or direct instantiation.</li> <li>No Magic: Settings are loaded only when requested, not injected everywhere.</li> <li>Type Safety: Values are stored with explicit type hints (<code>key_type</code>), and serialization/casting is handled explicitly.</li> <li>Extensible: Add new groups, owners, or custom serialization as needed.</li> <li>Cache-Friendly: Caches settings per group/owner scope, with auto-invalidation on update.</li> <li>Polymorphic: Any model or logical group can have settings\u2014no schema changes needed for new types.</li> <li>Isolation: Always enforce tenant/model ownership before reading/writing settings.</li> </ul>"},{"location":"settings/#advanced-features","title":"Advanced Features","text":"<ul> <li>JSON/Array Support: Store and retrieve structured data with automatic (de)serialization.</li> <li>Caching: Settings are cached per group/owner (using Lightpack's cache system), and cache is invalidated on update/delete for consistency and performance.</li> <li>Type Handling: Values are automatically cast to the declared type (<code>int</code>, <code>bool</code>, <code>float</code>, <code>json</code>, etc.) on retrieval.</li> <li>Multi-tenant Ready: Use <code>group</code>/<code>owner</code> for per-tenant, per-user, per-product, etc. settings.</li> <li>Environment Awareness: Optionally fallback to <code>.env</code> or config files if not found in DB.</li> </ul>"},{"location":"sms/","title":"Lightpack SMS","text":"<p>Lightpack SMS offers a clean, extensible, and framework-native way to send SMS messages via multiple providers.</p>"},{"location":"sms/#supported-providers","title":"Supported Providers","text":"<p>Out of the box:</p> <ul> <li>TwilioProvider: Real SMS via Twilio API.</li> <li>LogSmsProvider: Writes SMS to logs (for dev/test).</li> <li>NullSmsProvider: Discards SMS (for test/mocking).</li> </ul> <p>For Twilio support, you will need to install its PHP SDK: <code>composer require twilio/sdk</code></p> <p>View the config file <code>config/sms.php</code> to see available configuration options for SMS feature.</p>"},{"location":"sms/#sending-an-sms","title":"Sending an SMS","text":"<pre><code>sms()-&gt;send('+1234567890', 'Hello from Lightpack!');\n</code></pre>"},{"location":"sms/#extending-with-custom-providers","title":"Extending with Custom Providers","text":"<p>Create your own provider by implementing <code>SmsProviderInterface</code>:</p> <pre><code>namespace App\\Sms\\Providers;\n\nuse Lightpack\\Sms\\SmsProviderInterface;\n\nclass MyCustomProvider implements SmsProviderInterface\n{\n    public function send(string $phone, string $message, array $options = []): bool\n    {\n        // Your custom SMS logic\n        return true;\n    }\n}\n</code></pre> <p>Add to your config:</p> <pre><code>'drivers' =&gt; [\n    'mycustom' =&gt; [\n        'provider' =&gt; App\\Sms\\Providers\\MyCustomProvider::class,\n        // ...your config\n    ],\n]\n</code></pre>"},{"location":"sms/#error-handling-logging","title":"Error Handling &amp; Logging","text":"<ul> <li>TwilioProvider: Catches exceptions, logs errors, returns <code>false</code> on failure.</li> <li>LogSmsProvider: Always returns <code>true</code>, logs all messages.</li> <li>NullSmsProvider: Always returns <code>true</code>, does nothing.</li> <li>Best practice: Always check the boolean return value of <code>send()</code> and act accordingly.</li> </ul>"},{"location":"sms/#faq-troubleshooting","title":"FAQ &amp; Troubleshooting","text":"<p>Q: How do I switch providers? A: Change the <code>default</code> driver in your config or instantiate the desired provider.</p> <p>Q: Can I queue SMS for async sending? A: Yes! Use Lightpack\u2019s jobs system to queue jobs that call <code>sms()-&gt;send()</code>.</p> <p>Q: How do I test SMS sending? A: Use LogSmsProvider or NullSmsProvider in your test environment.</p> <p>Q: What if Twilio credentials are invalid? A: TwilioProvider will log the error and return <code>false</code>.</p>"},{"location":"social-auth/","title":"Lightpack SocialAuth: Complete Developer Guide","text":"<p>Lightpack SocialAuth provides seamless OAuth authentication for your users via Google, GitHub, LinkedIn, and more. Designed with Lightpack\u2019s philosophy of clarity, explicitness, and extensibility, it supports both web and stateless API flows, and is easy to extend for custom providers.</p>"},{"location":"social-auth/#supported-providers","title":"Supported Providers","text":"<p>Out of the box: - Google - GitHub - LinkedIn</p> <p>Check the social auth related configuration in <code>config/social.php</code> file.</p> <p>In order to use the Google social auth feature, install the Google API Client package <code>composer require google/apiclient</code></p>"},{"location":"social-auth/#migration","title":"Migration","text":"<p>Run the following command to create the migration:</p> <pre><code>php console create:migration create_table_social_accounts\n</code></pre> <pre><code>public function up(): void {\n    $this-&gt;create('social_accounts', function (Table $table) {\n        $table-&gt;id();\n        $table-&gt;column('user_id')-&gt;type('BIGINT')-&gt;attribute('UNSIGNED');\n        $table-&gt;varchar('provider', 20);\n        $table-&gt;varchar('provider_id', 255);\n        $table-&gt;timestamps();\n\n        $table-&gt;foreignKey('user_id')-&gt;references('id')-&gt;on('users')-&gt;cascadeOnDelete();\n        $table-&gt;unique(['provider', 'provider_id']);\n        $table-&gt;index('user_id');\n    });\n}\n\npublic function down(): void {\n    $this-&gt;drop('social_accounts');\n}\n</code></pre>"},{"location":"social-auth/#usage-patterns","title":"Usage Patterns","text":""},{"location":"social-auth/#1-routes","title":"1. Routes","text":"<p>Define routes in your <code>routes/web.php</code> or <code>routes/api.php</code>:</p> <pre><code>// Web\n$route-&gt;get('/auth/{provider}/redirect', SocialAuthController::class, 'redirect');\n$route-&gt;get('/auth/{provider}/callback', SocialAuthController::class, 'callback');\n\n// API (stateless)\n$route-&gt;get('/api/auth/{provider}/redirect', [SocialAuthController::class, 'redirect']);\n$route-&gt;get('/api/auth/{provider}/callback', [SocialAuthController::class, 'callback']);\n</code></pre>"},{"location":"social-auth/#2-controller-usage","title":"2. Controller Usage","text":"<p>The <code>SocialAuthController</code> is already shipped with this feature. It handles both web and API flows with these two supported methods: - redirect($provider):     - Web: Stores provider in session, redirects to provider auth URL.     - API: Returns JSON with <code>auth_url</code>. - callback($provider):     - Web: Handles callback, logs in user, redirects to dashboard.     - API: Returns access token and user info.</p>"},{"location":"social-auth/#example-web-flow","title":"Example: Web Flow","text":"<ol> <li>User clicks \u201cSign in with Google\u201d \u2192 <code>/auth/google/redirect</code></li> <li>Redirects to Google OAuth</li> <li>On success, Google redirects back to <code>/auth/google/callback</code></li> <li>User is logged in and redirected to dashboard</li> </ol>"},{"location":"social-auth/#example-api-flow","title":"Example: API Flow","text":"<ol> <li>Mobile app requests <code>/api/auth/google/redirect</code> (gets <code>auth_url</code>)</li> <li>User authenticates in browser, Google redirects to <code>/api/auth/google/callback?code=...&amp;state=...</code></li> <li>API returns JSON: <code>{ access_token, token_type, user }</code></li> </ol>"},{"location":"social-auth/#adding-a-custom-provider","title":"Adding a Custom Provider","text":"<p>Create a new provider class implementing <code>SocialAuth</code>:</p> <pre><code>namespace App\\SocialAuth\\Providers;\n\nuse Lightpack\\SocialAuth\\SocialAuth;\n\nclass MyProvider implements SocialAuth {\n    // Implement the interface methods\n}\n</code></pre> <p>Add config:</p> <pre><code>'providers' =&gt; [\n    'myprovider' =&gt; [\n        'provider' =&gt; App\\SocialAuth\\Providers\\MyProvider::class,\n        // ... \n    ],\n]\n</code></pre> <p>And you\u2019re done!</p>"},{"location":"storage/","title":"Lightpack Storage: Complete Developer Guide","text":"<p>Lightpack Storage provides a simple, extensible, and robust abstraction for file storage in PHP applications. It supports both local filesystem and AWS S3 out of the box, with a unified API for file operations.</p>"},{"location":"storage/#supported-drivers","title":"Supported Drivers","text":"<ul> <li>LocalStorage: </li> <li>Stores files on the server\u2019s local filesystem.</li> <li>Designed for development, testing, or single-server production.</li> <li>S3Storage: </li> <li>Stores files in AWS S3 buckets.</li> <li> <p>Supports signed URLs for private files, directory listing, and robust error handling.</p> </li> <li> <p>Note: For S3 support: <code>composer require aws/aws-sdk-php</code></p> </li> </ul> <p>View available configurations options for storage in <code>config/storage.php</code>.</p>"},{"location":"storage/#storage-interface","title":"Storage Interface","text":"<p>All drivers implement:</p> <pre><code>interface Storage {\n    public function read(string $path): ?string;\n    public function write(string $path, string $contents): bool;\n    public function delete(string $path): bool;\n    public function exists(string $path): bool;\n    public function copy(string $source, string $destination): bool;\n    public function move(string $source, string $destination): bool;\n    public function store(string $source, string $destination): void; // For uploads\n    public function url(string $path, int $expiration = 3600): string;\n    public function files(string $directory, bool $recursive = true): array;\n    public function removeDir(string $directory, bool $delete = true): void;\n}\n</code></pre>"},{"location":"storage/#usage-patterns","title":"Usage Patterns","text":"<p>You can resolve an instance of <code>Lightpack\\Storage\\Storage</code> class from the dependency container or simply call the <code>storage()</code> function.</p>"},{"location":"storage/#reading-writing-files","title":"Reading &amp; Writing Files","text":"<pre><code>// Write a file\nstorage()-&gt;write('docs/readme.txt', 'Hello, Lightpack!');\n\n// Read a file\n$content = storage()-&gt;read('docs/readme.txt');\n</code></pre>"},{"location":"storage/#uploading-files","title":"Uploading Files","text":"<pre><code>// Store an uploaded file (e.g., from $_FILES)\nstorage()-&gt;store($_FILES['avatar']['tmp_name'], 'uploads/public/avatars/user1.png');\n</code></pre>"},{"location":"storage/#listing-deleting-files","title":"Listing &amp; Deleting Files","text":"<pre><code>// List all files in a directory (recursively)\n$files = storage()-&gt;files('uploads/public');\n\n// Delete a file\nstorage()-&gt;delete('uploads/public/avatars/user1.png');\n</code></pre>"},{"location":"storage/#generating-urls","title":"Generating URLs","text":"<pre><code>// For public files (local): returns web-accessible URL (e.g., /uploads/avatars/user1.png)\n$url = storage()-&gt;url('uploads/public/avatars/user1.png');\n\n// For S3: returns direct or signed URL (expiration applies for private files)\n$url = storage()-&gt;url('private/reports/secret.pdf', 600); // 10 min signed URL\n</code></pre>"},{"location":"storage/#directory-operations","title":"Directory Operations","text":"<pre><code>// Remove an entire directory and its contents\nstorage()-&gt;removeDir('uploads/temp');\n</code></pre>"},{"location":"storage/#error-handling-security","title":"Error Handling &amp; Security","text":"<ul> <li>FileUploadException is thrown on upload failure.</li> <li>All file operations return <code>bool</code> for success/failure (except <code>read</code>, which returns <code>null</code> on failure).</li> <li>S3 driver handles AWS exceptions gracefully.</li> <li>Local driver uses secure <code>move_uploaded_file()</code> for uploads.</li> <li>Only expose public files via URLs/routes; private files should use signed URLs or controller logic.</li> <li>Always validate user input and file paths.</li> </ul>"},{"location":"string-utils/","title":"String Utilities","text":"<p>Lightpack\u2019s <code>Str</code> utility class offers a comprehensive set of methods for string manipulation, formatting, validation, and generation. It is designed to cover common and advanced string operations with a clear, expressive API and robust error handling.</p>"},{"location":"string-utils/#inflection-naming","title":"Inflection &amp; Naming","text":"<ul> <li>singularize() / pluralize(): Convert between singular and plural forms.   <code>php   $str-&gt;singularize('quizzes'); // quiz   $str-&gt;pluralize('quiz');      // quizzes</code></li> <li>pluralizeIf(): Pluralizes only if a number &gt; 1.   <code>php   $str-&gt;pluralizeIf(2, 'role'); // roles</code></li> <li>camelize() / variable(): Convert to PascalCase or camelCase.   <code>php   $str-&gt;camelize('my_class');   // MyClass   $str-&gt;variable('MyClass');    // myClass</code></li> <li>underscore() / dasherize(): snake_case or kebab-case.   <code>php   $str-&gt;underscore('MyClass');  // my_class   $str-&gt;dasherize('MyClass');   // my-class</code></li> <li>humanize() / headline(): Human-readable or title-cased.   <code>php   $str-&gt;humanize('lazy_brown_fox'); // Lazy brown fox   $str-&gt;headline('lazyBrownFox');   // Lazy Brown Fox</code></li> <li>tableize() / classify() / foreignKey() / ordinalize(): Naming for DB tables, classes, keys, ordinals.   <code>php   $str-&gt;tableize('UserGroup');   // user_groups   $str-&gt;classify('user_groups'); // UserGroup   $str-&gt;foreignKey('User');      // user_id   $str-&gt;ordinalize(21);          // 21st</code></li> </ul>"},{"location":"string-utils/#slugs-url-helpers","title":"Slugs &amp; URL Helpers","text":"<ul> <li>slug(): URL-friendly slugs from any string (UTF-8 safe, customizable separator).   <code>php   $str-&gt;slug('\u00dcber gr\u00fcnen!'); // uber-grunen   $str-&gt;slug('Hello World', '_'); // hello_world</code></li> <li>slugify(): (Deprecated) Use <code>slug()</code> instead.</li> </ul>"},{"location":"string-utils/#string-checks","title":"String Checks","text":"<ul> <li>startsWith() / endsWith() / contains(): Substring checks.   <code>php   $str-&gt;startsWith('admin/products', 'admin'); // true   $str-&gt;endsWith('file.txt', '.txt');          // true   $str-&gt;contains('hello world', 'world');      // true</code></li> </ul>"},{"location":"string-utils/#random-masking-and-truncation","title":"Random, Masking, and Truncation","text":"<ul> <li>random(): Cryptographically secure random hex string.   <code>php   $str-&gt;random(16); // e.g. '9f2d4b1a...'</code></li> <li>mask(): Obfuscate part of a string (e.g., credit cards).   <code>php   $str-&gt;mask('KEYSECRET', '*', 3); // 'KEY***'</code></li> <li>truncate() / limit() / excerpt(): Truncate by length, words, or create readable excerpts.   <code>php   $str-&gt;truncate('Hello World', 5); // Hello...   $str-&gt;limit('one two three four', 2); // one two...   $str-&gt;excerpt('This is a very long text', 10); // This is a...</code></li> </ul>"},{"location":"string-utils/#padding-casing","title":"Padding &amp; Casing","text":"<ul> <li>pad(): Pad string to a given length (left, right, both).</li> <li>title() / upper() / lower(): Title, upper, or lower case (UTF-8 safe).   <code>php   $str-&gt;title('\u00fcber gr\u00fcnen'); // \u00dcber Gr\u00fcnen   $str-&gt;upper('hello');       // HELLO   $str-&gt;lower('HELLO');       // hello</code></li> </ul>"},{"location":"string-utils/#html-content-helpers","title":"HTML &amp; Content Helpers","text":"<ul> <li>escape(): HTML-escape a string.   <code>php   $str-&gt;escape('&lt;h1&gt;Hello&lt;/h1&gt;'); // &amp;lt;h1&amp;gt;Hello&amp;lt;/h1&amp;gt;</code></li> <li>strip(): Remove all HTML tags (including script/style content).   <code>php   $str-&gt;strip('&lt;p&gt;Hello&lt;/p&gt;'); // Hello</code></li> </ul>"},{"location":"string-utils/#validation-helpers","title":"Validation Helpers","text":"<ul> <li>isEmail() / isUrl() / isIp() / isHex() / isUuid() / isDomain() / isBase64() / isMimeType() / isPath() / isJson() <code>php   $str-&gt;isEmail('test@example.com'); // true   $str-&gt;isHex('#ff0033');            // true   $str-&gt;isJson('{\"a\":1}');         // true</code></li> </ul>"},{"location":"string-utils/#file-path-helpers","title":"File &amp; Path Helpers","text":"<ul> <li>filename() / stem() / ext() / dir(): Extract file name, stem, extension, or directory.   <code>php   $str-&gt;filename('/path/to/file.txt'); // file.txt   $str-&gt;stem('/path/to/file.txt');     // file   $str-&gt;ext('/path/to/file.txt');      // txt   $str-&gt;dir('/path/to/file.txt');      // /path/to</code></li> </ul>"},{"location":"string-utils/#character-filters","title":"Character Filters","text":"<ul> <li>alphanumeric() / alpha() / number(): Keep only specific character types.   <code>php   $str-&gt;alphanumeric('Hello, World! 123'); // HelloWorld123   $str-&gt;alpha('Hello123');                 // Hello   $str-&gt;number('Price: $123.45');          // 12345</code></li> <li>collapse(): Replace multiple whitespace with a single space.   <code>php   $str-&gt;collapse('Hello   World'); // Hello World</code></li> <li>initials(): Generate initials from a name.   <code>php   $str-&gt;initials('John Doe'); // JD</code></li> </ul>"},{"location":"string-utils/#one-time-password-otp","title":"One-Time Password (OTP)","text":"<ul> <li>otp(): Generate a numeric OTP of specified length (default: 6).   <code>php   $str-&gt;otp();    // e.g. '123456'   $str-&gt;otp(8);   // e.g. '12345678'</code></li> <li>Throws <code>InvalidArgumentException</code> if length &lt; 1.</li> </ul> <p>For more complex OTP generation, Lightpack provides a robust OTP utility OTP Utility</p>"},{"location":"tags/","title":"Tags System","text":"<p>Lightpack\u2019s Tags system provides framework-native way to add tagging support to any Lucid model. It is designed for many-to-many polymorphic tagging (e.g., posts, products, users can all be tagged).</p>"},{"location":"tags/#migration","title":"Migration","text":"<p>The Tags system uses two tables: - <code>tags</code>: Stores tag definitions (<code>id</code>, <code>name</code>, <code>slug</code>, timestamps). - <code>tag_models</code>: Pivot table connecting tags to models (<code>tag_id</code>, <code>model_id</code>, <code>model_type</code>).</p> <p>Run this command to generate a migration file:</p> <pre><code>php console create:migration create_table_tags\n</code></pre> <p>Use the following code for the <code>up()</code>and <code>down()</code> methods:</p> <pre><code>public function up(): void\n{\n    $this-&gt;create('tags', function (Table $table) {\n        $table-&gt;id();\n        $table-&gt;varchar('name', 150)-&gt;unique();\n        $table-&gt;varchar('slug', 150)-&gt;unique();\n        $table-&gt;timestamps();\n    });\n\n    $this-&gt;create('tag_models', function (Table $table) {\n        $table-&gt;column('tag_id')-&gt;type('bigint')-&gt;attribute('unsigned');\n        $table-&gt;column('model_id')-&gt;type('bigint')-&gt;attribute('unsigned');\n        $table-&gt;varchar('model_type', 191);\n        $table-&gt;primary(['tag_id', 'model_id', 'model_type']);\n        $table-&gt;foreignKey('tag_id')-&gt;references('id')-&gt;on('tags')-&gt;cascadeOnDelete();\n    });\n}\n\npublic function down(): void\n{\n    $this-&gt;drop('tag_models');\n    $this-&gt;drop('tags');\n}\n</code></pre>"},{"location":"tags/#adding-tagging-to-your-model","title":"Adding Tagging to Your Model","text":"<p>Add <code>TagsTrait</code> to any model to make it taggable:</p> <pre><code>use Lightpack\\Tags\\TagsTrait;\n\nclass Post extends Model {\n    use TagsTrait;\n}\n</code></pre>"},{"location":"tags/#tagstrait-api","title":"TagsTrait API","text":""},{"location":"tags/#tags","title":"tags","text":"<p>Returns a pivot query for the model\u2019s tags.</p> <pre><code>// Get all Tag objects for this post\n$post-&gt;tags()-&gt;all(); \n</code></pre>"},{"location":"tags/#attachtags","title":"attachTags","text":"<p>Attach one or more tags to the model.</p> <pre><code>// Attach tags by ID\n$post-&gt;attachTags([1, 2, 3]); \n</code></pre>"},{"location":"tags/#detachtags","title":"detachTags","text":"<p>Detach one or more tags from the model.</p> <pre><code>// Remove tag with ID 2\n$post-&gt;detachTags([2]); \n</code></pre>"},{"location":"tags/#synctags","title":"syncTags","text":"<p>Replace all tags on the model with the given IDs.</p> <pre><code>$post-&gt;syncTags([3]); // Only tag 3 remains\n</code></pre>"},{"location":"tags/#filters","title":"filters()","text":"<p>Query scope to filter models by tag IDs.</p> <pre><code>// All posts with tag 1 or 2\n$posts = Post::filters(['tags' =&gt; [1, 2]])-&gt;all(); \n</code></pre>"},{"location":"tags/#edge-cases-behavior","title":"Edge Cases &amp; Behavior","text":"<ul> <li>Duplicate attaches: Attaching a tag already present is safe and has no effect.</li> <li>Detaching non-existent tags: Detaching a tag not present does nothing (no error).</li> <li>Type isolation: Only tags for the correct model type are returned (see <code>model_type</code> in pivot).</li> <li>Syncing: Removes all tags not in the new list, attaches any new ones.</li> <li>Filtering: <code>scopeTags</code> matches any of the provided tag IDs (logical OR).</li> </ul>"},{"location":"taxonomies/","title":"Taxonomies System","text":"<p>Lightpack\u2019s Taxonomies system provides a robust, hierarchical, and framework-native way to add category, menu, or any tree-like structure to your Lucid models. It supports many-to-many polymorphic relationships, deep trees, and flexible querying.</p>"},{"location":"taxonomies/#migration","title":"Migration","text":"<p>The Taxonomies system requires two tables: - <code>taxonomies</code>: Stores taxonomy nodes (id, name, slug, type, parent_id, sort_order, meta, timestamps). - <code>taxonomy_models</code>: Pivot table connecting taxonomies to any model (taxonomy_id, model_id, model_type).</p> <p>To generate a migration file:</p> <pre><code>php console create:migration create_table_taxonomies\n</code></pre> <p>Migration code for <code>up()</code> and <code>down()</code>:</p> <pre><code>public function up(): void\n{\n    $this-&gt;create('taxonomies', function (Table $table) {\n        $table-&gt;id();\n        $table-&gt;varchar('name', 150);\n        $table-&gt;varchar('slug', 150);\n        $table-&gt;varchar('type', 50); // e.g., 'category', 'tag', 'menu'\n        $table-&gt;column('parent_id')-&gt;type('bigint')-&gt;attribute('unsigned')-&gt;nullable();\n        $table-&gt;column('sort_order')-&gt;type('integer')-&gt;default(0);\n        $table-&gt;text('meta')-&gt;nullable();\n        $table-&gt;timestamps();\n        $table-&gt;foreignKey('parent_id')-&gt;references('id')-&gt;on('taxonomies')-&gt;cascadeOnDelete();\n        $table-&gt;unique(['type', 'slug']); // Unique slugs per type\n    });\n\n    $this-&gt;create('taxonomy_models', function (Table $table) {\n        $table-&gt;column('taxonomy_id')-&gt;type('bigint')-&gt;attribute('unsigned');\n        $table-&gt;column('model_id')-&gt;type('bigint')-&gt;attribute('unsigned');\n        $table-&gt;varchar('model_type', 150);\n        $table-&gt;primary(['taxonomy_id', 'model_id', 'model_type']);\n        $table-&gt;foreignKey('taxonomy_id')-&gt;references('id')-&gt;on('taxonomies')-&gt;cascadeOnDelete();\n    });\n}\n\npublic function down(): void\n{\n    $this-&gt;drop('taxonomy_models');\n    $this-&gt;drop('taxonomies');\n}\n</code></pre>"},{"location":"taxonomies/#adding-taxonomies-to-your-model","title":"Adding Taxonomies to Your Model","text":"<p>Add <code>TaxonomyTrait</code> to any model to make it taxonomy-aware:</p> <pre><code>use Lightpack\\Taxonomies\\TaxonomyTrait;\n\nclass Post extends Model {\n    use TaxonomyTrait;\n}\n</code></pre>"},{"location":"taxonomies/#taxonomytrait-api","title":"TaxonomyTrait API","text":""},{"location":"taxonomies/#taxonomies","title":"taxonomies()","text":"<p>Returns a pivot query for the model\u2019s taxonomies.</p> <pre><code>$post-&gt;taxonomies()-&gt;all(); // Get all taxonomy nodes for this post\n</code></pre>"},{"location":"taxonomies/#attachtaxonomies","title":"attachTaxonomies()","text":"<p>Attach one or more taxonomy nodes by ID:</p> <pre><code>$post-&gt;attachTaxonomies([1, 2, 3]);\n</code></pre>"},{"location":"taxonomies/#detachtaxonomies","title":"detachTaxonomies()","text":"<p>Detach one or more taxonomy nodes by ID:</p> <pre><code>$post-&gt;detachTaxonomies([2]);\n</code></pre>"},{"location":"taxonomies/#synctaxonomies","title":"syncTaxonomies()","text":"<p>Replace all taxonomies on the model with the given IDs:</p> <pre><code>$post-&gt;syncTaxonomies([3]);\n</code></pre>"},{"location":"taxonomies/#filters","title":"filters()","text":"<p>Query scope to filter models by taxonomy IDs:</p> <pre><code>// All posts with taxonomy 1 or 2\n$posts = Post::filters(['taxonomies' =&gt; [1, 2]])-&gt;all();\n</code></pre>"},{"location":"taxonomies/#hierarchy-tree-operations","title":"Hierarchy &amp; Tree Operations","text":"<p>Lightpack's <code>Taxonomy</code> model provides a rich set of methods for working with hierarchical data. Each method is designed for clarity, performance, and practical developer use. Below are detailed explanations and usage for each helper:</p>"},{"location":"taxonomies/#parent","title":"parent()","text":"<p>Returns a query for the parent taxonomy node, if any.</p> <pre><code>// fetch parent node\n$parent = $taxonomy-&gt;parent()-&gt;one();\n\nif ($parent) {\n    echo $parent-&gt;name;\n}\n</code></pre> <ul> <li>Notes: Returns <code>null</code> if the node is a root.</li> </ul>"},{"location":"taxonomies/#children","title":"children()","text":"<p>Returns a query for all direct child nodes, ordered by <code>sort_order</code> then <code>id</code>.</p> <pre><code>$children = $taxonomy-&gt;children()-&gt;all();\n\nforeach ($children as $child) {\n    echo $child-&gt;name;\n}\n</code></pre> <ul> <li>Notes: Returns an empty collection if there are no children.</li> </ul>"},{"location":"taxonomies/#siblings","title":"siblings()","text":"<p>Returns all taxonomy nodes at the same level (same parent), excluding the current node, ordered by <code>sort_order</code> then <code>id</code>.</p> <pre><code>$siblings = $taxonomy-&gt;siblings();\n\nforeach ($siblings as $sibling) {\n    echo $sibling-&gt;name;\n}\n</code></pre> <ul> <li>Notes: Root nodes' siblings are other roots.</li> </ul>"},{"location":"taxonomies/#ancestors","title":"ancestors()","text":"<p>Returns all ancestor nodes from the root down to the immediate parent.</p> <pre><code>$ancestors = $taxonomy-&gt;ancestors();\n\nforeach ($ancestors as $ancestor) {\n    echo $ancestor-&gt;name;\n}\n</code></pre> <ul> <li>Notes: Returns an empty collection for root nodes.</li> </ul>"},{"location":"taxonomies/#descendants","title":"descendants()","text":"<p>Returns all descendant nodes (children, grandchildren, etc.) in depth-first order.</p> <pre><code>$descendants = $taxonomy-&gt;descendants();\nforeach ($descendants as $descendant) {\n    echo $descendant-&gt;name;\n}\n</code></pre> <ul> <li>Notes: Returns an empty collection if there are no descendants.</li> </ul>"},{"location":"taxonomies/#tree","title":"tree()","text":"<p>Returns this node and all descendants as a nested array structure.</p> <pre><code>$tree = $taxonomy-&gt;tree();\nprint_r($tree);\n</code></pre> <ul> <li>Notes: The array includes all node data and a <code>children</code> key if there are children.</li> </ul>"},{"location":"taxonomies/#forest","title":"forest()","text":"<p>Returns all root nodes as an array of nested trees.</p> <pre><code>$forest = Taxonomy::forest();\nforeach ($forest as $tree) {\n    // Each $tree is a nested array\n}\n</code></pre> <ul> <li>Notes: Useful for generating complete navigation menus or category trees.</li> </ul>"},{"location":"taxonomies/#fullslugseparator","title":"fullSlug($separator = '/')","text":"<p>Signature: <code>fullSlug(string $separator = '/'): string</code></p> <p>Returns the full hierarchical slug for this node, joining ancestor and self slugs.</p> <pre><code>$slug = $taxonomy-&gt;fullSlug('-'); // e.g., \"root-child-grandchild\"\n</code></pre> <ul> <li>Notes: Skips empty slugs; customizable separator.</li> </ul>"},{"location":"taxonomies/#breadcrumbs","title":"breadcrumbs()","text":"<p>Returns an array of taxonomy nodes from root to this node (breadcrumb trail).</p> <pre><code>$trail = $taxonomy-&gt;breadcrumbs();\n\nforeach ($trail as $node) {\n    echo $node-&gt;name;\n}\n</code></pre> <ul> <li>Notes: Always includes the current node as the last element.</li> </ul>"},{"location":"taxonomies/#moveto","title":"moveTo()","text":"<p>Signature: <code>moveTo(?int $newParentId = null): void</code></p> <p>Moves this node (and its entire subtree) under a new parent node.</p> <pre><code>$taxonomy-&gt;moveTo(2); // Move under taxonomy ID 2\n$taxonomy-&gt;moveTo(null); // Move to root\n</code></pre> <ul> <li>Notes: Throws exception if trying to move under itself or any descendant (prevents cycles).</li> </ul>"},{"location":"taxonomies/#reorder","title":"reorder()","text":"<p>Signature: <code>static reorder(array $idOrderMap): void</code></p> <p>Bulk update the <code>sort_order</code> of multiple nodes. Pass an array of <code>[taxonomy_id =&gt; sort_order, ...]</code>.</p> <pre><code>Taxonomy::reorder([\n    2 =&gt; 1, // taxonomy ID 2 becomes first\n    3 =&gt; 2, // taxonomy ID 3 becomes second\n]);\n</code></pre> <ul> <li>Notes: Only affects the order among siblings or roots.</li> </ul>"},{"location":"taxonomies/#bulkmove","title":"bulkMove()","text":"<p>Signature: <code>static bulkMove(array $ids, ?int $newParentId = null): void</code></p> <p>Move multiple taxonomy nodes under a new parent in one call.</p> <pre><code>Taxonomy::bulkMove([3, 4], 5); // Move nodes 3 and 4 under node 5\n</code></pre> <ul> <li>Notes: Throws if any move would create a cycle.</li> </ul>"},{"location":"taxonomies/#edge-cases-behavior","title":"Edge Cases &amp; Behavior","text":"<ul> <li>Duplicate attaches: Attaching a taxonomy already present is safe and has no effect.</li> <li>Detaching non-existent taxonomies: Detaching a taxonomy not present does nothing (no error).</li> <li>Type isolation: Only taxonomies for the correct model type are returned (see <code>model_type</code> in pivot).</li> <li>Syncing: Removes all taxonomies not in the new list, attaches any new ones.</li> <li>Filtering: <code>scopeTaxonomies</code> matches any of the provided taxonomy IDs (logical OR).</li> <li>Cycle prevention: <code>moveTo()</code> and <code>bulkMove()</code> prevent cycles (cannot move under self or descendant).</li> <li>Sort order: Children and siblings are always ordered by <code>sort_order</code> then <code>id</code>.</li> <li>Meta fields: Store custom data (e.g., icon, color) in the <code>meta</code> column as an array.</li> <li>Empty state: All tree and forest helpers handle empty trees gracefully.</li> </ul>"},{"location":"taxonomies/#practical-end-to-end-examples","title":"Practical End-to-End Examples","text":"<p>Below are practical, real-world scenarios that demonstrate how to use Lightpack Taxonomies in your application. These examples cover taxonomy creation, building a tree, attaching to models, querying, and navigation.</p>"},{"location":"taxonomies/#1-creating-a-category-tree","title":"1. Creating a Category Tree","text":"<pre><code>// Create root categories\n$news = new Taxonomy();\n$news-&gt;name = 'News';\n$news-&gt;slug = 'news';\n$news-&gt;type = 'category';\n$news-&gt;save();\n\n$opinion = new Taxonomy();\n$opinion-&gt;name = 'Opinion';\n$opinion-&gt;slug = 'opinion';\n$opinion-&gt;type = 'category';\n$opinion-&gt;save();\n\n// Create children\n$local = new Taxonomy();\n$local-&gt;name = 'Local';\n$local-&gt;slug = 'local';\n$local-&gt;type = 'category';\n$local-&gt;parent_id = $news-&gt;id;\n$local-&gt;save();\n\n$global = new Taxonomy();\n$global-&gt;name = 'Global';\n$global-&gt;slug = 'global';\n$global-&gt;type = 'category';\n$global-&gt;parent_id = $news-&gt;id;\n$global-&gt;save();\n</code></pre>"},{"location":"taxonomies/#2-attaching-taxonomies-to-a-model","title":"2. Attaching Taxonomies to a Model","text":"<pre><code>// Assume Post model uses TaxonomyTrait\n$post = Post::find(101);\n\n// Attach categories by ID\n$post-&gt;attachTaxonomies([$news-&gt;id, $local-&gt;id]);\n</code></pre>"},{"location":"taxonomies/#3-querying-posts-by-taxonomy","title":"3. Querying Posts by Taxonomy","text":"<pre><code>// Get all posts tagged as 'News' OR 'Local'\n$posts = Post::filters(['taxonomies' =&gt; [$news-&gt;id, $local-&gt;id]])-&gt;all();\n</code></pre>"},{"location":"taxonomies/#4-navigating-the-taxonomy-tree","title":"4. Navigating the Taxonomy Tree","text":"<pre><code>// Get all children of 'News'\n$children = $news-&gt;children()-&gt;all(); // ['Local', 'Global']\n\n// Get all ancestors of 'Local'\n$ancestors = $local-&gt;ancestors(); // ['News']\n\n// Get full slug for 'Local'\n$slug = $local-&gt;fullSlug(); // 'news/local'\n\n// Get breadcrumbs for 'Local'\n$trail = $local-&gt;breadcrumbs(); // ['News', 'Local']\n</code></pre>"},{"location":"taxonomies/#5-moving-and-reordering-taxonomies","title":"5. Moving and Reordering Taxonomies","text":"<pre><code>// Move 'Local' under 'Opinion'\n$local-&gt;moveTo($opinion-&gt;id);\n\n// Bulk reorder children of 'News'\nTaxonomy::reorder([\n    $global-&gt;id =&gt; 1, // 'Global' first\n    $local-&gt;id =&gt; 2,  // 'Local' second\n]);\n</code></pre>"},{"location":"taxonomies/#6-building-a-complete-tree-or-forest","title":"6. Building a Complete Tree or Forest","text":"<pre><code>// Get the full tree for 'News'\n$newsTree = $news-&gt;tree();\n\n// Get all taxonomy trees (forest)\n$forest = Taxonomy::forest();\n</code></pre>"},{"location":"taxonomies/#7-using-meta-fields","title":"7. Using Meta Fields","text":"<pre><code>$news-&gt;meta = [\n    'icon' =&gt; 'fa-newspaper',\n    'color' =&gt; '#3366cc',\n    'description' =&gt; 'All news articles',\n];\n$news-&gt;save();\n\n// Access meta\n$icon = $news-&gt;meta['icon'];\n</code></pre> <p>These examples show how to: - Build and manage a taxonomy tree - Attach taxonomies to your models - Query and filter by taxonomy - Navigate and display hierarchical data - Move and reorder nodes safely - Store custom data in meta fields</p>"},{"location":"test-highlight/","title":"Syntax Highlight Test","text":"<pre><code>&lt;?php\necho \"Hello, World!\";\n?&gt;\n</code></pre> <pre><code>print(\"Hello, World!\")\n</code></pre>"},{"location":"testing/","title":"Testing","text":"<p>Lightpack extends <code>PHPUnit</code> to support integration tests for your HTTP routes, responses, and API endpoints. To feature test a route and its response, create a test class in <code>tests/Http</code> folder in your project root. </p> <p>You can see an example of a test class provided in <code>tests/Http</code> folder.</p> <pre><code>class HomeTest extends HttpTestCase\n{\n    public function testItRendersHomePage()\n    {\n        $this-&gt;request('GET', '/');\n        $this-&gt;assertResponseStatus(200);\n    }\n}\n</code></pre>"},{"location":"testing/#making-requests","title":"Making Requests","text":"<p>To test an HTTP route, use <code>request()</code> method. For testing a JSON API route, use <code>requestJson()</code> method. Both of these methods are used to simulate an HTTP request.</p>"},{"location":"testing/#request","title":"request()","text":"<p>This method takes 3 parameters:</p> <ul> <li>Request method,</li> <li>HTTP route,</li> <li>Optional payload.</li> </ul> <p>For example, to make a <code>GET</code> request to <code>/homepage</code> route:</p> <pre><code>$this-&gt;request('GET', '/homepage');\n</code></pre> <p>For example, to make a <code>POST</code> request to <code>/products</code> route:</p> <pre><code>$this-&gt;request('POST', '/products', ['name' =&gt; 'Lightpack']);\n</code></pre>"},{"location":"testing/#requestjson","title":"requestJson()","text":"<p>Use this method to make JSON requests. It accepts the same parameters that <code>request()</code> method does. For example, to make a JSON <code>POST</code> request to <code>/products</code> route:</p> <pre><code>$this-&gt;requestJson('POST', '/products', ['name' =&gt; 'Lightpack']);\n</code></pre>"},{"location":"testing/#asserting-html-responses","title":"Asserting HTML Responses","text":"<p>Once you have made a request to a route, you can then assert returned response using following assertion methods:</p> <pre><code>$this-&gt;assertRouteNotFound();\n$this-&gt;assertResponseStatus();\n$this-&gt;assertResponseBody();\n</code></pre> <ul> <li>assertRouteNotFound() </li> </ul> <p>Asserts that the last request resulted in a 404 Not Found response. Use this to verify that a route does not exist or is not accessible.</p> <pre><code>$this-&gt;request('GET', '/invalid-route');\n$this-&gt;assertRouteNotFound();\n</code></pre> <ul> <li>assertResponseStatus() </li> </ul> <p>Asserts that the response status code matches the expected value. Pass the desired HTTP status code (e.g., 200 for OK, 302 for redirect, 404 for not found).</p> <pre><code>$this-&gt;request('POST', '/login', [\n    'email' =&gt; 'foo@bar.com', \n    'password' =&gt; 'secret'\n]);\n\n$this-&gt;assertResponseStatus(302);\n</code></pre> <ul> <li>assertResponseBody(): </li> </ul> <p>Asserts that the response body matches the given string exactly. Use this to confirm the precise output returned by the route.</p> <pre><code>$this-&gt;request('GET', '/hello');\n$this-&gt;assertResponseBody('Hello, World!');\n</code></pre>"},{"location":"testing/#asserting-json-responses","title":"Asserting JSON Responses","text":"<pre><code>$this-&gt;assertResponseHasValidJson();\n$this-&gt;assertResponseJson();\n$this-&gt;assertResponseJsonHasKey();\n$this-&gt;assertResponseJsonKeyValue();\n</code></pre> <ul> <li>assertResponseHasValidJson()</li> </ul> <p>Asserts that the response body is valid JSON. Use this to ensure your endpoint returns a properly formatted JSON response.</p> <p><code>php   $this-&gt;request('GET', '/api/products');   $this-&gt;assertResponseHasValidJson();</code></p> <ul> <li>assertResponseJson()</li> </ul> <p>Asserts that the response JSON matches the given array exactly. Use this to check for a full match with the expected JSON structure and values.</p> <p><code>php   $this-&gt;request('GET', '/api/products/1');   $this-&gt;assertResponseJson(['id' =&gt; 1, 'name' =&gt; 'Lightpack']);</code></p> <ul> <li>assertResponseJsonHasKey()</li> </ul> <p>Asserts that a specific key exists in the response JSON. Supports dot notation for nested keys.</p> <p><code>php   $this-&gt;request('GET', '/api/user');   $this-&gt;assertResponseJsonHasKey('profile.email');</code></p> <ul> <li>assertResponseJsonKeyValue()</li> </ul> <p>Asserts that a specific key in the JSON response has the expected value. Supports dot notation for nested keys.</p> <p><code>php   $this-&gt;request('GET', '/api/user');   $this-&gt;assertResponseJsonKeyValue('profile.email', 'john@example.com');</code></p>"},{"location":"testing/#asserting-redirect-responses","title":"Asserting Redirect Responses","text":"<pre><code>$this-&gt;assertRedirectUrl();\n$this-&gt;assertResponseIsRedirect();\n</code></pre> <ul> <li>assertRedirectUrl()</li> </ul> <p>Asserts that the response is a redirect to the specified URL. Use this to confirm the correct redirect location after an action.</p> <p><code>php   $this-&gt;request('POST', '/login', [       'email' =&gt; 'foo@bar.com',       'password' =&gt; 'secret'   ]);   $this-&gt;assertRedirectUrl('/dashboard');</code></p> <ul> <li>assertResponseIsRedirect()</li> </ul> <p>Asserts that the response is a redirect (any 3xx status code). Use this to check if the action results in a redirect, regardless of destination.</p> <p><code>php   $this-&gt;request('POST', '/logout');   $this-&gt;assertResponseIsRedirect();</code></p>"},{"location":"testing/#asserting-sessions","title":"Asserting Sessions","text":"<pre><code>$this-&gt;withSession();\n$this-&gt;assertSessionHas();\n$this-&gt;assertSessionHasErrors();\n$this-&gt;assertSessionHasOldInput();\n</code></pre> <ul> <li>withSession()</li> </ul> <p>Sets session data before making a request. Use this to simulate a session state, such as a logged-in user or pre-filled data.</p> <p><code>php   $this-&gt;withSession(['user_id' =&gt; 1]);   $this-&gt;request('GET', '/dashboard');</code></p> <ul> <li>assertSessionHas()</li> </ul> <p>Asserts that the session contains the given key (and optionally, the expected value). Use this to check if session data is set after a request.</p> <p><code>php   $this-&gt;request('POST', '/login', [       'email' =&gt; 'foo@bar.com',       'password' =&gt; 'secret'   ]);   $this-&gt;assertSessionHas('user_id');</code></p> <ul> <li>assertSessionHasErrors()</li> </ul> <p>Asserts that the session contains validation errors for the given fields. Use this to verify validation error handling.</p> <p><code>php   $this-&gt;request('POST', '/register', [       'email' =&gt; '',       'password' =&gt; ''   ]);   $this-&gt;assertSessionHasErrors(['email', 'password']);</code></p> <ul> <li>assertSessionHasOldInput()</li> </ul> <p>Asserts that the session contains old input data for the specified fields. Useful for checking form repopulation after validation errors.</p> <p><code>php   $this-&gt;request('POST', '/register', [       'email' =&gt; 'foo@bar.com',       'password' =&gt; ''   ]);   $this-&gt;assertSessionHasOldInput(['email']);</code></p>"},{"location":"testing/#asserting-headers","title":"Asserting Headers","text":"<pre><code>$this-&gt;withHeaders();\n$this-&gt;assertResponseHasHeader();\n$this-&gt;assertResponseHeaderEquals();\n</code></pre> <ul> <li>withHeaders()</li> </ul> <p>Sets custom HTTP headers for the next request. Use this to simulate requests with specific headers (e.g., authentication, content type).</p> <p><code>php   $this-&gt;withHeaders([       'Authorization' =&gt; 'Bearer token',       'Accept' =&gt; 'application/json'   ]);   $this-&gt;request('GET', '/api/data');</code></p> <ul> <li>assertResponseHasHeader()</li> </ul> <p>Asserts that the response contains the specified header. Use this to check if a header is present in the response.</p> <p><code>php   $this-&gt;request('GET', '/api/data');   $this-&gt;assertResponseHasHeader('Content-Type');</code></p> <ul> <li>assertResponseHeaderEquals()</li> </ul> <p>Asserts that a response header matches the expected value. Use this to verify the exact value of a header in the response.</p> <p><code>php   $this-&gt;request('GET', '/api/data');   $this-&gt;assertResponseHeaderEquals('Content-Type', 'application/json');</code></p>"},{"location":"testing/#asserting-cookies","title":"Asserting Cookies","text":"<pre><code>$this-&gt;withCookies();\n$this-&gt;assertCookieHas();\n$this-&gt;assertCookieEquals();\n$this-&gt;assertCookieMissing();\n</code></pre> <ul> <li>withCookies()</li> </ul> <p>Sets cookies for the next request. Use this to simulate requests with specific cookie values (e.g., authentication, preferences).</p> <p><code>php   $this-&gt;withCookies(['theme' =&gt; 'dark', 'token' =&gt; 'abc123']);   $this-&gt;request('GET', '/profile');</code></p> <ul> <li>assertCookieHas()</li> </ul> <p>Asserts that a cookie exists in the response.</p> <p><code>php   $this-&gt;request('GET', '/set-cookie');   $this-&gt;assertCookieHas('theme');</code></p> <ul> <li>assertCookieEquals()</li> </ul> <p>Asserts that a cookie exists and has the expected value.</p> <p><code>php   $this-&gt;request('GET', '/set-cookie');   $this-&gt;assertCookieEquals('theme', 'dark');</code></p> <ul> <li>assertCookieMissing()</li> </ul> <p>Asserts that a cookie does not exist in the response.</p> <p><code>php   $this-&gt;request('GET', '/set-cookie');   $this-&gt;assertCookieMissing('old_token');</code></p>"},{"location":"testing/#asserting-file-uploads","title":"Asserting File Uploads","text":"<pre><code>$this-&gt;withFiles();\n</code></pre> <ul> <li>withFiles()</li> </ul> <p>Sets files for the next request. Use this to simulate file uploads in your tests.</p> <p><code>php   $file = [       'name' =&gt; 'avatar.png',       'type' =&gt; 'image/png',       'tmp_name' =&gt; __DIR__ . '/fixtures/avatar.png',       'error' =&gt; UPLOAD_ERR_OK,       'size' =&gt; filesize(__DIR__ . '/fixtures/avatar.png'),   ];   $this-&gt;withFiles(['avatar' =&gt; $file]);   $this-&gt;request('POST', '/upload');</code></p>"},{"location":"testing/#asserting-file-uploads_1","title":"Asserting File Uploads","text":"<ul> <li>assertResponseStatus() (after upload)</li> </ul> <p>Asserts that the upload response status is as expected.</p> <p><code>php   $this-&gt;request('POST', '/upload', [], ['avatar' =&gt; $file]);   $this-&gt;assertResponseStatus(200);</code></p> <ul> <li>assertTrue() / assertEquals() (for uploaded file checks)</li> </ul> <p>Use these to check if the file exists in storage or matches expected properties after upload.</p> <p><code>php   $this-&gt;request('POST', '/upload', [], ['avatar' =&gt; $file]);   $this-&gt;assertTrue(file_exists(storage_path('uploads/avatar.png')));</code></p>"},{"location":"testing/#asserting-mails","title":"Asserting Mails","text":"<pre><code>$this-&gt;assertMailSent();\n$this-&gt;assertMailNotSent();\n$this-&gt;assertMailSubject();\n$this-&gt;assertMailContains();\n$this-&gt;assertMailSentFrom();\n$this-&gt;assertMailCount();\n$this-&gt;assertMailSentTo();\n$this-&gt;assertNoMailSentTo();\n$this-&gt;assertMailSentToAll();\n$this-&gt;assertMailCc();\n$this-&gt;assertMailBcc();\n$this-&gt;assertMailCcAll();\n$this-&gt;assertMailBccAll();\n$this-&gt;assertMailReplyTo();\n$this-&gt;assertMailReplyToAll();\n$this-&gt;assertMailHasAttachments();\n$this-&gt;assertMailHasAttachment();\n$this-&gt;assertMailHasNoAttachments();\n</code></pre> <ul> <li>assertMailSent()</li> </ul> <p>Asserts that at least one email was sent during the test.   <code>php   $this-&gt;assertMailSent();</code></p> <ul> <li>assertMailNotSent()</li> </ul> <p>Asserts that no emails were sent during the test.   <code>php   $this-&gt;assertMailNotSent();</code></p> <ul> <li>assertMailSubject()</li> </ul> <p>Asserts that an email with the given subject was sent.   <code>php   $this-&gt;assertMailSubject('Welcome to Lightpack');</code></p> <ul> <li>assertMailContains()</li> </ul> <p>Asserts that the email body contains the given text.   <code>php   $this-&gt;assertMailContains('Your verification code is');</code></p> <ul> <li>assertMailSentFrom()</li> </ul> <p>Asserts that an email was sent from the given address.   <code>php   $this-&gt;assertMailSentFrom('noreply@example.com');</code></p> <ul> <li>assertMailCount()</li> </ul> <p>Asserts that the number of emails sent matches the expected count.   <code>php   $this-&gt;assertMailCount(2);</code></p> <ul> <li>assertMailSentTo()</li> </ul> <p>Asserts that an email was sent to the given recipient.   <code>php   $this-&gt;assertMailSentTo('user@example.com');</code></p> <ul> <li>assertNoMailSentTo()</li> </ul> <p>Asserts that no email was sent to the given recipient.   <code>php   $this-&gt;assertNoMailSentTo('banned@example.com');</code></p> <ul> <li>assertMailSentToAll()</li> </ul> <p>Asserts that emails were sent to all recipients in the given list.   <code>php   $this-&gt;assertMailSentToAll(['a@example.com', 'b@example.com']);</code></p> <ul> <li>assertMailCc()</li> </ul> <p>Asserts that an email was CC'd to the given address.   <code>php   $this-&gt;assertMailCc('manager@example.com');</code></p> <ul> <li>assertMailBcc()</li> </ul> <p>Asserts that an email was BCC'd to the given address.   <code>php   $this-&gt;assertMailBcc('auditor@example.com');</code></p> <ul> <li>assertMailCcAll()</li> </ul> <p>Asserts that all given addresses were CC'd on the email.   <code>php   $this-&gt;assertMailCcAll(['a@example.com', 'b@example.com']);</code></p> <ul> <li>assertMailBccAll()</li> </ul> <p>Asserts that all given addresses were BCC'd on the email.   <code>php   $this-&gt;assertMailBccAll(['a@example.com', 'b@example.com']);</code></p> <ul> <li>assertMailReplyTo()</li> </ul> <p>Asserts that the email has the given reply-to address.   <code>php   $this-&gt;assertMailReplyTo('support@example.com');</code></p> <ul> <li>assertMailReplyToAll()</li> </ul> <p>Asserts that all given reply-to addresses are set on the email.   <code>php   $this-&gt;assertMailReplyToAll(['a@example.com', 'b@example.com']);</code></p> <ul> <li>assertMailHasAttachments()</li> </ul> <p>Asserts that the email has at least one attachment.   <code>php   $this-&gt;assertMailHasAttachments();</code></p> <ul> <li>assertMailHasAttachment()</li> </ul> <p>Asserts that the email has the specified attachment.   <code>php   $this-&gt;assertMailHasAttachment('invoice.pdf');</code></p> <ul> <li>assertMailHasNoAttachments()</li> </ul> <p>Asserts that the email has no attachments.   <code>php   $this-&gt;assertMailHasNoAttachments();</code></p>"},{"location":"testing/#asserting-databases","title":"Asserting Databases","text":"<p>Lightpack ships with <code>phpunit.xml</code> file in the project's root directory. You can specify the database configurations you will use for testing.</p> <p>Once you have configured database settings, use the <code>Lightpack\\Testing\\DatabaseTrait</code> in your test classes that need to interect with database.  - This migrates all the required schema changes per test method before it runs and destroys them after every test method execution completion. - This also wraps the test method execution within a transaction ensuring a clean slate for each test method.</p> <pre><code>class LoginTest extends TestCase\n{\n    use DatabaseTrait;\n\n    public function testUserCanLoginWithValidData()\n    {\n        $user = [\n            'email' =&gt; 'johndoe@example.com',\n            'password' =&gt; '!secret!';\n        ];\n\n        // Make the login post request\n        $this-&gt;request('POST', url()-&gt;route('login'), $user);\n\n        // Assert tge response status is 302\n        $this-&gt;assertResponseStatus(302);\n\n        // Assert response is a redirect\n        $this-&gt;assertInstanceOf(Redirect::class, $this-&gt;response);\n\n        // Assert redirect url is to dashboard route\n        $this-&gt;assertRedirectUrl(url()-&gt;route('dashboard'));\n\n        // Assert user login session is set\n        $this-&gt;assertTrue(auth()-&gt;isLoggedIn());\n    }\n}\n</code></pre>"},{"location":"testing/#seeding","title":"Seeding","text":"<p>In case you want to seed some test data, execute all your seeder classes:</p> <pre><code>php console db:seed\n</code></pre>"},{"location":"transformers/","title":"Model Transformers in Lightpack ORM","text":"<p>Model transformers are a powerful feature in Lightpack ORM, designed to help you convert your models (and collections of models) into clean, structured arrays for API responses, view rendering, or any custom output. They empower you to: - Select and filter fields dynamically - Include and nest related models - Transform collections and paginated data - Support multiple output contexts (e.g., API, view) - Keep presentation logic out of your models</p>"},{"location":"transformers/#what-is-a-transformer","title":"What is a Transformer?","text":"<p>A transformer is a dedicated class that defines how a model (or collection of models) should be represented as an array. Transformers encapsulate field selection, relation inclusion, and output formatting logic.</p> <p>Why use transformers? - Centralize and DRY up your serialization logic - Enforce consistent API and view output - Support dynamic field selection and relation includes - Easily adapt output for different consumers (API, admin, etc.)</p>"},{"location":"transformers/#how-transformer-resolution-works","title":"How Transformer Resolution Works","text":"<p>Transformers in Lightpack ORM are designed to make your API and view output flexible, maintainable, and secure. Understanding how the framework selects and applies transformers is key to leveraging their full power.</p>"},{"location":"transformers/#resolution-process","title":"Resolution Process","text":"<p>When you call the <code>transform()</code> method on a model (or collection), Lightpack follows a clear, predictable process:</p> <ol> <li>Check the <code>$transformer</code> Property</li> <li>This property tells Lightpack which transformer class to use.</li> <li> <p>It can be:</p> <ul> <li>A string: The class name of a single transformer (e.g., <code>UserTransformer::class</code>).</li> <li>An array: A map of context names (like <code>'api'</code>, <code>'view'</code>) to transformer classes.</li> <li><code>null</code>: No transformer defined\u2014calling <code>transform()</code> will throw an error.</li> </ul> </li> <li> <p>Context Support</p> </li> <li>If you want different outputs for different consumers (API, admin, etc.), use an array mapping contexts to transformer classes.</li> <li> <p>At runtime, specify the context via the <code>context</code> option:    <code>php    $product-&gt;transform(['context' =&gt; 'api']);    $product-&gt;transform(['context' =&gt; 'view']);</code></p> </li> <li> <p>Fields and Includes</p> </li> <li>You can pass a <code>fields</code> array to include only specific fields for the main model or for related models.</li> <li>You can pass an <code>includes</code> array to include related data (including nested relations).</li> <li>These options are forwarded directly to the transformer instance before transformation.    <code>php    $user-&gt;transform([        'fields' =&gt; ['self' =&gt; ['name', 'email']],        'includes' =&gt; ['profile', 'roles'],    ]);</code></li> </ol>"},{"location":"transformers/#defining-a-transformer","title":"Defining a Transformer","text":"<p>The <code>transform()</code> method on any model is the canonical way to convert it to an array for API or view output. This method:</p> <ul> <li>Looks up the transformer class from the model\u2019s <code>$transformer</code> property.</li> <li>If <code>$transformer</code> is a string, it instantiates that transformer.</li> <li>If <code>$transformer</code> is an array, it expects a <code>context</code> key in the options array (e.g., <code>'api'</code>, <code>'view'</code>) and selects the transformer for that context.</li> <li>If no transformer is defined, or the context is invalid, it throws a clear, descriptive exception.</li> </ul>"},{"location":"transformers/#examples","title":"Examples","text":"<pre><code>// Single transformer\nclass User extends Model {\n    protected $transformer = UserTransformer::class;\n}\n\n// Multiple contexts\nclass Product extends Model {\n    protected $transformer = [\n        'api' =&gt; ProductApiTransformer::class,\n        'view' =&gt; ProductViewTransformer::class,\n    ];\n}\n\n// Usage\n$user = new User(1);\n$userArray = $user-&gt;transform(); // Uses UserTransformer\n\n$product = new Product(1);\n$productApi = $product-&gt;transform(['context' =&gt; 'api']);\n$productView = $product-&gt;transform(['context' =&gt; 'view']);\n</code></pre>"},{"location":"transformers/#passing-fields-and-includes","title":"Passing Fields and Includes","text":"<p>You can pass <code>fields</code> and <code>includes</code> options to control the output:</p> <pre><code>$user-&gt;transform([\n    'fields' =&gt; ['self' =&gt; ['name', 'email']],\n    'includes' =&gt; ['profile', 'roles'],\n]);\n</code></pre> <p>These options are forwarded to the transformer instance and determine which fields and relations are included in the output.</p> <p>A transformer is a PHP class that extends <code>Lightpack\\Database\\Lucid\\Transformer</code> and implements a <code>data($model)</code> method. This method returns an array representation of the model, controlling which fields are exposed and how relations are included.</p>"},{"location":"transformers/#basic-transformer-example","title":"Basic Transformer Example","text":"<pre><code>use Lightpack\\Database\\Lucid\\Transformer;\n\nclass ProjectTransformer extends Transformer\n{\n    protected function data($model): array\n    {\n        return [\n            'id' =&gt; $model-&gt;id,\n            'name' =&gt; $model-&gt;name,\n        ];\n    }\n}\n</code></pre>"},{"location":"transformers/#using-fields-and-includes-in-transformers","title":"Using Fields and Includes in Transformers","text":"<p>You don't have to manually filter fields or include relations in your <code>data()</code> method\u2014Lightpack handles this based on the <code>fields()</code> and <code>includes()</code> options passed at runtime. Your <code>data()</code> method should return the full set of possible fields for the model.</p>"},{"location":"transformers/#contextual-transformers","title":"Contextual Transformers","text":"<p>You can define multiple transformers for the same model to support different output contexts (e.g., API, view, admin):</p> <pre><code>class ProductApiTransformer extends Transformer\n{\n    protected function data($model): array\n    {\n        return [\n            'name' =&gt; $model-&gt;name,\n            'price' =&gt; $model-&gt;price,\n        ];\n    }\n}\n\nclass ProductViewTransformer extends Transformer\n{\n    protected function data($model): array\n    {\n        return [\n            'id' =&gt; $model-&gt;id,\n            'name' =&gt; $model-&gt;name,\n            'price' =&gt; $model-&gt;price,\n            'color' =&gt; $model-&gt;color,\n        ];\n    }\n}\n</code></pre>"},{"location":"transformers/#associating-transformers-with-models","title":"Associating Transformers with Models","text":"<p>To use a default transformer, set the <code>$transformer</code> property on your model:</p> <pre><code>class Project extends Model\n{\n    protected $table = 'projects';\n    protected $transformer = ProjectTransformer::class;\n}\n</code></pre> <p>To support multiple contexts, use an array mapping context names to transformer classes:</p> <pre><code>class Product extends Model\n{\n    protected $transformer = [\n        'api' =&gt; ProductApiTransformer::class,\n        'view' =&gt; ProductViewTransformer::class,\n    ];\n}\n</code></pre> <p>When transforming, specify the context:</p> <pre><code>$product-&gt;transform(['context' =&gt; 'api']); // Uses ProductApiTransformer\n$product-&gt;transform(['context' =&gt; 'view']); // Uses ProductViewTransformer\n</code></pre> <p>If an invalid context is provided, Lightpack will throw a descriptive exception listing available contexts.</p>"},{"location":"transformers/#basic-usage","title":"Basic Usage","text":""},{"location":"transformers/#transforming-a-single-model","title":"Transforming a Single Model","text":"<pre><code>$project = new Project(1);\n$transformer = new ProjectTransformer();\n\n$result = $transformer-&gt;transform($project);\n// [ 'id' =&gt; 1, 'name' =&gt; 'Project 1' ]\n</code></pre>"},{"location":"transformers/#field-selection","title":"Field Selection","text":"<p>Select only specific fields for the main model (\"self\") or for relations:</p> <pre><code>$result = $transformer\n    -&gt;fields(['self' =&gt; ['name']])\n    -&gt;transform($project);\n// [ 'name' =&gt; 'Project 1' ]\n</code></pre>"},{"location":"transformers/#including-relations","title":"Including Relations","text":"<p>Include related models by name:</p> <pre><code>$result = $transformer\n    -&gt;includes('tasks')\n    -&gt;fields([\n        'self' =&gt; ['name'],\n        'tasks' =&gt; ['id', 'name'],\n    ])\n    -&gt;transform($project);\n// [ 'name' =&gt; 'Project 1', 'tasks' =&gt; [ [ 'id' =&gt; 1, 'name' =&gt; 'Task 1' ] ] ]\n</code></pre>"},{"location":"transformers/#nested-relations-deep-includes","title":"Nested Relations &amp; Deep Includes","text":"<p>You can include nested relations using dot notation:</p> <pre><code>$result = $transformer\n    -&gt;includes('tasks.comments')\n    -&gt;fields([\n        'self' =&gt; ['name'],\n        'tasks' =&gt; ['name'],\n        'tasks.comments' =&gt; ['content']\n    ])\n    -&gt;transform($project);\n// [ 'name' =&gt; 'Project 1', 'tasks' =&gt; [ [ 'name' =&gt; 'Task 1', 'comments' =&gt; [ [ 'content' =&gt; 'Comment 1' ] ] ] ] ]\n</code></pre> <p>You can also include multiple paths at once:</p> <pre><code>$result = $transformer\n    -&gt;includes(['tasks', 'tasks.comments'])\n    -&gt;fields([\n        'self' =&gt; ['id', 'name'],\n        'tasks' =&gt; ['name'],\n        'tasks.comments' =&gt; ['content']\n    ])\n    -&gt;transform($project);\n</code></pre>"},{"location":"transformers/#handling-missing-or-null-relations","title":"Handling Missing or Null Relations","text":"<ul> <li>If a relation is missing or not included, it is omitted from the output.</li> <li>If a relation is included but null or empty, it appears as an empty array or null, as appropriate.</li> </ul>"},{"location":"transformers/#transforming-collections","title":"Transforming Collections","text":"<p>Transformers can handle collections of models seamlessly:</p> <pre><code>$projects = Project::query()-&gt;all();\n$result = $transformer\n    -&gt;includes(['tasks'])\n    -&gt;fields([\n        'self' =&gt; ['name'],\n        'tasks' =&gt; ['name']\n    ])\n    -&gt;transform($projects);\n// [ [ 'name' =&gt; 'Project 1', 'tasks' =&gt; [ ... ] ], ... ]\n</code></pre>"},{"location":"transformers/#model-integrated-transformation","title":"Model-integrated Transformation","text":"<p>You can call <code>transform()</code> directly on a model or collection, passing options:</p> <pre><code>$result = $project-&gt;transform([\n    'includes' =&gt; ['tasks.comments'],\n    'fields' =&gt; [\n        'self' =&gt; ['name'],\n        'tasks' =&gt; ['name'],\n        'tasks.comments' =&gt; ['content'],\n    ],\n]);\n</code></pre>"},{"location":"transformers/#pagination-support","title":"Pagination Support","text":"<p>If you have a paginated collection, you can transform it for API output:</p> <pre><code>$pagination = new Pagination($projects, $total, $perPage, $currentPage);\n$result = $pagination-&gt;transform([\n    'includes' =&gt; ['tasks'],\n    'fields' =&gt; [\n        'self' =&gt; ['name'],\n        'tasks' =&gt; ['name'],\n    ],\n]);\n// Output includes 'data', 'meta', and 'links' keys\n</code></pre>"},{"location":"transformers/#dynamic-includes-comma-and-dot-notation","title":"Dynamic Includes: Comma and Dot Notation","text":"<ul> <li>Comma notation: Direct relations (<code>includes(['tasks', 'comments'])</code>)\u2014relations are included at the top level.</li> <li>Dot notation: Nested relations (<code>includes('tasks.comments')</code>)\u2014relations are nested under their parent.</li> </ul> <p>You can mix and match as needed.</p>"},{"location":"transformers/#contextual-transformers_1","title":"Contextual Transformers","text":"<p>Transformers can support multiple output contexts (e.g., API, view) for the same model:</p> <pre><code>$product = new Product(1);\n\n// API context\n$result = $product-&gt;transform(['context' =&gt; 'api']);\n// Uses ProductApiTransformer\n\n// View context\n$result = $product-&gt;transform(['context' =&gt; 'view']);\n// Uses ProductViewTransformer\n</code></pre> <p>If an invalid context is provided, a clear exception is thrown listing available contexts.</p>"},{"location":"transformers/#error-handling-robustness","title":"Error Handling &amp; Robustness","text":"<ul> <li>If you include a non-existent relation, it is simply ignored in the output.</li> <li>If you call <code>transform()</code> on a model without a transformer, you get a clear exception: <code>No transformer defined for model: ModelClass</code>.</li> <li>If you specify an invalid context, a descriptive exception is thrown: <code>Invalid transformer context 'admin' for ModelClass. Available contexts: api, view</code>.</li> <li>Null or missing relations are output as empty arrays or omitted, never causing errors.</li> </ul>"},{"location":"uploads/","title":"Lightpack Uploads","text":"<p>A flexible, model-based file upload system for the Lightpack framework.</p>"},{"location":"uploads/#features","title":"Features","text":"<ul> <li>Model-specific file attachments</li> <li>Support for single and multiple file uploads</li> <li>Remote file uploads from URLs</li> <li>Image transformations (resize)</li> <li>Asyncronous image transformations using job queue</li> <li>Works with both local and cloud storage (S3, CloudFront)</li> <li>Public and private file storage with access control</li> <li>SEO-friendly URLs for public assets</li> <li>Clean, intuitive API</li> </ul>"},{"location":"uploads/#installation","title":"Installation","text":"<p>The Uploads module is included with Lightpack framework. To set up the database table, run the migration:</p> <pre><code>php console migrate create_table_uploads\n</code></pre>"},{"location":"uploads/#basic-usage","title":"Basic Usage","text":""},{"location":"uploads/#preparing-your-model","title":"Preparing Your Model","text":"<p>Add the <code>UploadTrait</code> trait to any model that needs file upload capabilities:</p> <pre><code>use Lightpack\\Uploads\\UploadTrait;\n\nclass User extends Model\n{\n    use UploadTrait;\n\n    // ...\n}\n</code></pre>"},{"location":"uploads/#attaching-files","title":"Attaching Files","text":""},{"location":"uploads/#single-file-upload","title":"Single File Upload","text":"<p>This is particularly:</p> <ul> <li>Profile Pictures: When a user uploads a new avatar, you want to delete the old one</li> <li>Featured Images: When a product or article has a single featured image</li> <li>Document Replacements: When a document should be replaced rather than having multiple versions</li> </ul> <pre><code>// Attach a file from a form upload (public)\n$user-&gt;attach('avatar', [\n    'collection' =&gt; 'profile',\n    'singleton' =&gt; true, // Only keep one file in this collection\n]);\n</code></pre> <pre><code>// Attach a file as private (requires access control)\n$user-&gt;attach('document', [\n    'collection' =&gt; 'confidential',\n    'singleton' =&gt; true,\n    'private' =&gt; true,\n]);\n</code></pre>"},{"location":"uploads/#multiple-file-upload","title":"Multiple File Upload","text":"<pre><code>// Attach multiple files from a form upload (public)\n$photos = $user-&gt;attachMultiple('photos', [\n    'collection' =&gt; 'gallery',\n]);\n</code></pre> <pre><code>// Attach multiple files as private\n$documents = $user-&gt;attachMultiple('documents', [\n    'collection' =&gt; 'private-documents',\n    'private' =&gt; true,\n]);\n</code></pre>"},{"location":"uploads/#remote-file-upload","title":"Remote File Upload","text":"<pre><code>// Attach a file from a URL (public)\n$user-&gt;attachFromUrl('https://example.com/image.jpg', [\n    'collection' =&gt; 'remote',\n]);\n</code></pre> <pre><code>// Attach a file from a URL as private\n$user-&gt;attachFromUrl('https://example.com/confidential.pdf', [\n    'collection' =&gt; 'private-remote',\n    'private' =&gt; true,\n]);\n</code></pre>"},{"location":"uploads/#retrieving-uploads","title":"Retrieving Uploads","text":"<pre><code>// Get all uploads in 'profile' collection\n$uploads = $user-&gt;uploads('profile')-&gt;get();\n</code></pre> <pre><code>// Get the first upload in 'profile' collection\n$avatar = $user-&gt;firstUpload('profile');\n</code></pre>"},{"location":"uploads/#working-with-upload-models","title":"Working with Upload Models","text":"<p>Once you have fetched the uploaded model, you can work with it as documented below:</p> <pre><code>// Get the URL to the file \n// Note: returns empty string for private files\n$url = $avatar-&gt;url();\n</code></pre> <pre><code>// Get the URL to a transformed version\n$thumbnailUrl = $avatar-&gt;url('thumbnail');\n</code></pre> <pre><code>// Get the file path\n$path = $avatar-&gt;getPath();\n</code></pre> <pre><code>// Check if a file exists\nif ($avatar-&gt;exists('thumbnail')) {\n    // ...\n}\n</code></pre> <pre><code>// Check if a file is private\nif ($avatar-&gt;is_private) {\n    // Handle private file access\n}\n</code></pre> <pre><code>// Get file metadata\n$mimeType = $avatar-&gt;getMimeType();\n$size = $avatar-&gt;getSize();\n$meta = $avatar-&gt;getMeta();\n</code></pre>"},{"location":"uploads/#deleting-uploads","title":"Deleting Uploads","text":"<pre><code>// Detach a specific upload\n$user-&gt;detach($uploadId);\n</code></pre>"},{"location":"uploads/#image-transformations","title":"Image Transformations","text":"<p>With the image based uploads, you can define image transformations when attaching files:</p> <pre><code>$user-&gt;attach('avatar', [\n    'collection' =&gt; 'profile',\n    'transformations' =&gt; [\n        'thumbnail_small' =&gt; ['resize', 200, 200],\n        'thumbnail_medium' =&gt; ['resize', 400, 400],\n    ],\n]);\n</code></pre> <p>The value of the transformation key is the image transformation related methods and required arguments:</p> <pre><code>[resize, 200, 200]\n</code></pre> <p>Then access the transformed versions:</p> <pre><code>$thumbnailUrl = $avatar-&gt;url('thumbnail');\n$mediumUrl = $avatar-&gt;url('medium');\n</code></pre>"},{"location":"uploads/#asynchronous-image-transformations","title":"Asynchronous Image Transformations","text":"<p>If background jobs processing has been configured to run, then all image transformation happen asynchronously.</p> <p>You can also customize image transformations job queue name, max transformation attaempts, and retries related configurations in the <code>.env</code> file.</p> <pre><code>UPLOADS_QUEUE=uploads\nUPLOADS_MAX_ATTEMPT=3\nUPLOADS_RETRY_AFTER=10 seconds\n</code></pre>"},{"location":"uploads/#how-transformations-work","title":"How Transformations Work","text":"<p>Transformations are processed automatically when you attach a file with transformations defined:</p> <ol> <li>The original image is loaded</li> <li>Each transformation is applied</li> <li>Transformed versions are saved to the appropriate storage location</li> </ol> <p>You can specify different dimensions for each variant:</p> <pre><code>'transformations' =&gt; [\n    'transformations' =&gt; [\n        'thumbnail_small' =&gt; ['resize', 200, 200],\n        'thumbnail_medium' =&gt; ['resize', 400, 400],\n        'banner' =&gt; ['resize', 1200, 300],\n    ],\n]\n</code></pre>"},{"location":"uploads/#file-storage-system","title":"File Storage System","text":"<p>The Uploads module uses Lightpack's Storage system to store files in a consistent way:</p> <pre><code>// Public files (accessible via URL)\n$user-&gt;attach('avatar', [\n    'collection' =&gt; 'profile',\n]);\n\n// Files are stored in: uploads/public/media/{id}/filename.jpg\n// And accessible via: /uploads/media/{id}/filename.jpg\n</code></pre>"},{"location":"uploads/#public-vs-private-uploads","title":"Public vs Private Uploads","text":"<p>Lightpack supports both public and private file uploads:</p>"},{"location":"uploads/#public-uploads","title":"Public Uploads","text":"<p>Public uploads are stored in <code>uploads/public/</code> and are directly accessible via URL. Use these for:</p> <ul> <li>Images displayed on your website</li> <li>Public documents</li> <li>Any files that don't require access control</li> </ul> <pre><code>// Public uploads (default)\n$model-&gt;attach('image');\n$model-&gt;attachMultiple('photos');\n$model-&gt;attachFromUrl('https://example.com/image.jpg');\n</code></pre>"},{"location":"uploads/#private-uploads","title":"Private Uploads","text":"<p>Private uploads are stored in <code>uploads/private/</code> and require access control. They are not directly accessible via URL. Use these for:</p> <ul> <li>Confidential documents</li> <li>User-specific files that require authentication</li> <li>Any files that should not be publicly accessible</li> </ul> <pre><code>// Private uploads (using the 'private' flag)\n$model-&gt;attach('document', ['private' =&gt; true]);\n$model-&gt;attachMultiple('files', ['private' =&gt; true]);\n$model-&gt;attachFromUrl('https://example.com/confidential.pdf', ['private' =&gt; true]);\n</code></pre>"},{"location":"uploads/#serving-private-files","title":"Serving Private Files","text":"<p>To serve private files, you need to create a controller that implements access control:</p> <pre><code>class FileController\n{\n    public function serve(int $id)\n    {\n        // Get the upload\n        $upload = new UploadModel($id);\n\n        if (!$upload || !$upload-&gt;exists()) {\n            return response()-&gt;setStatus(404)-&gt;send('File not found');\n        }\n\n        // Optionally: check if the user has access permission\n        if ($upload-&gt;is_private &amp;&amp; !$this-&gt;userCanAccessFile($upload)) {\n            return response()-&gt;setStatus(403)-&gt;send('Unauthorized');\n        }\n\n        // Get the stored file contents\n        $contents = storage()-&gt;read($upload-&gt;getPath());\n\n        // Create a response with the file contents\n        $response = response();\n        $response-&gt;setHeader('Content-Type', $upload-&gt;mime_type);\n        $response-&gt;setHeader('Content-Disposition', 'inline; filename=\"' . $upload-&gt;file_name . '\"');\n\n        return $response-&gt;send($contents);\n    }\n\n    protected function userCanAccessFile(UploadModel $upload): bool\n    {\n        // Implement your access control logic here\n        return true; // Replace with actual logic\n    }\n}\n</code></pre> <p>Then set up a route to this controller:</p> <pre><code>$router-&gt;get('/files/{id}', 'FileController@serve');\n</code></pre>"},{"location":"uploads/#url-structure","title":"URL Structure","text":"<p>The URL structure depends on the storage location:</p> <p>For public uploads</p> <pre><code>// Stored at: uploads/public/media/123/avatar.jpg\n// URL: /uploads/media/123/avatar.jpg\n</code></pre> <p>For transformed versions</p> <pre><code>// Stored at: uploads/public/media/123/thumbnail/avatar.jpg\n// URL: /uploads/media/123/thumbnail/avatar.jpg\n</code></pre>"},{"location":"uploads/#customizing-upload-paths","title":"Customizing Upload Paths","text":"<p>By default, files are stored in <code>uploads/public/media/{model_id}/{filename}</code>, but you can customize this:</p> <pre><code>$user-&gt;attach('avatar', [\n    'collection' =&gt; 'profile',\n    'path' =&gt; 'users/' . $user-&gt;id . '/avatars',\n]);\n</code></pre> <p>This results in:</p> <pre><code>// Storage path: uploads/public/users/123/avatars/image.jpg\n// URL: /uploads/users/123/avatars/image.jpg\n</code></pre> <p>This allows you to organize files in a way that makes sense for your application.</p>"},{"location":"uploads/#cloud-storage-integration","title":"Cloud Storage Integration","text":"<p>Lightpack's upload system works seamlessly with cloud storage providers like Amazon S3 and CloudFront.</p>"},{"location":"uploads/#amazon-s3-storage","title":"Amazon S3 Storage","text":"<p>When storage is configured to use S3, Lightpack will: - Store public files in the <code>uploads/public/</code> prefix - Store private files in the <code>uploads/private/</code> prefix - Generate appropriate URLs for each type</p>"},{"location":"uploads/#cloudfront-integration","title":"CloudFront Integration","text":"<p>For optimal performance and SEO, Lightpack supports CloudFront integration:</p> <ul> <li>Public files (<code>uploads/public/*</code>) are served via permanent CloudFront URLs</li> <li>Private files (<code>uploads/private/*</code>) can be served via signed CloudFront URLs</li> </ul>"},{"location":"uploads/#cloudfront-best-practices","title":"CloudFront Best Practices","text":"<ol> <li>For SEO-friendly URLs:</li> <li>Configure CloudFront to serve your <code>uploads/public/*</code> files</li> <li>Set appropriate cache behaviors for different file types</li> <li> <p>Use permanent URLs for public content</p> </li> <li> <p>For Private Content:</p> </li> <li>Configure CloudFront with Origin Access Identity (OAI) to restrict direct S3 access</li> <li>Use CloudFront signed URLs with appropriate expiration times</li> <li> <p>Set up path patterns to restrict access to <code>uploads/private/*</code></p> </li> <li> <p>For Video Content:</p> </li> <li>Use CloudFront for global distribution</li> <li>Configure appropriate cache behaviors for video files</li> <li>Consider using signed URLs with short expiration for premium content</li> </ol>"},{"location":"uploads/#serving-private-files-with-cloudfront","title":"Serving Private Files with CloudFront","text":"<p>For private files, you can create a controller that generates signed URLs:</p> <pre><code>class PrivateFileController\n{\n    public function serve(int $id)\n    {\n        // Get the upload\n        $upload = new UploadModel($id);\n\n        if (!$upload || !$upload-&gt;exists() || !$upload-&gt;is_private) {\n            return response()-&gt;setStatus(404)-&gt;send('File not found');\n        }\n\n        // Check if the current user has permission to access this file\n        if (!$this-&gt;userCanAccessFile($upload)) {\n            return response()-&gt;setStatus(403)-&gt;send('Unauthorized');\n        }\n\n        // Generate a signed URL (works with both S3 and CloudFront)\n        $signedUrl = storage()-&gt;url($upload-&gt;getPath(), 3600); // 1 hour expiration\n\n        // Redirect to the signed URL\n        return response()-&gt;redirect($signedUrl);\n    }\n\n    protected function userCanAccessFile(UploadModel $upload): bool\n    {\n        // Implement your access control logic here\n        return true; // Replace with actual logic\n    }\n}\n</code></pre>"},{"location":"uploads/#listing-files-in-a-directory","title":"Listing Files in a Directory","text":"<p>The Storage system provides a <code>files()</code> method to list all files in a directory:</p> <pre><code>$files = storage()-&gt;files('uploads/public/media/123');\n\nforeach ($files as $file) {\n    // Process each file\n}\n</code></pre> <p>This works consistently across different storage backends (local filesystem, S3, etc.).</p>"},{"location":"uploads/#metadata-and-validation","title":"Metadata and Validation","text":""},{"location":"uploads/#file-metadata","title":"File Metadata","text":"<p>All the uploads store comprehensive metadata about each file:</p> <pre><code>$upload = $user-&gt;firstUpload('documents');\n</code></pre> <pre><code>// Basic metadata\n$filename = $upload-&gt;file_name;\n$extension = $upload-&gt;getExtension();\n$mimeType = $upload-&gt;getMimeType();\n$size = $upload-&gt;getSize();\n</code></pre> <p>You can also store custom meta data for the uploaded model:</p> <pre><code>// Custom metadata\n$upload-&gt;meta = [\n    'title' =&gt; 'My Document',\n    'description' =&gt; 'Important file',\n    'tags' =&gt; ['important', 'document'],\n];\n$upload-&gt;save();\n</code></pre> <pre><code>// Later, retrieve custom metadata\n$title = $upload-&gt;getMeta('title');\n$tags = $upload-&gt;getMeta('tags', []);\n</code></pre>"},{"location":"uploads/#validation","title":"Validation","text":"<p>While the Uploads module doesn't include built-in validation, you can easily add it:</p>"},{"location":"uploads/#best-practices","title":"Best Practices","text":""},{"location":"uploads/#security","title":"Security","text":"<ol> <li> <p>Always use private uploads for sensitive content <code>php    $user-&gt;attach('tax_document', ['private' =&gt; true]);</code></p> </li> <li> <p>Implement proper access control in your controllers <code>php    if (!$this-&gt;userCanAccessFile($upload)) {        return response()-&gt;setStatus(403);    }</code></p> </li> <li> <p>Use short expiration times for signed URLs <code>php    // 15 minutes is often sufficient for most use cases    $signedUrl = $storage-&gt;url($upload-&gt;getPath(), 900);</code></p> </li> </ol>"},{"location":"uploads/#performance","title":"Performance","text":"<ol> <li>Use CloudFront for global content delivery</li> <li> <p>Configure your storage to use CloudFront for improved load times</p> </li> <li> <p>Implement appropriate caching headers</p> </li> </ol> <pre><code>$response-&gt;setHeader('Cache-Control', 'public, max-age=31536000');\n</code></pre> <ol> <li>Use appropriate image transformations</li> </ol> <pre><code>// Should not serve original images directly to users\n$user-&gt;attach('product_image', [\n    'transformations' =&gt; [\n        'thumbnail' =&gt; ['resize' =&gt; [200, 200]],\n        'medium' =&gt; ['resize' =&gt; [600, 600]],\n        'large' =&gt; ['resize' =&gt; [1200, 1200]],\n    ],\n]);\n</code></pre>"},{"location":"uploads/#seo","title":"SEO","text":"<ol> <li> <p>Use public uploads for content that should be indexed <code>php    $product-&gt;attach('featured_image');</code></p> </li> <li> <p>Configure CloudFront for permanent, SEO-friendly URLs</p> </li> <li> <p>This avoids temporary URLs that search engines won't index</p> </li> <li> <p>Use descriptive filenames <code>php    $product-&gt;attachFromUrl($imageUrl, [        'filename' =&gt; 'blue-denim-jeans-product-front-view.jpg',    ]);</code></p> </li> </ol>"},{"location":"uploads/#error-handling","title":"Error Handling","text":"<p>The upload methods can throw exceptions in case of errors:</p> <pre><code>try {\n    $upload = $user-&gt;attach('avatar', [\n        'collection' =&gt; 'profile',\n    ]);\n} catch (FileUploadException $e) {\n    // Handle upload errors\n} catch (\\Exception $e) {\n    // Handle other errors\n}\n</code></pre>"},{"location":"url/","title":"URL Utility","text":"<p>Lightpack's Url utility class provides a comprehensive set of methods for URL generation, manipulation, and validation. It supports route-based URLs, asset URLs, signed URLs, and various URL manipulation operations.</p> <p>You can instantiate to Url utility:</p> <pre><code>$url = new Lightpack\\Utils\\Url();\n</code></pre> <p>Or you can call the utility function <code>url()</code> which returns an instance or Url class.</p>"},{"location":"url/#basic-url-generation","title":"Basic URL Generation","text":""},{"location":"url/#simple-urls","title":"Simple URLs","text":"<pre><code>// Generate basic URL\nurl()-&gt;to('users'); // Returns: /users\n\n// URL with multiple segments\nurl()-&gt;to('blog', 'posts', '123'); // Returns: /blog/posts/123\n\n// URL with query parameters\n// Returns: /users?sort=asc&amp;status=active\nurl()-&gt;to('users', ['sort' =&gt; 'asc', 'status' =&gt; 'active']); \n</code></pre> <p>If you set the environment variable <code>APP_URL</code>, then it returns fully qualified URL:</p> <pre><code>// If APP_URL=https://example.com\n// Returns: https://example.com/api/v1\nurl()-&gt;to('api', 'v1'); \n</code></pre>"},{"location":"url/#asset-urls","title":"Asset URLs","text":"<p>Generate URLs for static assets in the public directory:</p> <pre><code>// Basic asset URL\nurl()-&gt;asset('css/styles.css'); // Returns: /css/styles.css\n</code></pre> <p>With <code>ASSET_URL</code> environment variable:</p> <pre><code>// If ASSET_URL=https://cdn.example.com\n// Returns: https://cdn.example.com/js/app.js\nurl()-&gt;asset('js/app.js'); \n</code></pre> <p>Fallback to <code>APP_URL</code> if <code>ASSET_URL</code> not set:</p> <pre><code>// If APP_URL=https://example.com\n// Returns: https://example.com/images/logo.png\nurl()-&gt;asset('images/logo.png'); \n</code></pre>"},{"location":"url/#route-urls","title":"Route URLs","text":"<p>Generate URLs for named routes:</p> <pre><code>\nBasic route URL\n\n```php\n// Returns: /users/123/profile\nurl()-&gt;route('user.profile', ['id' =&gt; 123]); \n</code></pre> <p>Route with optional parameters</p> <pre><code>// Returns: /blog/tech/php-tips\nurl()-&gt;route('blog.post', [\n    'category' =&gt; 'tech',\n    'slug' =&gt; 'php-tips'\n]); \n</code></pre> <p>Route with query parameters:</p> <pre><code>// Returns: /search?q=php&amp;page=1\nurl()-&gt;route('search', [\n    'q' =&gt; 'php',\n    'page' =&gt; 1\n]); \n</code></pre>"},{"location":"url/#url-manipulation","title":"URL Manipulation","text":""},{"location":"url/#query-parameters","title":"Query Parameters","text":"<p>Add/update query parameters:</p> <pre><code>// Returns: https://example.com/search?q=php\nurl()-&gt;withQuery('https://example.com/search', ['q' =&gt; 'php']);\n</code></pre> <p>Array parameters:</p> <pre><code>// Returns: https://example.com/posts?tags[0]=php&amp;tags[1]=mysql\nurl()-&gt;withQuery('https://example.com/posts', [\n    'tags' =&gt; ['php', 'mysql']\n]);\n</code></pre> <p>Remove query parameters:</p> <pre><code>// Returns: example.com?page=1\nurl()-&gt;withoutQuery('example.com?page=1&amp;sort=desc', 'sort');\n</code></pre> <p>Remove multiple parameters:</p> <pre><code>// Returns: example.com?page=1\nurl()-&gt;withoutQuery('example.com?utm_source=fb&amp;page=1', ['utm_source', 'utm_medium']);\n</code></pre> <p>Remove all query parameters:</p> <pre><code>// Returns: example.com\nurl()-&gt;withoutQuery('example.com?page=1&amp;sort=desc');\n</code></pre>"},{"location":"url/#url-fragments","title":"URL Fragments","text":"<p>Add/update fragment:</p> <pre><code>// Returns: example.com#section1\nurl()-&gt;withFragment('example.com', 'section1');\n</code></pre> <p>Update existing fragment:</p> <pre><code>// Returns: example.com#new\nurl()-&gt;withFragment('example.com#old', 'new');\n</code></pre> <p>Remove fragment:</p> <pre><code>// Returns: example.com\nurl()-&gt;withoutFragment('example.com#section');\n</code></pre>"},{"location":"url/#url-normalization","title":"URL Normalization","text":"<p>Clean up URLs:</p> <pre><code>// Returns: https://example.com/api/users\nurl()-&gt;normalize('https://example.com//blog/../api/./users//');\n</code></pre> <p>Join URL segments:</p> <pre><code>// Returns: https://api.com/v1/users?sort=desc\nurl()-&gt;join('https://api.com', 'v1/', '/users', '?sort=desc');\n</code></pre>"},{"location":"url/#url-signing","title":"URL Signing","text":"<p>Generate a signed URL for a given route for secure access:</p> <pre><code>// Generate signed URL (expires in 1 hour default)\n$signedUrl = url()-&gt;sign('download.file', ['id' =&gt; 123]);\n\n// Generate signed URL with custom expiration\n$signedUrl = url()-&gt;sign('download.file', ['id' =&gt; 123], 7200); // 2 hours\n</code></pre> <p>Verify signed URL:</p> <pre><code>if (url()-&gt;verify($signedUrl)) {\n    // URL is valid and not expired\n}\n</code></pre> <p>Verify with ignored parameters:</p> <pre><code>url()-&gt;verify($signedUrl, ['utm_source', 'utm_medium']);\n</code></pre>"},{"location":"url/#comprehensive-example-scenarios","title":"Comprehensive Example Scenarios","text":"<p>The following document shows you some valid practical use case scenarios.</p>"},{"location":"url/#1-url-generation-service","title":"1. URL Generation Service","text":"<pre><code>class UrlGenerator\n{\n    public function getProfileUrl(int $userId, array $params = []): string\n    {\n        return url()-&gt;route('user.profile', array_merge(\n            ['id' =&gt; $userId],\n            $params\n        ));\n    }\n\n    public function getDownloadUrl(string $fileId, int $expiresIn = 3600): string\n    {\n        return url()-&gt;sign('file.download', [\n            'id' =&gt; $fileId\n        ], $expiresIn);\n    }\n\n    public function getAssetUrl(string $path, bool $versioned = false): string\n    {\n        $url = url()-&gt;asset($path);\n\n        if ($versioned) {\n            return url()-&gt;withQuery($url, [\n                'v' =&gt; filemtime(public_path($path))\n            ]);\n        }\n\n        return $url;\n    }\n}\n</code></pre>"},{"location":"url/#2-url-validation-service","title":"2. URL Validation Service","text":"<pre><code>class UrlValidator\n{\n    private array $defaultOptions = [\n        'schemes' =&gt; ['https'],\n        'require_scheme' =&gt; true,\n        'max_length' =&gt; 2048\n    ];\n\n    public function isValidExternalUrl(string $url): bool\n    {\n        return url()-&gt;validate($url, array_merge(\n            $this-&gt;defaultOptions,\n            ['allowed_hosts' =&gt; $this-&gt;getAllowedHosts()]\n        ));\n    }\n\n    public function isValidInternalUrl(string $url): bool\n    {\n        return url()-&gt;validate($url, array_merge(\n            $this-&gt;defaultOptions,\n            ['allowed_hosts' =&gt; [parse_url(get_env('APP_URL'), PHP_URL_HOST)]]\n        ));\n    }\n\n    public function isValidAssetUrl(string $url): bool\n    {\n        $assetHost = get_env('ASSET_URL') \n            ? parse_url(get_env('ASSET_URL'), PHP_URL_HOST)\n            : parse_url(get_env('APP_URL'), PHP_URL_HOST);\n\n        return url()-&gt;validate($url, array_merge(\n            $this-&gt;defaultOptions,\n            ['allowed_hosts' =&gt; [$assetHost]]\n        ));\n    }\n\n    private function getAllowedHosts(): array\n    {\n        // Load from configuration or environment\n        return explode(',', get_env('ALLOWED_EXTERNAL_HOSTS', ''));\n    }\n}\n</code></pre>"},{"location":"url/#3-url-cleaner-service","title":"3. URL Cleaner Service","text":"<pre><code>class UrlCleaner\n{\n    public function clean(string $url): string\n    {\n        // Remove tracking parameters\n        $url = url()-&gt;withoutQuery($url, [\n            'utm_source',\n            'utm_medium',\n            'utm_campaign',\n            'utm_term',\n            'utm_content'\n        ]);\n\n        // Normalize the URL\n        $url = url()-&gt;normalize($url);\n\n        // Remove fragments if present\n        return url()-&gt;withoutFragment($url);\n    }\n\n    public function cleanBatch(array $urls): array\n    {\n        return array_map([$this, 'clean'], $urls);\n    }\n}\n</code></pre>"},{"location":"url/#4-url-security-service","title":"4. URL Security Service","text":"<pre><code>class UrlSecurity\n{\n    private array $sensitiveParams = [\n        'token',\n        'key',\n        'password',\n        'secret'\n    ];\n\n    public function sanitize(string $url): string\n    {\n        // Remove sensitive query parameters\n        return url()-&gt;withoutQuery($url, $this-&gt;sensitiveParams);\n    }\n\n    public function createSecureDownloadUrl(string $path, array $params = []): string\n    {\n        // Generate a signed URL that expires in 5 minutes\n        return url()-&gt;sign('secure.download', array_merge(\n            ['path' =&gt; $path],\n            $params\n        ), 300);\n    }\n\n    public function verifySecureUrl(string $url): bool\n    {\n        // Verify the URL ignoring non-security related parameters\n        return url()-&gt;verify($url, [\n            'ref',\n            'source',\n            'campaign'\n        ]);\n    }\n}\n</code></pre>"},{"location":"url/#5-url-analytics-service","title":"5. URL Analytics Service","text":"<pre><code>class UrlAnalytics\n{\n    public function addTracking(string $url, array $params): string\n    {\n        return url()-&gt;withQuery($url, array_merge(\n            [\n                'utm_source' =&gt; $params['source'] ?? 'website',\n                'utm_medium' =&gt; $params['medium'] ?? 'link',\n                'utm_campaign' =&gt; $params['campaign'] ?? 'default'\n            ],\n            array_filter([\n                'utm_term' =&gt; $params['term'] ?? null,\n                'utm_content' =&gt; $params['content'] ?? null\n            ])\n        ));\n    }\n\n    public function extractTrackingParams(string $url): array\n    {\n        $parts = url()-&gt;parse($url);\n        $tracking = [];\n\n        foreach ($parts['query'] as $key =&gt; $value) {\n            if (str_starts_with($key, 'utm_')) {\n                $tracking[substr($key, 4)] = $value;\n            }\n        }\n\n        return $tracking;\n    }\n}\n</code></pre>"},{"location":"utility-functions/","title":"Lightpack Utility Functions","text":"<p>Lightpack provides few handy utility functions to simplify common usage scenarios in your application.</p>"},{"location":"utility-functions/#csrf_input","title":"csrf_input()","text":"<p>What it does: Outputs a hidden HTML input containing the current CSRF token (named <code>_token</code>).</p> <p>When to use: - Always include this in every <code>&lt;form&gt;</code> that performs a POST, PUT, PATCH, or DELETE request. - Protects your application from Cross-Site Request Forgery attacks.</p> <p>Example:</p> <pre><code>&lt;form method=\"POST\"&gt;\n  &lt;?= csrf_input() ?&gt;\n  &lt;!-- other fields --&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"utility-functions/#csrf_token","title":"csrf_token()","text":"<p>What it does: Returns the current CSRF token as a string.</p> <p>When to use: - When you need to access the token value directly (e.g., for AJAX requests or custom headers).</p> <p>Example:</p> <pre><code>$token = csrf_token();\n// Use $token in an AJAX request header\n</code></pre>"},{"location":"utility-functions/#spoof_input","title":"spoof_input()","text":"<p><code>spoof_input(string $method)</code></p> <p>What it does: Outputs a hidden input to spoof HTTP methods (like PUT, PATCH, DELETE) in HTML forms.</p> <p>When to use: - When you want to send a method other than GET or POST in a form submission. - HTML forms only support GET and POST natively; this lets you use RESTful verbs.</p> <p>Example:</p> <pre><code>&lt;form method=\"POST\" action=\"/resource/123\"&gt;\n  &lt;?= csrf_input() ?&gt;\n  &lt;?= spoof_input('DELETE') ?&gt;\n  &lt;button type=\"submit\"&gt;Delete&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"utility-functions/#dd","title":"dd()","text":"<p><code>dd(...$args)</code></p> <p>What it does: \u201cDump and Die\u201d\u2014outputs the contents of variables (like <code>var_dump</code>) and stops the script.</p> <p>When to use: - For debugging: inspect variables, arrays, or objects at any point in your code. - Use in development only; never leave in production code.</p> <p>Example:</p> <pre><code>dd($user, $posts);\n</code></pre>"},{"location":"utility-functions/#pp","title":"pp()","text":"<p><code>pp(...$args)</code></p> <p>What it does: \u201cPretty Print\u201d\u2014outputs variables using <code>print_r</code> and stops the script. This function is useful for debugging purposes, especially when working with arrays and objects.</p> <p>When to use: - For debugging: best for arrays and objects where structure matters. This provides a clear and readable representation of the data. - Use in development only.</p> <p>Example:</p> <pre><code>pp($myArray);\n</code></pre> <pre><code>pp($var1, $var2, $var3)\n</code></pre>"},{"location":"validation/","title":"Lightpack Validation","text":"<p>Lightpack provides robust data validation support. This can be helpful when validating form inputs or data to be stored in database.</p>"},{"location":"validation/#quick-start","title":"Quick Start","text":"<p>In your controller's method, you can typehint <code>Lightpack\\Validation\\Validator</code> as dependency or you can call the <code>validator()</code> helper function.</p> <pre><code>$validator = validator();\n\n$validator\n    -&gt;field('username')-&gt;required()-&gt;string()-&gt;min(3)-&gt;max(50)\n    -&gt;field('email')-&gt;required()-&gt;email()\n    -&gt;field('age')-&gt;int()-&gt;between(18, 100);\n\n$validator-&gt;validate($_POST);\n\nif ($validator-&gt;fails()) {\n    $errors = $validator-&gt;getErrors();\n}\n</code></pre>"},{"location":"validation/#how-validation-works","title":"How Validation Works","text":"<ol> <li>Define fields and rules using the fluent API.</li> <li>Call <code>validate($input)</code> to run validation.</li> <li>Check results with <code>passes()</code>, <code>fails()</code>, <code>getErrors()</code>, or <code>getError('field')</code>.</li> </ol>"},{"location":"validation/#sticky-forms-and-errors","title":"Sticky Forms and Errors","text":"<p>If the form validation fails for the current request, you would want to: - Repopulate fields with the user's previous input (\"sticky\" forms) - Show validation error messages next to each field</p> <p>When you call <code>validateRequest()</code> method on the validator instance, Lightpack automatically sets the current request input data and validation error messages in the active session.</p> <p>Lightpack provides two helpers: - <code>old('field')</code> \u2014 Returns the previous value for a field - <code>error('field')</code> \u2014 Returns the validation error message for a field</p>"},{"location":"validation/#old","title":"old()","text":"<p><code>old(string $key, $default = '', bool $escape = true)</code></p> <p>What it does: Returns the previously submitted value for a form field, or a default if not present.</p> <p>When to use: - To repopulate form fields after a validation error, so users don\u2019t lose their input. - Especially useful in large forms or when validation fails.</p> <p>Example:</p> <pre><code>&lt;input name=\"email\" value=\"&lt;?= old('email') ?&gt;\"&gt;\n</code></pre> <p>If the user submitted the form and it failed validation, their email input will be preserved.</p>"},{"location":"validation/#error","title":"error()","text":"<p><code>error(string $key)</code></p> <p>What it does: Returns the validation error message for a specific field, if any.</p> <p>When to use: - To show users what went wrong with their input after a failed form submission. - Place near each form field for clear feedback.</p> <p>Example:</p> <pre><code>&lt;input name=\"email\" value=\"&lt;?= old('email') ?&gt;\"&gt;\n&lt;span class=\"error\"&gt;&lt;?= error('email') ?&gt;&lt;/span&gt;\n</code></pre> <p>If validation fails for <code>email</code>, the error message appears next to the field.</p>"},{"location":"validation/#example","title":"Example","text":"<p>Below is an example showing usage of above two helper functions.</p> <p>Controller</p> <pre><code>public function register(Request $request)\n{\n    $validator = validator()\n        -&gt;field('username')-&gt;required()-&gt;min(3)\n        -&gt;field('email')-&gt;required()-&gt;email()\n        -&gt;field('password')-&gt;required()-&gt;min(8);\n\n    $validator-&gt;validateRequest();\n\n    if ($validator-&gt;fails()) {\n        return redirect()-&gt;back();\n    }\n\n    // ... proceed with registration\n}\n</code></pre> <p>View</p> <pre><code>&lt;form method=\"POST\"&gt;\n    &lt;?= csrf_input() ?&gt;\n\n    &lt;label&gt;Username&lt;/label&gt;\n    &lt;input name=\"username\" value=\"&lt;?= old('username') ?&gt;\"&gt;\n    &lt;span class=\"error\"&gt;&lt;?= error('username') ?&gt;&lt;/span&gt;\n\n    &lt;label&gt;Email&lt;/label&gt;\n    &lt;input name=\"email\" value=\"&lt;?= old('email') ?&gt;\"&gt;\n    &lt;span class=\"error\"&gt;&lt;?= error('email') ?&gt;&lt;/span&gt;\n\n    &lt;label&gt;Password&lt;/label&gt;\n    &lt;input name=\"password\" type=\"password\"&gt;\n    &lt;span class=\"error\"&gt;&lt;?= error('password') ?&gt;&lt;/span&gt;\n\n    &lt;button type=\"submit\"&gt;Register&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"validation/#form-requests","title":"Form Requests","text":"<p>The <code>FormRequest</code> class in Lightpack provides a powerful, expressive, and reusable way to handle HTTP request validation and authorization in your applications. It encapsulates validation logic, error handling, and request data preparation, making your controllers clean and focused.</p>"},{"location":"validation/#key-features","title":"Key Features","text":"<ul> <li>Thin Controllers: Move all validation logic to FormRequest classes.</li> <li>Reusable Rules: Centralize and reuse request validation across controllers.</li> <li>Automatic Validation: Requests are validated before reaching your controller logic.</li> <li>AJAX &amp; JSON Support: Automatically returns JSON error responses for AJAX/JSON requests.</li> <li>Custom Hooks: Easily customize data preparation and error handling with overridable methods.</li> <li>Seamless Integration: Works with Lightpack\u2019s DI container, session, and redirect systems.</li> <li>Session Flash: Validation errors and current request input are automatically flashed to the session for easy display in views.</li> <li>Use old() and error() methods to work with sticky forms and displaying error messages.</li> </ul>"},{"location":"validation/#how-it-works","title":"How It Works","text":"<ol> <li>Extend FormRequest: Create your own request classes by extending <code>Lightpack\\Http\\FormRequest</code>.</li> <li>Define Rules: Implement the <code>rules()</code> method to return your validation rules.</li> <li>Rule Resolution: Your <code>rules()</code> method is called via the container.</li> <li>You can typehint dependencies you would like to get injected by the framework.</li> <li>Automatic Bootstrapping: Lightpack boots your FormRequest, runs validation, and handles errors or passes control to your controller.</li> <li>On successful validation, controller method executes further.</li> <li>On Failure:</li> <li>AJAX/JSON: Responds with HTTP 422 and a JSON error structure.</li> <li>Standard Request: Redirects back with errors in the session.</li> <li>Custom hooks (<code>beforeSend</code>, <code>beforeRedirect</code>) are available for advanced control.</li> </ol>"},{"location":"validation/#example-usage","title":"Example Usage","text":""},{"location":"validation/#1-create-a-formrequest","title":"1. Create a FormRequest","text":"<pre><code>php console create:request RegisterUserRequest\n</code></pre> <p>Then implement the <code>rules()</code> method. For example:</p> <pre><code>namespace App\\Requests;\n\nuse Lightpack\\Http\\FormRequest;\n\nclass RegisterUserRequest extends FormRequest\n{\n    protected function rules()\n    {\n         $this-&gt;validator\n            -&gt;field('name')\n            -&gt;required()\n            -&gt;max(255);\n\n         $this-&gt;validator\n            -&gt;field('email')\n            -&gt;required()\n            -&gt;email()\n            -&gt;custom(new UniqueEmailRule, UniqueEmailRule::MESSAGE);\n\n         $this-&gt;validator\n            -&gt;field('password')\n            -&gt;required()\n            -&gt;min(6)\n            -&gt;max(25);\n\n         $this-&gt;validator\n            -&gt;field('confirm_password')\n            -&gt;required()\n            -&gt;same('password');\n    }\n}\n</code></pre>"},{"location":"validation/#2-use-in-controller","title":"2. Use in Controller","text":"<p>Typehint the request class as dependency in your controller's method:</p> <pre><code>public function register(RegisterUserRequest $request)\n{\n   // If validation passes, you reach here!\n\n    $data = $request-&gt;all();\n\n   // Proceed with user registration...\n}\n</code></pre>"},{"location":"validation/#overridable-hooks","title":"Overridable Hooks","text":"<p>You can customize the request lifecycle by overriding these methods:</p> <ul> <li><code>protected function data()</code>: Prepare or mutate request data before validation.</li> <li><code>protected function beforeSend()</code>: Run logic before sending a JSON error response.</li> <li><code>protected function beforeRedirect()</code>: Run logic before redirecting on validation failure.</li> </ul> <p>Override any of the following in your FormRequest:</p> <pre><code>protected function data()\n{\n   // Manipulate request input data before validation\n}\n\nprotected function beforeSend()\n{\n   // Add custom headers or logging before JSON error response\n}\n\nprotected function beforeRedirect()\n{\n   // Custom logic before redirecting on failure\n}\n</code></pre>"},{"location":"validation/#available-rules","title":"Available Rules","text":""},{"location":"validation/#string-rules","title":"String Rules","text":"<ul> <li><code>required()</code> \u2014 Field must be present and not empty</li> <li><code>string()</code> \u2014 Must be a string</li> <li><code>min($n)</code> / <code>max($n)</code> \u2014 Length constraints</li> <li><code>length($n)</code> \u2014 Exact length</li> <li><code>alpha()</code> / <code>alphaNum()</code> \u2014 Only letters or letters/numbers</li> <li><code>regex($pattern)</code> \u2014 Custom regex</li> <li><code>slug()</code> \u2014 URL-friendly string</li> <li><code>email()</code> \u2014 Valid email address</li> <li><code>url()</code> \u2014 Valid URL</li> <li><code>ip()</code> / <code>ip('v6')</code> - Valid IPv4 or IPv6 address</li> </ul>"},{"location":"validation/#numeric-rules","title":"Numeric Rules","text":"<ul> <li><code>numeric()</code> \u2014 Any number</li> <li><code>int()</code> / <code>float()</code> \u2014 Integer or float</li> <li><code>between($min, $max)</code> \u2014 Value range</li> <li><code>min($n)</code> / <code>max($n)</code> \u2014 Value constraints</li> </ul>"},{"location":"validation/#datetime-rules","title":"Date/Time Rules","text":"<ul> <li><code>date($format = null)</code> \u2014 Valid date (optionally with format)</li> <li><code>before($date, $format = null)</code> / <code>after($date, $format = null)</code> \u2014 Date comparison</li> </ul>"},{"location":"validation/#boolean-rules","title":"Boolean Rules","text":"<ul> <li><code>bool()</code> \u2014 Must be boolean</li> </ul>"},{"location":"validation/#array-rules","title":"Array Rules","text":"<ul> <li><code>array($min = null, $max = null)</code> \u2014 Must be array, with optional length</li> <li><code>in($values)</code> / <code>notIn($values)</code> \u2014 Value must (not) be in list</li> <li><code>unique()</code> \u2014 All values must be unique</li> </ul>"},{"location":"validation/#comparison-rules","title":"Comparison Rules","text":"<ul> <li><code>same($field)</code> \u2014 Must match another field</li> <li><code>different($field)</code> \u2014 Must not match another field</li> </ul>"},{"location":"validation/#file-image-rules","title":"File &amp; Image Rules","text":"<ul> <li><code>file()</code> \u2014 Valid file upload</li> <li><code>fileSize($size)</code> \u2014 Max file size (e.g. '2M', '500K')</li> <li><code>fileType($types)</code> \u2014 Allowed MIME types</li> <li><code>fileExtension($exts)</code> \u2014 Allowed extensions</li> <li><code>files($min = null, $max = null)</code> \u2014 Multiple files</li> <li><code>image($options)</code> \u2014 Image validation (width, height, ratio)</li> </ul>"},{"location":"validation/#custom-advanced-rules","title":"Custom &amp; Advanced Rules","text":"<ul> <li><code>custom($fn, $message)</code> \u2014 Custom closure for validation</li> <li><code>transform($fn)</code> \u2014 Preprocess value before validation</li> <li><code>nullable()</code> \u2014 Field can be null or empty</li> </ul>"},{"location":"validation/#wildcards-nested-validation","title":"Wildcards &amp; Nested Validation","text":"<p>Validate arrays of objects or deeply nested data with wildcards:</p> <pre><code>$validator\n    -&gt;field('users.*.email')-&gt;required()-&gt;email()\n    -&gt;field('users.*.roles')-&gt;array()-&gt;in(['admin', 'user']);\n\n$input = [\n    'users' =&gt; [\n        ['email' =&gt; 'john@example.com', 'roles' =&gt; ['admin']],\n        ['email' =&gt; 'jane@example.com', 'roles' =&gt; ['user']],\n    ]\n];\n\n$validator-&gt;validate($input);\n</code></pre>"},{"location":"validation/#file-image-validation","title":"File &amp; Image Validation","text":"<pre><code>$validator-&gt;field('avatar')\n    -&gt;file()\n    -&gt;fileSize('1M')\n    -&gt;fileType(['image/jpeg', 'image/png'])\n    -&gt;image([\n        'min_width' =&gt; 100,\n        'max_width' =&gt; 1000,\n        'min_height' =&gt; 100,\n        'max_height' =&gt; 1000,\n        'ratio' =&gt; '1:1'\n    ]);\n</code></pre> <p>Multiple files:</p> <pre><code>$validator-&gt;field('photos')\n    -&gt;files(1, 5)\n    -&gt;fileSize('2M')\n    -&gt;fileType(['image/jpeg', 'image/png']);\n</code></pre>"},{"location":"validation/#error-handling-messages","title":"Error Handling &amp; Messages","text":"<ul> <li><code>getErrors()</code> \u2014 All errors as <code>[field =&gt; message]</code></li> <li><code>getError('field')</code> \u2014 First error for a field</li> <li><code>getFieldErrors('field')</code> \u2014 All errors for a field</li> </ul>"},{"location":"validation/#custom-error-messages","title":"Custom error messages","text":"<pre><code>$validator-&gt;field('age')\n    -&gt;numeric()\n    -&gt;message('Age must be a number')\n    -&gt;between(18, 100)\n    -&gt;message('Age must be between 18 and 100');\n</code></pre>"},{"location":"validation/#example-password-strength","title":"Example: Password Strength","text":"<pre><code>$validator-&gt;field('password')\n    -&gt;required()\n    -&gt;between(8, 32)\n    -&gt;hasUppercase()\n    -&gt;hasLowercase()\n    -&gt;hasNumber()\n    -&gt;hasSymbol();\n</code></pre>"},{"location":"validation/#example-user-registration","title":"Example: User Registration","text":"<pre><code>$validator\n    -&gt;field('username')-&gt;required()-&gt;string()-&gt;min(3)-&gt;max(50)-&gt;alphaNum()\n    -&gt;field('email')-&gt;required()-&gt;email()\n    -&gt;field('password')-&gt;required()-&gt;between(8, 32)-&gt;hasUppercase()-&gt;hasLowercase()-&gt;hasNumber()-&gt;hasSymbol()\n    -&gt;field('avatar')-&gt;nullable()-&gt;image([\n        'max_width' =&gt; 1000,\n        'max_height' =&gt; 1000,\n        'max_size' =&gt; '1M'\n    ]);\n</code></pre>"},{"location":"validation/#nested-conditional-validation","title":"Nested &amp; Conditional Validation","text":"<pre><code>$validator\n    -&gt;field('user.profile.name')-&gt;required()\n    -&gt;field('user.profile.age')-&gt;required()-&gt;int()-&gt;custom(fn($v) =&gt; $v &gt;= 18, 'Must be 18 or older');\n\n$validator\n    // Only one address can be primary\n    -&gt;field('user.addresses')-&gt;custom(function($addresses) {\n        $primaryCount = 0;\n        foreach ($addresses as $address) {\n            if ($address['is_primary']) {\n                $primaryCount++;\n            }\n        }\n        return $primaryCount === 1;\n    }, 'Only one address can be marked as primary');\n</code></pre>"},{"location":"validation/#custom-rules-transformers","title":"Custom Rules &amp; Transformers","text":""},{"location":"validation/#register-a-custom-rule-globally","title":"Register a custom rule globally","text":"<pre><code>$validator-&gt;addRule('uppercase', function($value) {\n    return strtoupper($value) === $value;\n}, 'Must be uppercase');\n\n$validator-&gt;field('code')-&gt;uppercase();\n</code></pre>"},{"location":"validation/#custom-rule-per-field","title":"Custom rule per field","text":"<pre><code>$validator-&gt;field('code')-&gt;custom(function($value) {\n    return preg_match('/^CODE-\\\\d{6}$/', $value);\n}, 'Invalid code format');\n</code></pre>"},{"location":"validation/#transform-values-before-validation","title":"Transform values before validation","text":"<pre><code>$validator-&gt;field('tags')\n    -&gt;transform(fn($v) =&gt; explode(',', $v))\n    -&gt;array();\n</code></pre>"},{"location":"validation/#class-based-custom-rules","title":"Class-Based Custom Rules","text":"<p>For advanced scenarios, you can use invokable classes as custom validation rules. This is ideal for business logic that needs dependencies, database access, or configuration.</p> <p>Example: Unique Email Rule</p> <pre><code>namespace App\\Rules;\n\nuse App\\Models\\User;\n\nclass UniqueEmailRule\n{\n    public const MESSAGE = 'Email already exists';\n\n    public function __construct(\n        private ?int $excludeId = null\n    ) {}\n\n    public function __invoke(string $email): bool\n    {\n        return User::query()\n            -&gt;where('email', '=', $email)\n            -&gt;whereIf($this-&gt;excludeId, 'id', '!=', $this-&gt;excludeId)\n            -&gt;notExists();\n    }\n}\n</code></pre> <p>Usage:</p> <pre><code>$validator-&gt;field('email')\n    -&gt;required()\n    -&gt;email()\n    -&gt;custom(new UniqueEmailRule, UniqueEmailRule::MESSAGE);\n</code></pre> <ul> <li>The rule can accept constructor arguments (e.g., <code>$excludeId</code> for updates).</li> <li>The validator will call the class as an invokable (<code>__invoke</code>) object.</li> <li>This pattern keeps business logic clean, testable, and reusable.</li> </ul>"},{"location":"views/","title":"Lightpack View Template System","text":"<p>The <code>Lightpack\\View\\Template</code> class is the core of Lightpack\u2019s view rendering system. It provides a minimal, robust, and flexible API for rendering PHP templates, including support for data injection, template composition, conditional inclusion, and error handling. This documentation provides an exhaustive breakdown of its design, usage, and internals.</p> <p>Use the helper function <code>template()</code> to utilize the view templating capabilities.</p> <p>Lightpack expects all your view templates to be located in the app/views/ directory of your project. You can organize your layouts, partials, and page templates here, using subdirectories as needed.</p>"},{"location":"views/#available-methods","title":"Available Methods","text":""},{"location":"views/#render","title":"render()","text":"<p><code>render(string $file, array $data = []): string</code></p> <ul> <li>Purpose: Render a template file with provided data.</li> <li>Usage:   ```php   render('profile', ['user' =&gt; $user]) ?&gt;</li> </ul> <p>```</p>"},{"location":"views/#include","title":"include()","text":"<p><code>include(string $file, array $data = []): string</code></p> <ul> <li>Purpose: Render a sub-template (partial) with provided data, </li> <li>Also has access to parent template but overrides data with same matching keys.</li> <li>However, the data set in the included template does not affect the parent template\u2019s data.</li> <li>Usage:   ```php   include('partials/header', ['title' =&gt; 'Home']) ?&gt;</li> </ul> <p>```</p>"},{"location":"views/#includeif","title":"includeIf()","text":"<p><code>includeIf(bool $flag, string $file, array $data = []): string</code></p> <ul> <li>Purpose: Conditionally include a sub-template based on a boolean flag.</li> <li>Pattern:</li> <li>If <code>$flag</code> is <code>true</code>, includes the template (via <code>include</code>).</li> <li>If <code>false</code>, returns an empty string.</li> <li>Usage:   ```php   includeIf($user-&gt;isAdmin(), 'partials/admin', ['user' =&gt; $user]) ?&gt;</li> </ul> <p>```</p>"},{"location":"views/#component","title":"component()","text":"<p><code>component(string $file, array $data = []): string</code></p> <ul> <li>Purpose: Render a template as a component, using only the provided data (does not merge with internal data).</li> <li>Difference from <code>include</code>: No data merging with parent; only provided data is available.</li> <li>Usage:   ```php   component('components/button', ['type' =&gt; 'submit']) ?&gt;</li> </ul> <p>```</p>"},{"location":"views/#understanding-differences","title":"Understanding Differences","text":"<p>These methods all render templates, but their behavior around data merging, isolation, and intended use is different. Here\u2019s a practical breakdown to make their differences clear:</p> <ul> <li>render()</li> <li>Think of this as \"show me a complete page.\" </li> <li>Used for top-level views.</li> <li>include()</li> <li>Like \"inserting a partial inside another template.\" </li> <li>It creates a new, isolated template instance, merges the parent\u2019s data with any additional data, and renders the partial. </li> <li>Used for reusable bits (headers, nav, footers).</li> <li>component()</li> <li>Used for stateless, reusable UI pieces (buttons, alerts).</li> <li>Think of this as \"render a widget with only the data I give it.\" </li> <li>It does NOT merge with parent data\u2014only what you pass is available. </li> </ul>"},{"location":"views/#example","title":"Example","text":"<p>Render the <code>app/views/profile.php</code> template with passed data.</p> <pre><code>&lt;?= template()-&gt;render('profile', [\n    'user' =&gt; 'Alice', \n    'role' =&gt; 'admin',\n    'theme' =&gt; 'dark'\n]);\n</code></pre> <p>In <code>app/view/profile.php</code> template:</p> <pre><code>&lt;h1&gt;Profile&lt;/h1&gt;\n\n&lt;!-- app/views/partials/header.php --&gt;\n&lt;?= template()-&gt;include('partials/header', [\n    'page' =&gt; 'Profile'\n]) ?&gt;\n\n&lt;!-- app/views/components/header.php --&gt;\n&lt;?= template()-&gt;component('components/button', [\n    'label' =&gt; 'Save'\n]) ?&gt;\n</code></pre> <p>Data available in each method:</p> Method Available Data render() user, role, theme include() user, role, theme, page component() label <ul> <li><code>render</code> acts as parent template with access to all data passed.</li> <li><code>include</code> merges parent data + provided arguments (for the partial).</li> <li><code>component</code> only gets what you pass\u2014no parent data.</li> </ul>"},{"location":"views/#decision-table","title":"Decision Table","text":"Use case Method Render a full page render Insert a partial (header, nav) include Render a stateless widget component Need parent data in partial include Want only explicit data component <p>Tip: If you want maximum isolation and reusability, use <code>component</code>. For partials that need context, use <code>include</code>. For the main view, use <code>render</code>.</p>"},{"location":"views/#practical-usage-in-controllers","title":"Practical Usage in Controllers","text":"<p>Typically, templates are rendered as HTML responses directly from controller actions.</p> <pre><code>class ProfileController\n{\n    public function show()\n    {\n        return response()-&gt;view('profile', [\n            'name' =&gt; 'John Doe',\n            'email' =&gt; 'johndoe@example.com',\n        ]);\n    }\n}\n</code></pre> <p>This will look for the <code>app/views/profile.php</code> template file and render it with passed data as second argument.</p> <pre><code>&lt;ul&gt;\n    &lt;li&gt;Name: &lt;?= $name ?&gt;&lt;/li&gt;\n    &lt;li&gt;Email: &lt;?= $email ?&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>"},{"location":"views/#building-layouts","title":"Building Layouts","text":"<p>Layouts enable you to define a common structure for your pages (such as headers, footers, navigation, and meta tags) while allowing individual templates to inject their own content.</p> <p>There is a special method for rendering embedded child content inside a layout:</p> <pre><code>template()-&gt;embed()\n</code></pre>"},{"location":"views/#1-controller","title":"1. Controller","text":"<p>Specify the <code>__embed</code> key in view data with the name of the template you are expect to be embedded in layout.php view.</p> <pre><code>public function dashboard()\n{\n    return response()-&gt;view('layout', [\n        '__embed' =&gt; 'dashboard', // dashboard template\n        'title'   =&gt; 'Dashboard',\n        'copyright' =&gt; '@Lightpack',\n        'stats'    =&gt; ['sales' =&gt; 23, 'leads' =&gt; 100],\n    ]);\n}\n</code></pre> <p>All the data is automatically passed to layout.php except <code>__embed</code> which is unset by the framework when rendering the view template.</p>"},{"location":"views/#2-define-templates","title":"2. Define Templates","text":"<p>An example directory structure for defining view templates might look like:</p> <pre><code>app/\n\u2514\u2500\u2500 views/\n    \u251c\u2500\u2500 layout.php           # Main layout template\n    \u251c\u2500\u2500 dashboard.php        # Dashboard content template\n    \u2514\u2500\u2500 partials/\n        \u2514\u2500\u2500 header.php\n        \u2514\u2500\u2500 footer.php\n        \u2514\u2500\u2500 header.php\n</code></pre> <ul> <li>layout.php: Your main layout file (includes header, footer, and an embed slot for child content).</li> <li>header.php, footer.php: Common partials included in layouts or other templates.</li> <li>dashboard.php: referenced as embedded content inside layout.</li> </ul> <p><code>app/views/partials/header.php</code></p> <pre><code>&lt;header&gt;\n    &lt;?= $title ?&gt;\n&lt;/header&gt;\n</code></pre> <p><code>app/views/partials/footer.php</code></p> <pre><code>&lt;footer&gt;\n    &lt;?= $copyright ?&gt;\n&lt;/footer&gt;\n</code></pre> <p><code>app/views/dashboard.php</code></p> <pre><code>Total Sales: &lt;?= $stats['sales'] ?&gt;\nTotal Leads: &lt;?= $stats['leads'] ?&gt;\n</code></pre> <p><code>app/views/layout.php</code></p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;body&gt;\n        &lt;!-- include header template --&gt;\n        &lt;?= template()-&gt;include('header') ?&gt;\n\n        &lt;main&gt;\n            &lt;!-- embed child content --&gt;\n            &lt;?= template()-&gt;embed() ?&gt;\n        &lt;/main&gt;\n\n        &lt;!-- include footer template --&gt;\n        &lt;?= template()-&gt;include('footer') ?&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Observe that we've embed the <code>app/view/dashboard.php</code> template using:</p> <p><code>&lt;?= template()-&gt;embed() ?&gt;</code></p>"},{"location":"views/#escaping-output","title":"Escaping Output","text":"<p>Lightpack provides a convenient global function, <code>_e()</code>, to help you safely output dynamic data in your templates:</p> <ul> <li>It converts special characters to their HTML entity equivalents.</li> <li>Prevents Cross-Site Scripting (XSS) by ensuring user-supplied or dynamic data cannot break out of HTML context.</li> <li>Use it whenever you output any data that may contain special HTML characters or come from user input.</li> </ul> <pre><code>&lt;?php foreach($comments as $comment): ?&gt;\n    &lt;?= _e($comment) ?&gt;\n&lt;?php endforeach  ?&gt;\n</code></pre>"},{"location":"views/#few-suggestions","title":"Few Suggestions","text":"<p>Using PHP as a template engine doesn\u2019t mean you have to write messy or \u201cspaghetti\u201d code. Follow these principles for clean, maintainable views:</p> <p>Keep business logic out of templates. - All data preparation, decisions, and calculations should happen in your controllers or services. - Templates should focus only on presentation: displaying variables, looping over data, and calling includes/components. - This is the single biggest reason why templates become messy.</p> <p>Use Partials and Components - Break up large templates into smaller, reusable pieces (headers, footers, navbars, widgets). - Use <code>template()-&gt;include()</code> and <code>template()-&gt;component()</code> to compose your UI from simple building blocks.</p> <p>Leverage Layouts - Define a base layout for your site and inject page content into it. - This keeps your structure consistent and your page templates focused.</p> <p>Minimize Inline PHP - Use short echo tags (<code>&lt;?= ... ?&gt;</code>) for output. - Avoid complex <code>if</code>/<code>else</code> or function calls in templates\u2014prepare everything in advance.</p> <p>Name Variables Clearly - Use descriptive variable names so your templates are self-explanatory.</p> <p>Escape Output Where Needed - Always escape user-provided data with <code>_e()</code>, unless you are certain it\u2019s safe.</p>"},{"location":"webhook/","title":"Lightpack Webhook Receiver","text":"<p>A robust, flexible, and production-ready webhook processing framework for PHP/Lightpack projects. Easily receive, verify, store, and process webhooks from any provider (Stripe, GitHub, Slack, etc.)</p>"},{"location":"webhook/#features","title":"Features","text":"<ul> <li>Provider-agnostic: Plug in any webhook provider with simple config.</li> <li>Signature verification: Securely verify authenticity of incoming requests.</li> <li>Idempotency: Prevent duplicate event processing using provider+event ID.</li> <li>Payload &amp; header storage: Audit, debug, and replay all webhook events.</li> <li>Status tracking: Track event lifecycle (<code>pending</code>, <code>processed</code>, <code>failed</code>).</li> <li>Extensible handlers: Easily add provider-specific logic via custom classes.</li> </ul>"},{"location":"webhook/#event-storage-schema","title":"Event Storage Schema","text":"Column Type Description id bigint Primary key provider varchar Provider name (e.g., 'stripe') event_id varchar Unique event ID (nullable) payload text Full event payload (array, JSON-cast) headers text All request headers (array, JSON-cast) status varchar Event status (<code>pending</code>, <code>processed</code>, <code>failed</code>) received_at datetime Timestamp of event receipt"},{"location":"webhook/#migration","title":"Migration","text":"<p>Run this command to generate a migration file:</p> <pre><code>php console create:migration create_table_webhook_events\n</code></pre> <p>Use the following code for the up() and down() methods:</p> <pre><code>public function up(): void\n{\n    $this-&gt;create('webhook_events', function (Table $table) {\n        $table-&gt;id();\n        $table-&gt;varchar('provider', 64);\n        $table-&gt;varchar('event_id', 128)-&gt;nullable();\n        $table-&gt;column('payload')-&gt;type('text');\n        $table-&gt;column('headers')-&gt;type('text')-&gt;nullable();\n        $table-&gt;varchar('status', 32)-&gt;default('pending');\n        $table-&gt;datetime('received_at')-&gt;default('CURRENT_TIMESTAMP');\n        $table-&gt;unique(['provider', 'event_id']);\n    });\n}\n\npublic function down(): void\n{\n    $this-&gt;drop('webhook_events');\n}\n</code></pre>"},{"location":"webhook/#configuration","title":"Configuration","text":"<p>In your config (e.g., <code>config/webhook.php</code>):</p> <pre><code>return [\n    // example: stripe\n    'stripe' =&gt; [\n        'secret' =&gt; 'your-stripe-webhook-secret',\n        'algo' =&gt; 'hmac', // or 'static' for static secrets\n        'id' =&gt; 'id', // field in payload for event ID\n        'handler' =&gt; App\\Webhooks\\StripeWebhookHandler::class,\n    ],\n    // example: github\n    'github' =&gt; [\n        'secret' =&gt; 'your-github-secret',\n        'algo' =&gt; 'hmac',\n        'id' =&gt; 'delivery', // GitHub's event ID is in a header\n        'handler' =&gt; App\\Webhooks\\GitHubWebhookHandler::class,\n    ],\n];\n</code></pre> <ul> <li><code>secret</code>: Your provider's webhook signing secret.</li> <li><code>algo</code>: Signature verification algorithm (<code>hmac</code> or <code>static</code>).</li> <li><code>id</code>: Field name in payload (or header) for unique event ID.</li> <li><code>handler</code>: Custom handler class for provider-specific logic.</li> </ul>"},{"location":"webhook/#usage","title":"Usage","text":"<ol> <li>Define your webhook route:</li> </ol> <p>Add following route definition in <code>routes/web.php</code> file. The corresponding <code>WebhookController</code> is already implemented by the framework.</p> <pre><code>route()-&gt;post('/webhook/:provider', WebhookController::class, 'handle');\n</code></pre> <ol> <li>Implement custom handlers as needed:</li> </ol> <p><code>app/Webhooks/StripeWebhookHandler.php</code></p> <pre><code>use Lightpack\\Webhook\\BaseWebhookHandler;\n\nclass StripeWebhookHandler extends BaseWebhookHandler\n{\n    public function verifySignature(): static\n    {\n        // Stripe-specific signature logic\n        return $this;\n    }\n\n    public function handle(): Response\n    {\n        // Custom event processing\n        return response()-&gt;json(['status' =&gt; 'ok'], 200);\n    }\n}\n</code></pre> <p>Example: Custom Handler for Header-Based Event ID</p> <p>In cases where the webhook receiver gets the event id in request header, you need to override <code>storeEvent()</code> method.</p> <pre><code>class GitHubWebhookHandler extends BaseWebhookHandler\n{\n    public function storeEvent(?string $eventId): WebhookEvent\n    {\n        // GitHub's delivery ID is in a header\n        $eventId = $this-&gt;request-&gt;header('X-GitHub-Delivery');\n\n        return parent::storeEvent($eventId);\n    }\n}\n</code></pre>"},{"location":"webhook/#security-idempotency","title":"Security &amp; Idempotency","text":"<ul> <li>Signature verification: All requests are verified using the configured secret and algorithm before processing.</li> <li>Idempotency: Duplicate events (same provider + event ID) are ignored, ensuring safe retries.</li> <li>Missing event ID: If a provider does not send an event ID, events are stored with <code>event_id = null</code> and idempotency is not enforced.</li> </ul>"},{"location":"webhook/#best-practices-tips","title":"Best Practices &amp; Tips","text":"<ul> <li>Always specify the correct event ID field for each provider in your config.</li> <li>For providers with event IDs in headers (e.g., GitHub), extend your handler to extract the ID from headers.</li> <li>If a provider does not send an event ID, be aware that idempotency is not enforced\u2014duplicate events may be processed.</li> <li>Extend BaseWebhookHandler for provider-specific signature verification and event processing.</li> <li>Log and monitor webhook event statuses for production visibility.</li> </ul>"},{"location":"webhook/#notes","title":"Notes","text":"<p>What if my provider doesn't send a unique event ID?</p> <p>The event will be stored with <code>event_id = null</code>, and idempotency will not be enforced. You may want to generate your own unique key if needed.</p> <p>Can I process multiple providers with different logic?</p> <p>Yes! Simply specify a different handler class per provider in your config.</p> <p>How do I debug webhook failures?</p> <p>All events (including failed ones) are stored with full payload and headers. Check the <code>webhook_events</code> table for details.</p>"}]}